<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>可断点爬虫实现（二）</title>
    <link href="/11/12/Python/%E7%88%AC%E8%99%AB/%E5%8F%AF%E6%96%AD%E7%82%B9%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%E4%BA%8C/"/>
    <url>/11/12/Python/%E7%88%AC%E8%99%AB/%E5%8F%AF%E6%96%AD%E7%82%B9%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>相信看到这里的同学们已经看过我写的第一篇文章了，那接下来这一篇我们主要来讲讲如何将上一篇的代码组合起来，能够使我们的代码最优化</p></blockquote><h4 id="1-算法"><a class="markdownIt-Anchor" href="#1-算法"></a> 1. 算法</h4><blockquote><p>讲到这里呢，我们先来谈谈两种算法。<br />相信学过数据结构的人都知到在树的遍历里面有两种很经典的搜索算法，他们分别是 <code>深度优先搜索</code> 和 <code>广度优先搜索</code>，如果说你学过这一部分的知识的话，那么就可以跳过这一部分内容了，如果说没有学过，那么不要着急，此处会慢慢给大家分析分析。</p></blockquote><ul><li><p>深度优先搜索（DFS）</p><blockquote><p>深度优先搜索，根据它的字面意思可以了解到它是会优先不断地向下一层去搜索，直到这棵树再没有子节点，程序就会返回上一个层去搜索另一个节点。它的运行很类似于树的前序遍历。</p></blockquote></li><li><p>广度优先搜索（BFS）</p><blockquote><p>广度优先搜索每次运行都会先遍历完当前一层的所有节点，然后再去遍历下一层，它的运行过程很类似于树的层序遍历。</p></blockquote></li><li><p>代码实现</p></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++代码实现模板#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;map&lt;int, vector&lt;int&gt;&gt; L;&#x2F;&#x2F; 深度优先搜索实现void dfs(int node)&#123;    for (int item : L[node])    &#123;        cout &lt;&lt; item &lt;&lt; endl;        if (!L[item].empty())        &#123;            dfs(item);        &#125;    &#125;&#125;&#x2F;&#x2F; 广度优先搜索实现void bfs()&#123;    queue&lt;int&gt; ll;    ll.push(1);    while (!ll.empty())    &#123;        int temp &#x3D; ll.front();        ll.pop();        for (int item : L[temp])        &#123;            ll.push(item);            cout &lt;&lt; item &lt;&lt; endl;        &#125;    &#125;&#125;int main()&#123;    L[1] &#x3D; &#123;2, 3, 4&#125;;    L[2] &#x3D; &#123;5, 6, 7&#125;;    L[3] &#x3D; &#123;8, 9, 10&#125;;    L[4] &#x3D; &#123;11, 12, 13&#125;;    dfs(1);    cout &lt;&lt; &quot;---------------&quot; &lt;&lt; endl;    bfs();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python 代码模板实现</span>L <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 深度优先搜索</span><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> L<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">if</span> item <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment"># 广度优先搜索</span><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ll <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> ll<span class="token punctuation">:</span>        temp <span class="token operator">=</span> ll<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        ll<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> L<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>                ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------'</span><span class="token punctuation">)</span>    bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>以上两种代码实现效果一样</p><h5 id="2-代码实现"><a class="markdownIt-Anchor" href="#2-代码实现"></a> 2. 代码实现</h5><blockquote><p>既然了解了深度优先搜索和广度优先搜索，那么接下来我们就聊一聊我们代码的实现</p></blockquote><p>首先我先贴出我刚开始写的代码（通过深度优先搜索实现）</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_data_by_dfs</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> deep<span class="token punctuation">,</span> father_id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> book    message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''        ---------------------开始爬取--------------------        当前爬取的节点:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>father_id<span class="token punctuation">&#125;</span></span><span class="token string">        当前爬取的深度:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>deep<span class="token punctuation">&#125;</span></span><span class="token string">        -------------------------------------------------        '''</span></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    temp_url <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token comment"># 爬取地址处理，方便下一层地址的拼接</span>    <span class="token keyword">if</span> deep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        temp_data <span class="token operator">=</span> fetch_province_list<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> temp_data<span class="token punctuation">:</span>            <span class="token comment"># print(item)</span>            book<span class="token punctuation">[</span><span class="token string">"province"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cur_url <span class="token operator">=</span> temp_url <span class="token operator">+</span> <span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            cur_url <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_url<span class="token punctuation">)</span>     <span class="token comment"># url地址拼接</span>            get_data_by_dfs<span class="token punctuation">(</span>cur_url<span class="token punctuation">,</span> deep<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> father_id<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;</span> deep <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>        temp_data <span class="token operator">=</span> fetch_district_list<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> deep<span class="token operator">=</span>deep<span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> temp_data<span class="token punctuation">:</span>            <span class="token keyword">if</span> deep <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>                book<span class="token punctuation">[</span><span class="token string">"municipality"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># time.sleep(60)</span>            <span class="token keyword">elif</span> deep <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                book<span class="token punctuation">[</span><span class="token string">"district"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># time.sleep(30)</span>            <span class="token keyword">elif</span> deep <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                book<span class="token punctuation">[</span><span class="token string">"township"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># time.sleep(10)</span>            cur_url <span class="token operator">=</span> temp_url <span class="token operator">+</span> <span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            cur_url <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_url<span class="token punctuation">)</span>     <span class="token comment"># url地址拼接</span>            get_data_by_dfs<span class="token punctuation">(</span>cur_url<span class="token punctuation">,</span> deep<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> father_id<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> deep <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        temp_data <span class="token operator">=</span> fetch_village_list<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> temp_data<span class="token punctuation">:</span>            <span class="token comment"># print(item)</span>            book<span class="token punctuation">[</span><span class="token string">"village"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'city_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''        ---------------------爬取结束---------------------        当前爬取的节点:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>father_id<span class="token punctuation">&#125;</span></span><span class="token string">        当前爬取的深度:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>deep<span class="token punctuation">&#125;</span></span><span class="token string">        -------------------------------------------------        '''</span></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>通过运行我发现在爬取大量数据的时候程序会出现各种各样的错误，如果我们在程序跑了几个小时后突然因为异常而退出，那么我们下次爬虫的时候就要从头开始，这会大量的消耗我们的时间。为了解决这个问题，考虑能不能将我们运行时产生的数据储存起来，然后再下次运行时调用上次运行结束时的数据。但是在这个递归的程序之中不太容易储存运行数据，所以就有了后面的版本，通过广搜的方法来运行程序。</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_data_by_bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> book    queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">while</span> queue<span class="token punctuation">:</span>        temp_data <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>temp_data<span class="token punctuation">)</span>        father_id <span class="token operator">=</span> temp_data<span class="token punctuation">[</span><span class="token string">'father_id'</span><span class="token punctuation">]</span>        deep <span class="token operator">=</span> temp_data<span class="token punctuation">[</span><span class="token string">'deep'</span><span class="token punctuation">]</span>        url <span class="token operator">=</span> temp_data<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>        temp_url <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''            ---------------------开始爬取--------------------            当前爬取的节点:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>father_id<span class="token punctuation">&#125;</span></span><span class="token string">            当前爬取的地址:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">            当前爬取的深度:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>deep<span class="token punctuation">&#125;</span></span><span class="token string">            -------------------------------------------------            '''</span></span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token keyword">if</span> deep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            address <span class="token operator">=</span> fetch_province_list<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> address<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>                book<span class="token punctuation">[</span><span class="token string">"province"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                cur_url <span class="token operator">=</span> temp_url <span class="token operator">+</span> <span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                cur_url <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_url<span class="token punctuation">)</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    <span class="token punctuation">&#123;</span><span class="token string">"father_id"</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"deep"</span><span class="token punctuation">:</span> deep<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> cur_url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> deep <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>            address <span class="token operator">=</span> fetch_district_list<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> deep<span class="token operator">=</span>deep<span class="token punctuation">)</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> address<span class="token punctuation">:</span>                <span class="token keyword">if</span> deep <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                    book<span class="token punctuation">[</span><span class="token string">"municipality"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> deep <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                    book<span class="token punctuation">[</span><span class="token string">"district"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> deep <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                    book<span class="token punctuation">[</span><span class="token string">"township"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                cur_url <span class="token operator">=</span> temp_url <span class="token operator">+</span> <span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                cur_url <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_url<span class="token punctuation">)</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"father_id"</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              <span class="token string">"deep"</span><span class="token punctuation">:</span> deep<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> cur_url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token comment"># print(item)</span>                message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''                    ---------------------爬取中--------------------                    当前爬取的节点:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">                    当前爬取的名称:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">                    当前爬取的深度:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>deep<span class="token punctuation">&#125;</span></span><span class="token string">                    -------------------------------------------------                    '''</span></span>                <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token keyword">elif</span> deep <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>            address <span class="token operator">=</span> fetch_village_list<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> address<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>                book<span class="token punctuation">[</span><span class="token string">"village"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'city_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''            ---------------------爬取结束--------------------            当前爬取的节点:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>father_id<span class="token punctuation">&#125;</span></span><span class="token string">            当前爬取的地址:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">            当前爬取的深度:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>deep<span class="token punctuation">&#125;</span></span><span class="token string">            -------------------------------------------------            '''</span></span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"address.xlsx"</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> queue<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>相信有过爬虫经历的同学都知道，爬虫爬的多了会被禁用，导致在一段时间无法进入到那个网站，那么在下一篇我们来聊聊我们如何优化我们的爬虫代码</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可断点爬虫实现（一）</title>
    <link href="/11/11/Python/%E7%88%AC%E8%99%AB/%E5%8F%AF%E6%96%AD%E7%82%B9%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%E4%B8%80/"/>
    <url>/11/11/Python/%E7%88%AC%E8%99%AB/%E5%8F%AF%E6%96%AD%E7%82%B9%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>爬虫在软件开发中属于最常用的手段之一，但是在有时候在需要爬取大量的数据时程序会因为各种原因出现异常，但是我们又不想从头开始爬取，所以为了方便，在这里献上一份可断点爬虫的方案，若有考虑不到之处，欢迎各位大佬提出建议，谢谢。</p></blockquote><h4 id="1-我所使用的库"><a class="markdownIt-Anchor" href="#1-我所使用的库"></a> 1. 我所使用的库</h4><ul><li><p>bs4</p><blockquote><p>bs4 能够快速方便的从网页中提取指定的内容，通过 bs4,我们可以提取我们需要的内容。</p></blockquote><ul><li>安装</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> bs4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>requests</p><blockquote><p>requests 是 python 实现的最简单易用的 HTTP 库</p></blockquote><ul><li>安装</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>openpyxl</p><blockquote><p>openpyxl 是用来处理 XLSX 表格文件的工具</p></blockquote><ul><li>安装</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> openpyxl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>json</p><blockquote><p>通过 json 数据处理可以实现运行时数据的存储</p></blockquote></li><li><p>fake_useragent</p><blockquote><p>fake_useragent 是一个随机生成浏览器请求头的工具</p></blockquote><ul><li>安装</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> fake_useragent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul><h4 id="2-各部分代码的实现"><a class="markdownIt-Anchor" href="#2-各部分代码的实现"></a> 2. 各部分代码的实现</h4><p style="color: #FF0000">爬虫会占用大量网络资源，请在爬虫时注意控制访问速度</p><blockquote><p>本次爬虫将以国家统计局统计的全国统计用区划代码和城乡划分代码为列<br />地址: <a href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2020/index.html">http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2020/index.html</a></p></blockquote><h5 id="1-json-数据储存服务实现"><a class="markdownIt-Anchor" href="#1-json-数据储存服务实现"></a> 1. json 数据储存服务实现</h5><ul><li>加载 JSON 数据</li></ul><p>先在你运行程序的根目录下创建文件 <code>data.json</code>, 将以下 JSON 数据填到你刚创建的 json 文件之中。</p><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"father_id"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>      <span class="token property">"deep"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"2020/index.html"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后创建你的主程序，列如: <code>main.py</code></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.js'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 读取完文件记得及时关闭文件</span>data  <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token comment"># 此处的data就是你json文件中的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>保存 JSON 数据</li></ul><p>当每爬取完一条数据的时候，我们需要将我们程序运行时产生的数据保存到 JSON 文件之中，以防止我们的程序意外停止后数据丢失，需要我们从头去爬。</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">······<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment"># 此处的data是你之前一遍爬虫爬取完之后的运行数据</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h5 id="2-excel-表格文件数据储存"><a class="markdownIt-Anchor" href="#2-excel-表格文件数据储存"></a> 2. Excel 表格文件数据储存</h5><p>使用 Excel 表格可以将我们爬取到的数据储存到文件里面，当然此处也可以借助数据库将文件储存到数据库里面，或者储存为 JSON 数据文件也可以<br />提示: <code>数据库的操作可以用pymysql实现</code></p><ul><li>Excel 表格文件加载</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openpyxlbook <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'address.xlsx'</span><span class="token punctuation">)</span>L <span class="token operator">=</span> book<span class="token punctuation">.</span>sheetnames     <span class="token comment"># 通过此方法可以获取到所有的sheet表名</span><span class="token comment"># 罗列出我们表格文件中需要有的sheet表</span>address_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"province"</span><span class="token punctuation">,</span> <span class="token string">"municipality"</span><span class="token punctuation">,</span> <span class="token string">"district"</span><span class="token punctuation">,</span> <span class="token string">"township"</span><span class="token punctuation">,</span> <span class="token string">"village"</span><span class="token punctuation">]</span><span class="token comment"># 程序在首次运行时会自动创建这些表</span><span class="token keyword">for</span> item <span class="token keyword">in</span> address_list<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">not</span> <span class="token keyword">in</span> L<span class="token punctuation">:</span>        book<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment"># 每一个sheet表都需要有不同的字段名，所以我们需要分别创建表格</span>        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">"province"</span><span class="token punctuation">:</span>                book<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token string">"NAME"</span><span class="token punctuation">,</span> <span class="token string">"URL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">"municipality"</span><span class="token punctuation">:</span>                book<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token string">"NAME"</span><span class="token punctuation">,</span> <span class="token string">"URL"</span><span class="token punctuation">,</span> <span class="token string">"PROVINCEID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">"district"</span><span class="token punctuation">:</span>                book<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token string">"NAME"</span><span class="token punctuation">,</span> <span class="token string">"URL"</span><span class="token punctuation">,</span> <span class="token string">"MUNICIPALITYID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">"township"</span><span class="token punctuation">:</span>                book<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token string">"NAME"</span><span class="token punctuation">,</span> <span class="token string">"URL"</span><span class="token punctuation">,</span> <span class="token string">"DISTRICTID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">"village"</span><span class="token punctuation">:</span>                book<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token string">"CITYID"</span><span class="token punctuation">,</span> <span class="token string">"NAME"</span><span class="token punctuation">,</span> <span class="token string">"TOWNSHIPID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h5 id="3-各阶段爬虫功能的实现"><a class="markdownIt-Anchor" href="#3-各阶段爬虫功能的实现"></a> 3. 各阶段爬虫功能的实现</h5><p>首先我们需要分析一下我们需要爬取的数据，通过在网页中我们对数据的分析发现我们需要爬取的数据共有五层，而且每一层之间的数据关系很像我们之前学过的数据结构中的树的关系，所以我们要想爬取到每一层的数据，我们就不得不使用一些算法里面的东西了。至于使用那些算法，我们暂且留个悬念。我们先来实现每一层的爬虫吧。</p><ul><li>爬取一级城市</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取一级区域</span><span class="token keyword">import</span> requestsglobal_url <span class="token operator">=</span> <span class="token string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/"</span><span class="token keyword">def</span> <span class="token function">fetch_province_list</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 此处URL是爬取省份时的URL</span>    <span class="token comment"># 列如: "http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2020/index.html"</span>    <span class="token keyword">global</span> global_url    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>global_url <span class="token operator">+</span> url<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"gbk"</span>    demo <span class="token operator">=</span> response<span class="token punctuation">.</span>text    soup <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>demo<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'tr'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'provincetr'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">:</span>        temp <span class="token operator">=</span> item<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">)</span>        <span class="token comment"># print(temp)</span>        <span class="token keyword">for</span> item2 <span class="token keyword">in</span> temp<span class="token punctuation">:</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> item2<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>                        <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> item2<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> item2<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>爬取二至四级城市</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fetch_district_list</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># 此处URL是爬取二到四级城市时的URL， deep是当前爬取的那一级</span>    <span class="token comment"># 列如:</span>    <span class="token comment">#   市："http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2020/11.html"</span>    <span class="token comment">#   区："http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2020/11/1101.html"</span>    <span class="token comment">#   街道: "http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2020/11/01/110101.html"</span>    <span class="token keyword">global</span> global_url    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>global_url <span class="token operator">+</span> url<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"gbk"</span>    demo <span class="token operator">=</span> response<span class="token punctuation">.</span>text    soup <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>demo<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>    <span class="token comment"># 由于每一层中class名不一致，所以我们需要分类判断</span>    <span class="token keyword">if</span> deep <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        soup <span class="token operator">=</span> soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'tr'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'citytr'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> deep <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        soup <span class="token operator">=</span> soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'tr'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'countytr'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> deep <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        soup <span class="token operator">=</span> soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'tr'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'towntr'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">:</span>        temp <span class="token operator">=</span> item<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">)</span>        <span class="token comment"># print(temp)</span>        <span class="token keyword">if</span> temp<span class="token punctuation">:</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>                <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>爬取五级城市</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fetch_village_list</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 此处URL是爬取五级区域时的URL</span>    <span class="token comment"># 列如: "http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2020/11/01/01/110101001.html"</span>    <span class="token keyword">global</span> global_url    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>global_url <span class="token operator">+</span> url<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"gbk"</span>    demo <span class="token operator">=</span> response<span class="token punctuation">.</span>text    soup <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>demo<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'tr'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'villagetr'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">:</span>        village <span class="token operator">=</span> item<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> village<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'city_id'</span><span class="token punctuation">:</span> village<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> village<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h6 id="至于如何将这些代码合理的整合起来呢且听我下回分析"><a class="markdownIt-Anchor" href="#至于如何将这些代码合理的整合起来呢且听我下回分析"></a> 至于如何将这些代码合理的整合起来呢，且听我下回分析</h6>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 常用操作流程实现</title>
    <link href="/10/10/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0/"/>
    <url>/10/10/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一-基础-git-命令"><a class="markdownIt-Anchor" href="#一-基础-git-命令"></a> 一. 基础 git 命令</h2><h3 id="1-身份设置实现-git-config"><a class="markdownIt-Anchor" href="#1-身份设置实现-git-config"></a> 1. 身份设置实现: <code>git config</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your name"</span><span class="token function">git</span> config --global user.email <span class="token string">"Your email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="2-版本查看实现-git-version"><a class="markdownIt-Anchor" href="#2-版本查看实现-git-version"></a> 2. 版本查看实现: <code>git version</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="3-储存库初始化实现-git-init"><a class="markdownIt-Anchor" href="#3-储存库初始化实现-git-init"></a> 3. 储存库初始化实现: <code>git init</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init或者$ <span class="token function">git</span> init <span class="token operator">&lt;</span>your repository name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="4-储存库克隆-git-clone"><a class="markdownIt-Anchor" href="#4-储存库克隆-git-clone"></a> 4. 储存库克隆: <code>git clone</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>your project URL<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="5-储存库文件添加-git-add"><a class="markdownIt-Anchor" href="#5-储存库文件添加-git-add"></a> 5. 储存库文件添加: <code>git add</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> your_file_nameor$ <span class="token function">git</span> <span class="token function">add</span> *         <span class="token comment"># 此命令添加所有修改过的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="6-将更改添加到本地储存库-git-commit"><a class="markdownIt-Anchor" href="#6-将更改添加到本地储存库-git-commit"></a> 6. 将更改添加到本地储存库: <code>git commit</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'your useful commit message'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="7-查看需要关注的文件-git-status"><a class="markdownIt-Anchor" href="#7-查看需要关注的文件-git-status"></a> 7. 查看需要关注的文件: <code>git status</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="8-分支管理-git-branch"><a class="markdownIt-Anchor" href="#8-分支管理-git-branch"></a> 8. 分支管理: <code>git branch</code></h3><ul><li>列出本地所有分支</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>列出云端所有分支</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>创建新的分支</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token operator">&lt;</span>branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>删除分支</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -d <span class="token operator">&lt;</span>branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="9-分支切换-git-checkout"><a class="markdownIt-Anchor" href="#9-分支切换-git-checkout"></a> 9. 分支切换: <code>git checkout</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>创建检出分支</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>your_new_branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="二-中级-git-命令"><a class="markdownIt-Anchor" href="#二-中级-git-命令"></a> 二. 中级 git 命令</h2><h3 id="1-远程连接-git-remote"><a class="markdownIt-Anchor" href="#1-远程连接-git-remote"></a> 1. 远程连接: <code>git remote</code></h3><ul><li>将本地储存库连接到远程</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>shortname<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>样例</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https<span class="token punctuation">;</span>//gitee.com/you_git_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="2-远程推送-git-push"><a class="markdownIt-Anchor" href="#2-远程推送-git-push"></a> 2. 远程推送: <code>git push</code></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u <span class="token operator">&lt;</span>short_name<span class="token operator">></span> <span class="token operator">&lt;</span>your_branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="3-远程设置-git-push-set-upstream"><a class="markdownIt-Anchor" href="#3-远程设置-git-push-set-upstream"></a> 3. 远程设置: <code>git push --set-upstream</code></h3><blockquote><p>在使用 git push 之前，我们应先设置好 origin 和 upstream。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push --set-upstream <span class="token operator">&lt;</span>short_name<span class="token operator">></span> <span class="token operator">&lt;</span>your_branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="4-下载更改-git-fetch"><a class="markdownIt-Anchor" href="#4-下载更改-git-fetch"></a> 4. 下载更改: <code>git fetch</code></h3><blockquote><p>当下载其他团队成员的更改时，就得使用<code>git fetch</code><br />此命令会下载有关提交，引用等所有信息，因此你可以在将这些更改应用于本地储存库之前对其进行检查。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="5-更新本地储存库-git-pull"><a class="markdownIt-Anchor" href="#5-更新本地储存库-git-pull"></a> 5. 更新本地储存库: <code>git pull</code></h3><blockquote><p><code>git pull</code> 会将所有最新的内容更新到本地储存库</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull <span class="token operator">&lt;</span>remote_url<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="6-临时储存已修改文件-git-stash"><a class="markdownIt-Anchor" href="#6-临时储存已修改文件-git-stash"></a> 6. 临时储存已修改文件: <code>git stash</code></h3><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>查看所有 stash</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>应用 stash 到分支</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="7-git-log"><a class="markdownIt-Anchor" href="#7-git-log"></a> 7. <code>git log</code></h3><blockquote><p>在 git log 的帮助下，你可以看到所有之前的提交，并且最近的提交出现在最前面。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>默认情况下，它将显示当前已检出分支的所有提交，但是你可以强制通过所有选项来查看所有分支的所有提交。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="8-git-shortlog"><a class="markdownIt-Anchor" href="#8-git-shortlog"></a> 8. <code>git shortlog</code></h3><blockquote><p>git shortlog 命令会显示来自 git log 命令的摘要。如果你只对简短的摘要感兴趣，那么此命令就非常有用了。<br />这个命令有助于查看谁处理了什么，因为它对作者及其提交进行了分组。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> shortlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="9-git-show"><a class="markdownIt-Anchor" href="#9-git-show"></a> 9. <code>git show</code></h3><blockquote><p>与 git log 相比，此命令将显示有关特定提交的详细信息。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> show <span class="token operator">&lt;</span>your_commit_hash<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="10-git-rm"><a class="markdownIt-Anchor" href="#10-git-rm"></a> 10. <code>git rm</code></h3><blockquote><p>有时你需要从代码库中删除文件，在这种情况下，可以使用 git rm 命令。<br />它可以从索引和工作目录中删除跟踪的文件。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>your_file_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="11-git-merge"><a class="markdownIt-Anchor" href="#11-git-merge"></a> 11. <code>git merge</code></h3><blockquote><p>git merge 可帮助将来自两个分支的更改集成到单个分支中。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>此命令会将&lt;branch_name&gt;合并到当前你选择的分支中。</p></blockquote><p><font color='#ff0000' face='楷体' size=5>注: 我们可以使用此命令实现合并内容到自己分支。</font></p><h2 id="三-高级-git-命令"><a class="markdownIt-Anchor" href="#三-高级-git-命令"></a> 三. 高级 Git 命令</h2><h3 id="1-git-rebase"><a class="markdownIt-Anchor" href="#1-git-rebase"></a> 1. <code>git rebase</code></h3><blockquote><p>git rebase 类似于 git merge 命令。它把两个分支集成到一个分支中，但有一个不一样的地方：git rebase 命令将会重写提交记录。<br />当你有多个私有分支合并到单个分支时，应使用 git rebase 命令。它将使得提交历史成为线性的。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase <span class="token operator">&lt;</span>base<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="2-git-bisect"><a class="markdownIt-Anchor" href="#2-git-bisect"></a> 2. <code>git bisect</code></h3><blockquote><p>git bisect 命令可帮助查找糟糕的提交。</p></blockquote><ul><li>用法</li></ul><ol><li>启动 git bisect</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> bisect start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol><li>让 git bisect 知道什么是好的提交</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> bisect good a123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol><li>让 git bisect 知道什么是糟糕的提交</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> bisect bad z123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>通过 git bisect，只要几分钟你就可以缩小问题代码的范围。</p></blockquote><h3 id="3-git-cherry-pick"><a class="markdownIt-Anchor" href="#3-git-cherry-pick"></a> 3. <code>git cherry-pick</code></h3><blockquote><p>git cherry-pick 是一个蛮有用的命令，允许你从任意分支中选择任意提交并将其应用于其他任意分支。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commit-hash<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>git cherry-pick 不会修改存储库的历史记录；相反，它会添加到历史记录。</p></blockquote><h3 id="4-git-archive"><a class="markdownIt-Anchor" href="#4-git-archive"></a> 4. <code>git archive</code></h3><blockquote><p>git archive 命令会把多个文件合并为单个文件。就好像 zip 实用程序一样，所以你可以提取存档文件以获取单个文件。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> archive --format <span class="token function">zip</span> HEAD <span class="token operator">></span> archive-HEAD.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>它将创建当前修订的 zip 存档。</p></blockquote><h3 id="5-git-pull-rebase"><a class="markdownIt-Anchor" href="#5-git-pull-rebase"></a> 5. <code>git pull --rebase</code></h3><blockquote><p>在大多数情况下，当你使用 git pull 时，你需要重新设置基准（并且不进行合并）。<br />此时，你就可以使用此选项。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull --rebase<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>这将帮助保持干净的历史记录。另外，还可以避免多次合并。</p></blockquote><h3 id="6-git-blame"><a class="markdownIt-Anchor" href="#6-git-blame"></a> 6. <code>git blame</code></h3><blockquote><p>如果你需要逐行检查任意文件的内容，则需要使用 git blame 命令。它可以帮助确定是谁对文件进行了更改。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> blame <span class="token operator">&lt;</span>your_file_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="7-git-tag"><a class="markdownIt-Anchor" href="#7-git-tag"></a> 7. <code>git tag</code></h3><blockquote><p>在 Git 中，标签很有用，你可以使用它们来管理发布。你可以将 git tag 视为不会改变的分支。尤其是要公开发布的时候，则更为重要了。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -a v1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="8-git-verify-commit"><a class="markdownIt-Anchor" href="#8-git-verify-commit"></a> 8. <code>git verify-commit</code></h3><blockquote><p>git verify-commit 命令将检查 gpg 签名。GPG，GNU Privacy Guard，是 sign 文件中使用的工具，包含签名。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> verify-commit <span class="token operator">&lt;</span>commit<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="9-git-verify-tag"><a class="markdownIt-Anchor" href="#9-git-verify-tag"></a> 9. <code>git verify-tag</code></h3><blockquote><p>可以以同样的方式确认标签。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> verify-tag <span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="10-git-diff"><a class="markdownIt-Anchor" href="#10-git-diff"></a> 10. <code>git diff</code></h3><blockquote><p>大多数情况下，在提交或推送之前，你需要比较两个 git 文件或分支。用这个命令就方便多了。</p></blockquote><ul><li>用法</li></ul><ol><li>将工作目录与本地存储库进行比较：</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> HEAD <span class="token operator">&lt;</span>filename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol><li>比较两个分支：</li></ol><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>source branch<span class="token operator">></span> <span class="token operator">&lt;</span>target branch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="11-git-citool"><a class="markdownIt-Anchor" href="#11-git-citool"></a> 11. <code>git citool</code></h3><blockquote><p>git citool 是 Git 提交的图形化替代。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> citool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="12-git-mv"><a class="markdownIt-Anchor" href="#12-git-mv"></a> 12. <code>git mv</code></h3><blockquote><p>重命名 git 文件。接受两个参数，源文件名和目标文件名。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">mv</span> <span class="token operator">&lt;</span>old-file-name<span class="token operator">></span> <span class="token operator">&lt;</span>new-file-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="13-git-clean"><a class="markdownIt-Anchor" href="#13-git-clean"></a> 13. <code>git clean</code></h3><blockquote><p>你可以使用 git clean 命令处理未跟踪的文件。可以使用此命令从工作目录中删除所有未跟踪的文件。如果要处理跟踪的文件，则需要使用 git reset 命令。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="14-git-help"><a class="markdownIt-Anchor" href="#14-git-help"></a> 14. <code>git help</code></h3><blockquote><p>Git 中有许多命令，如果你需要其他命令的帮助，则可以随时在终端上使用 git help。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token operator">&lt;</span>git_command<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="15-git-whatchanged"><a class="markdownIt-Anchor" href="#15-git-whatchanged"></a> 15. <code>git whatchanged</code></h3><blockquote><p>此命令的作用与 git log 相同，但为原始格式。并且由于历史原因，它也是 git 的一份子。</p></blockquote><ul><li>用法</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> whatchanged<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编写第一个Django应用</title>
    <link href="/10/10/Python/Django/%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AADjango%E5%BA%94%E7%94%A8/"/>
    <url>/10/10/Python/Django/%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AADjango%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-查看-django-版本"><a class="markdownIt-Anchor" href="#1-查看-django-版本"></a> 1. 查看 Django 版本</h2><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python -m django --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="2-创建项目"><a class="markdownIt-Anchor" href="#2-创建项目"></a> 2. 创建项目</h2><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ django-admin startproject mysite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>文件目录</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mysite&#x2F;    manage.py    mysite&#x2F;        __init__.py        settings.py        urls.py        asgi.py        wsgi.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="3-用于开发的简易服务器"><a class="markdownIt-Anchor" href="#3-用于开发的简易服务器"></a> 3. 用于开发的简易服务器</h2><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python manage.py runserver <span class="token number">0</span>:8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="4-创建投票应用"><a class="markdownIt-Anchor" href="#4-创建投票应用"></a> 4. 创建投票应用</h2><ul><li>创建应用</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python manage.py startapp polls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>目录结构</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">polls&#x2F;    migrations&#x2F;        __init__.py    __init__.py    admin.py    apps.py    models.py    tests.py    views.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="5-编写第一个视图"><a class="markdownIt-Anchor" href="#5-编写第一个视图"></a> 5. 编写第一个视图</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! polls/views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"Hello, world. You're at the polls index."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! polls/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! mysite/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> pathurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'polls/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'polls.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">python manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li><h4 id="path-函数"><a class="markdownIt-Anchor" href="#path-函数"></a> path() 函数</h4></li></ul><blockquote><p>path(route, view, kwargs=None, name=None)</p><ul><li>route: 字符串，表示 URL 规则，与之匹配的的 URL 会执行对应的第二个参数 view</li><li>view: 执行与正则表达式匹配的 URL 请求。</li><li>kwargs: 视图使用的字典类型的参数。</li><li>name: 用来反向获取 URL。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-cookies常用操作</title>
    <link href="/08/10/%E5%89%8D%E7%AB%AF/Vue-Cookies%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/08/10/%E5%89%8D%E7%AB%AF/Vue-Cookies%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h3><blockquote><p>cookies 在前端开发项目中是常用的功能之一，几乎所有的浏览器都支持原生的 cookies，并且后端接口可以直接写入 cookies，这点相对于 localStore 来说算个小优势，而在大多数情况下项目开发会选择 vue 框架，因为 vue 框架开发效率高，也更易于后期的升级迭代和维护。vue-cookies 就是为 vue 框架打造的一款操作 cookies 的工具。</p></blockquote><h3 id="2-安装"><a class="markdownIt-Anchor" href="#2-安装"></a> 2. 安装</h3><ul><li>在终端中执行如下命令</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> vue-cookies --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>此命令会将 vue-cookies 的文件包保存到正在开发项目的 node_models 目录下面</p></blockquote><h3 id="3-引入"><a class="markdownIt-Anchor" href="#3-引入"></a> 3. 引入</h3><ul><li>在项目文件中的 main.js 中设置</li></ul><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// vue-cookies配置</span><span class="token keyword">import</span> cookies <span class="token keyword">from</span> <span class="token string">"vue-cookies"</span><span class="token punctuation">;</span><span class="token comment">// vue2中的设置方式</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$cookies <span class="token operator">=</span> cookies<span class="token punctuation">;</span><span class="token comment">// vue3中的设置方式</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$cookies <span class="token operator">=</span> cookies<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="4-使用"><a class="markdownIt-Anchor" href="#4-使用"></a> 4. 使用</h3><ol><li>设置 cookies</li></ol><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>keyName<span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token punctuation">,</span> expireTimes<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token punctuation">,</span> domain<span class="token punctuation">[</span><span class="token punctuation">,</span> secure<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//return this</span><span class="token comment">// 简洁使用</span><span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">'过期时间,按秒计'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 示例</span><span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token string">'7d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ol start="2"><li>获取 cookies</li></ol><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keyName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return value</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="3"><li>删除 cookies</li></ol><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="4"><li>判断 cookies 中是否有指定的 key</li></ol><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">isKey</span><span class="token punctuation">(</span>keyName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="5"><li>获取所有的 cookies</li></ol><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高职组软件测试赛题库(环境部署)</title>
    <link href="/04/30/Linux/%E9%AB%98%E8%81%8C%E7%BB%84%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E9%A2%98%E5%BA%93(%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2)/"/>
    <url>/04/30/Linux/%E9%AB%98%E8%81%8C%E7%BB%84%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E9%A2%98%E5%BA%93(%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2)/</url>
    
    <content type="html"><![CDATA[<hr /><h2 id="一-任务概述"><a class="markdownIt-Anchor" href="#一-任务概述"></a> 一. 任务概述</h2><blockquote><p>本部分按照环境搭建及系统部署要求文档，完成 CentOS、JDK、MySQL、Tomcat 等测试环境搭建与配置，并安装与部署应用系统，并最终能通过浏览器成功访问系统，过程与结果需截图。截图需粘贴在环境搭建及系统部署报告中。</p></blockquote><h2 id="二-题目要求"><a class="markdownIt-Anchor" href="#二-题目要求"></a> 二. 题目要求</h2><blockquote><p>个人使用最新版的 VirtualBox6.1.22, CenterOS7, Openjdk16.0.1, mysql8.0.24, Tomcat10.0.5<br />文件下载:</p></blockquote><ul><li><p>Linux 知识普及</p><blockquote><p>ssh 连接: <code>ssh root@(虚拟机ip地址)</code></p><ul><li>样例</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ssh root@192.168.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>scp 文件传输: <code>scp (本地文件地址) root@(虚拟机ip地址):(虚拟机文件位置)</code></p><ul><li>样例</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">scp openjdk.tar.gz root@192.168.0.2:~&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></blockquote></li><li><h4 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h4></li></ul><h5 id="1-安装-centos-7"><a class="markdownIt-Anchor" href="#1-安装-centos-7"></a> 1. 安装 CentOS 7</h5><blockquote><p>使用 VirtualBox 和提供的 ISO 文件安装 CentOS 7，安装成功后，使用命令行界面操作系统。</p></blockquote><ul><li>截图要求：一共 2 张图：① 安装过程中，设置 root 账号密码界面截图；② 安装成功后，root 账号登录系统截图。</li></ul><hr /><ul><li><h6 id="部署过程"><a class="markdownIt-Anchor" href="#部署过程"></a> 部署过程</h6></li></ul><ol><li>新建虚拟机<br />根据图片配置虚拟机<br /><img src="/image/page_image/20210403/1.png" alt="" /><br /><img src="/image/page_image/20210403/2.png" alt="" /><br /><img src="/image/page_image/20210403/3.png" alt="" /></li></ol><ul><li>根据下图添加本地文件夹中的 ios 镜像文件<br /><img src="/image/page_image/20210403/4.png" alt="" /></li><li>设置网卡 1<br /><img src="/image/page_image/20210403/5_1.png" alt="" /></li><li>选择箭头所指<br /><img src="/image/page_image/20210403/7.png" alt="" /></li><li>磁盘配置以及网络设置<br /><img src="/image/page_image/20210403/8.png" alt="" /></li><li>设置 root 密码<br /><img src="/image/page_image/20210403/10.png" alt="" /></li><li>安装完之后重启并设置网卡 2<br /><img src="/image/page_image/20210403/5_2.png" alt="" /></li><li>开机查看 IP 地址</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>设置 2. 检查网络连接<br />打开主机 CMD 检查与虚拟机的连通</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ping (虚拟机ip地址)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol><li>SSH 连接虚拟机<br />在主电脑 CMD 输入</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ssh root@(虚拟机ip)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h5 id="2-安装配置-jdk"><a class="markdownIt-Anchor" href="#2-安装配置-jdk"></a> 2. 安装配置 JDK</h5><blockquote><p>在 CentOS 系统中，使用提供的 JDK 安装包，安装 JDK。</p></blockquote><ul><li>截图要求：一共 2 张图，分别为：① 截取 JDK 环境变量配置截图；②JDK 安装成功后，截取使用命令查看 JDK 版本信息截图。</li></ul><hr /><ul><li><h6 id="部署过程-2"><a class="markdownIt-Anchor" href="#部署过程-2"></a> 部署过程</h6><blockquote><ol><li>传输文件到 CenterOS 系统</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">scp openjdk-16.0.1_linux-x64_bin.tar.gz root@192.168.56.103:~&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="2"><li>解压文件</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">tar -zxvf openjdk-16.0.1_linux-x64_bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="3"><li>移动文件</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mv jdk-16.0.1 &#x2F;usr&#x2F;local&#x2F;jdk-16.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="4"><li>添加环境变量</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>在文件末尾写入</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># openjdk16.0.1export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk-16.0.1export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;export CLASSPATH&#x3D;.:$&#123;JAVA_PATH&#125;&#x2F;lib:$&#123;JAVA_HOME&#125;&#x2F;libexport PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>按<code>:wq</code>保存退出</p><ul><li>激活环境变量使配置生效</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="5"><li>检查环境是否部署成功</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></blockquote></li></ul><h5 id="3-安装配置-mysql"><a class="markdownIt-Anchor" href="#3-安装配置-mysql"></a> 3. 安装配置 MySQL</h5><blockquote><p>在 CentOS 系统中，使用提供的 MySQL 安装包，安装 MySQL。</p></blockquote><ul><li>截图要求：一共 3 张图：① 截取 MySQL 配置文件截图；② 截取 root 账号成功登录 MySQL 截图；③ 截取使用 suthr.sql 初始化人力资源综合服务系统数据库命令截图。</li></ul><hr /><ul><li><h6 id="部署过程-3"><a class="markdownIt-Anchor" href="#部署过程-3"></a> 部署过程</h6><blockquote><ol><li>传输文件到 CenterOS 系统</li></ol><ul><li>卸载 Centeros7 自带 Mariadb</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep mariadbrpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">scp mysql-8.0.24-linux-glibc2.12-x86_64.tar.xz root@192.168.56.103:~&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="2"><li>解压文件</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">tar -xvf mysql-8.0.24-linux-glibc2.12-x86_64.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="3"><li>移动文件</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mv mysql-8.0.24-linux-glibc2.12-x86_64 &#x2F;usr&#x2F;local&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="4"><li>创建 mysql 用户</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">groupadd mysqluseradd -g mysql mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ol start="5"><li>更改目录权限</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">chown -R mysql:mysql &#x2F;usr&#x2F;local&#x2F;mysqlchmod -R 777 &#x2F;usr&#x2F;local&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ol start="6"><li>初始化 mysql<br />切换到 mysql 的 bin 目录下</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>执行 mysql 初始化命令</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.&#x2F;mysqld --initialize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="7"><li>设置环境变量</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>在文件末尾写入</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># mysql8.0.24export MYSQL_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;binexport PATH&#x3D;$PATH:$MYSQL_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>按<code>:wq</code>保存退出</p><ul><li>激活环境变量使配置生效</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="8"><li>添加开机自启动</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqlln -s &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql &#x2F;usr&#x2F;bin&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ol start="9"><li>启动 mysql 服务</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">service mysql start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>注：若启动失败请再执行一次<kbd>chmod -R 777 /usr/local/mysql</kbd></li></ul><ol start="10"><li>登陆 mysql</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="11"><li>修改密码</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ALTER USER &quot;root&quot;@&quot;localhost&quot; IDENTIFIED BY &quot;password&quot;;FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ol start="12"><li>修改公网访问</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">use mysql;update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><ol start="13"><li>设置防火墙</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 检查是否有或者是否开启firewallsystemctl status firewalld# 开启防火墙systemctl start firewalld# 设置开机自启systemctl enable firewalld# 设置3306为永久开发firewall-cmd --add-port&#x3D;3306&#x2F;tcp --permanent# 重启生效firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></blockquote></li></ul><h5 id="4-安装配置-tomcat"><a class="markdownIt-Anchor" href="#4-安装配置-tomcat"></a> 4. 安装配置 Tomcat</h5><blockquote><p>在 CentOS 系统中，使用提供的 Tomcat 安装包，安装 Tomcat。</p></blockquote><ul><li>截图要求：一共 2 张图：①Tomcat 安装成功后，截取启动 Tomcat 服务命令截图；②Tomcat 安装成功后，截取通过浏览器访问 Tomcat 主页截图。</li></ul><hr /><ul><li><h6 id="部署过程-4"><a class="markdownIt-Anchor" href="#部署过程-4"></a> 部署过程</h6><blockquote><ol><li>传输文件到 CenterOS 系统</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">scp apache-tomcat-10.0.5.tar.gz root@192.168.56.103:~&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="2"><li>解压文件</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">tar -zxvf apache-tomcat-10.0.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="3"><li>移动文件</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mv apache-tomcat-10.0.5&#x2F; &#x2F;usr&#x2F;local&#x2F;tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="4"><li>执行 Tomcat 脚本启动 tomcat</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="5"><li>查看 Tomcat 监听的端口</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">netstat -ltnp |grep java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol start="6"><li>关闭防火墙</li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>网页访问虚拟机 ip 查看 tomcat 服务</li></ul></blockquote></li></ul><h5 id="5-系统应用部署"><a class="markdownIt-Anchor" href="#5-系统应用部署"></a> 5. 系统应用部署</h5><blockquote><p>将 suthr.war 包部署到 Tomcat。</p></blockquote><ul><li>截图要求：一共 2 张图，分别为：① 项目部署成功后，截取 webapps 目录截图；② 项目部署成功后，截取通过浏览器访问人力资源综合服务系统登录页截图。</li></ul><hr /><ul><li><h6 id="部署过程-5"><a class="markdownIt-Anchor" href="#部署过程-5"></a> 部署过程</h6></li></ul><h2 id="三-技术参数选取范围"><a class="markdownIt-Anchor" href="#三-技术参数选取范围"></a> 三. 技术参数选取范围</h2><blockquote><p>无</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学算法</title>
    <link href="/01/31/ACM/%E6%95%B0%E5%AD%A6%E7%AE%97%E6%B3%95/"/>
    <url>/01/31/ACM/%E6%95%B0%E5%AD%A6%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="筛质数"><a class="markdownIt-Anchor" href="#筛质数"></a> 筛质数</h2><h3 id="埃氏筛法埃拉托斯特尼筛法"><a class="markdownIt-Anchor" href="#埃氏筛法埃拉托斯特尼筛法"></a> 埃氏筛法(埃拉托斯特尼筛法)</h3><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int N &#x3D; 1e7;&#x2F;&#x2F;筛的范围bool st[N + 10];&#x2F;&#x2F;判断是否为质数 初始为false false为质数 true为非质数int save[N + 10], idx &#x3D; 0;&#x2F;&#x2F;用来存储质数st[0] &#x3D; st[1] &#x3D; true;for (int i &#x3D; 2; i &lt;&#x3D; N; i ++ )&#123;if (!st[i]) save[idx ++ ] &#x3D; i;else continue;&#x2F;&#x2F;优化循环节省时间for (int j &#x3D; i * 2; j &lt;&#x3D; N; j +&#x3D; i )st[j] &#x3D; true;&#125;idx --;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="线性筛法欧拉筛法"><a class="markdownIt-Anchor" href="#线性筛法欧拉筛法"></a> 线性筛法(欧拉筛法)</h3><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int N &#x3D; 1e7;&#x2F;&#x2F;筛要的范围bool st[N + 10];&#x2F;&#x2F;判断是否为质数 初始为false false为质数 true为非质数int save[N + 10], idx &#x3D; 0;&#x2F;&#x2F;用来存储质数a[0] &#x3D; a[1] &#x3D; true;for (int i &#x3D; 2; i &lt;&#x3D; N; i ++ )&#123;if (!st[i]) save[idx ++ ] &#x3D; i;for (int j &#x3D; 0; save[j] * i &lt;&#x3D; N; j ++ )&#123;        st[save[j]*i] &#x3D; true;        if (i % save[j] &#x3D;&#x3D; 0) break;&#x2F;&#x2F;优化循环节省时间 每个数只删一次    &#125;&#125;idx --;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="博弈论详解"><a class="markdownIt-Anchor" href="#博弈论详解"></a> 博弈论详解</h1><h2 id="一-巴什博奕bash-game"><a class="markdownIt-Anchor" href="#一-巴什博奕bash-game"></a> 一. 巴什博奕（Bash Game）</h2><blockquote><p>只有一堆 n 个物品， 两人轮流从这堆物品中取物，规定每次至少取一个，最多取 m 个。最后取光者得胜。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;#define _MAX 10000using namespace std;int a[_MAX], b[_MAX];int bash(int N, int K)&#123;if(N % (K + 1) &#x3D;&#x3D; 0)&#123;return 2;&#125;return 1;&#125;int main()&#123;int T;scanf(&quot;%d&quot;, &amp;T);for(int i &#x3D; 0; i &lt; T; i++)&#123;scanf(&quot;%d%d&quot;, a + i, b + i);&#125;for(int i &#x3D; 0; i &lt; T; i++)&#123;if(bash(a[i], b[i]) &#x3D;&#x3D; 1)&#123;puts(&quot;A&quot;);&#125;else&#123;puts(&quot;B&quot;);&#125;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="二-威佐夫博弈wythoff-game"><a class="markdownIt-Anchor" href="#二-威佐夫博弈wythoff-game"></a> 二. 威佐夫博弈（Wythoff Game）</h2><blockquote><p>有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;int t, a, b, m, k;    scanf(&quot;%d&quot;, &amp;t);    while(t--)&#123;        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);        if(a &gt; b)&#123;            a ^&#x3D; b;            b ^&#x3D; a;            a ^&#x3D; b;        &#125;        m &#x3D; b - a;        k &#x3D; (int)(m * (1 + sqrt(5)) &#x2F; 2.0);        printf(&quot;%s\n&quot;, a &#x3D;&#x3D; k ? &quot;B&quot; : &quot;A&quot;);    &#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="三-尼姆博弈nimm-game"><a class="markdownIt-Anchor" href="#三-尼姆博弈nimm-game"></a> 三. 尼姆博弈（Nimm Game）</h2><blockquote><p>有三堆各若干个物品，两个人轮流从某一堆取任意多的物品，规定每次至少取一个，多者不限，最后取光者获胜。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;int N, stone, tag &#x3D; 0;    scanf(&quot;%d&quot;, &amp;N);    while(N--)&#123;        scanf(&quot;%d&quot;, &amp;stone);        tag ^&#x3D; stone;    &#125;    printf(&quot;%c\n&quot;, tag &#x3D;&#x3D; 0 ? &#39;B&#39; : &#39;A&#39;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="四-sg-函数"><a class="markdownIt-Anchor" href="#四-sg-函数"></a> 四. SG 函数</h2><ul><li>SG 打表</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int MAX_DIG &#x3D; 64;int f[MAX_DIG];         &#x2F;&#x2F; 可以取走的石子个数int sg[MAX_DIG];        &#x2F;&#x2F; 0~n的SG函数值int has[MAX_DIG];       &#x2F;&#x2F; mex&#123;&#125;void getSG(int n)&#123;    memset(sg, 0, sizeof(sg));    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)&#123;        memset(has,0,sizeof(has));        for(int j &#x3D; 1; f[j] &lt;&#x3D; i; j++)&#123;            has[sg[i - f[j]]] &#x3D; 1;        &#125;        for(int j &#x3D; 0; j &lt;&#x3D; n; j++)&#123;        &#x2F;&#x2F; 求mes&#123;&#125;中未出现的最小的非负整数            if(has[j] &#x3D;&#x3D; 0)&#123;                sg[i] &#x3D; j;                break;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>SG DFS</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int MAX_DIG &#x3D; 64;&#x2F;&#x2F; DFS&#x2F;&#x2F; 注意S数组要按从小到大排序SG函数要初始化为-1 对于每个集合只需初始化1遍&#x2F;&#x2F; n是集合s的大小S[i]是定义的特殊取法规则数组int s[MAX_DIG];int sg[MAX_DIG * 100];int n;int SG_dfs(int x)&#123;    if(sg[x] !&#x3D; -1)&#123;        return sg[x];    &#125;    bool vis[MAX_DIG];    memset(vis, 0, sizeof(vis));    for(int i &#x3D; 0; i &lt; n; i++)&#123;        if(x &gt;&#x3D; s[i])&#123;            SG_dfs(x - s[i]);            vis[sg[x - s[i]]] &#x3D; 1;        &#125;    &#125;    int e;    for(int i &#x3D; 0;;i++)&#123;        if(!vis[i])&#123;            e &#x3D; i;            break;        &#125;    &#125;    return sg[x] &#x3D; e;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Marldown之数学公式详解</title>
    <link href="/11/10/Markdown/Math/"/>
    <url>/11/10/Markdown/Math/</url>
    
    <content type="html"><![CDATA[<h3 id="1-math-引用"><a class="markdownIt-Anchor" href="#1-math-引用"></a> 1. Math 引用</h3><ol><li>行内式引用<br /><code>\\(....\\)</code><br /><code>$..$</code></li><li>独立式引用<br /><code>$$...$$</code><br /><code>\\[..\\]</code><br /><code>\begin&#123;equation&#125;...\end&#123;equation&#125;</code></li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ E &#x3D; mc^2 $$$ E &#x3D; mc^2 $$\[ \boxed&#123;E &#x3D; mc^2&#125; \]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>$ E = mc^2 $</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = mc^2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>[ \boxed{E = mc^2} ]</p><div class="code-wrapper"><pre class="line-numbers language-math" data-language="math"><code class="language-math">E &#x3D; mc^2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>方程组</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>2</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>3</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>3</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>3</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}a_1x+b_1y+c_1z=d_1\\a_2x+b_2y+c_2z=d_2\\a_3x+b_3y+c_3z=d_3\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\begin&#123;cases&#125;a_1x+b_1y+c_1z&#x3D;d_1\\a_2x+b_2y+c_2z&#x3D;d_2\\a_3x+b_3y+c_3z&#x3D;d_3\\\end&#123;cases&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="2-基本元素"><a class="markdownIt-Anchor" href="#2-基本元素"></a> 2. 基本元素</h3><ul><li>希腊字母</li></ul><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">\alpha</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span></td><td style="text-align:center">\beta</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span></td><td style="text-align:center">\gamma</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span></span></td><td style="text-align:center">\delta</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span></td><td style="text-align:center">\mu</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span></td><td style="text-align:center">\varepsilon</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span></td></tr><tr><td style="text-align:center">\zeta</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ζ</mi></mrow><annotation encoding="application/x-tex">\zeta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07378em;">ζ</span></span></span></span></td><td style="text-align:center">\eta</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span></span></span></span></td><td style="text-align:center">\Gamma</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Γ</mi></mrow><annotation encoding="application/x-tex">\Gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Γ</span></span></span></span></td><td style="text-align:center">\Delta</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span></td><td style="text-align:center">\Theta</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span></td><td style="text-align:center">\vartheta</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϑ</mi></mrow><annotation encoding="application/x-tex">\vartheta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">ϑ</span></span></span></span></td></tr><tr><td style="text-align:center">\theta</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span></td><td style="text-align:center">\iota</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ι</mi></mrow><annotation encoding="application/x-tex">\iota</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ι</span></span></span></span></td><td style="text-align:center">\kappa</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>κ</mi></mrow><annotation encoding="application/x-tex">\kappa</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">κ</span></span></span></span></td><td style="text-align:center">\lambda</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span></td><td style="text-align:center">\phi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span></span></span></span></td><td style="text-align:center">\epsilon</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span></td></tr><tr><td style="text-align:center">\nu</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ν</mi></mrow><annotation encoding="application/x-tex">\nu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.06366em;">ν</span></span></span></span></td><td style="text-align:center">\xi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ξ</mi></mrow><annotation encoding="application/x-tex">\xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.04601em;">ξ</span></span></span></span></td><td style="text-align:center">\Lambda</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Λ</mi></mrow><annotation encoding="application/x-tex">\Lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Λ</span></span></span></span></td><td style="text-align:center">\Xi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ξ</mi></mrow><annotation encoding="application/x-tex">\Xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ξ</span></span></span></span></td><td style="text-align:center">\Pi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Π</span></span></span></span></td><td style="text-align:center">\o</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi></mrow><annotation encoding="application/x-tex">o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span></span></span></span></td></tr><tr><td style="text-align:center">\pi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span></td><td style="text-align:center">\varpi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϖ</mi></mrow><annotation encoding="application/x-tex">\varpi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">ϖ</span></span></span></span></td><td style="text-align:center">\rho</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ρ</span></span></span></span></td><td style="text-align:center">\varrho</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϱ</mi></mrow><annotation encoding="application/x-tex">\varrho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϱ</span></span></span></span></td><td style="text-align:center">\sigma</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span></td><td style="text-align:center">\varsigma</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ς</mi></mrow><annotation encoding="application/x-tex">\varsigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.52778em;vertical-align:-0.09722em;"></span><span class="mord mathdefault" style="margin-right:0.07986em;">ς</span></span></span></span></td></tr><tr><td style="text-align:center">\Sigma</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Σ</mi></mrow><annotation encoding="application/x-tex">\Sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Σ</span></span></span></span></td><td style="text-align:center">\Psi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ψ</mi></mrow><annotation encoding="application/x-tex">\Psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ψ</span></span></span></span></td><td style="text-align:center">\Phi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Φ</span></span></span></span></td><td style="text-align:center">\tau</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span></td><td style="text-align:center">\Omega</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span></td><td style="text-align:center">\upsilon</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>υ</mi></mrow><annotation encoding="application/x-tex">\upsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">υ</span></span></span></span></td></tr><tr><td style="text-align:center">\varphi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>φ</mi></mrow><annotation encoding="application/x-tex">\varphi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">φ</span></span></span></span></td><td style="text-align:center">\chi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>χ</mi></mrow><annotation encoding="application/x-tex">\chi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">χ</span></span></span></span></td><td style="text-align:center">\psi</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ψ</mi></mrow><annotation encoding="application/x-tex">\psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span></span></span></span></td><td style="text-align:center">\omega</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></td><td style="text-align:center">\Upsilon</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Υ</mi></mrow><annotation encoding="application/x-tex">\Upsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Υ</span></span></span></span></td><td style="text-align:center"></td><td style="text-align:center">$ $</td></tr></tbody></table><ul><li>常用符号</li></ul><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">_</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">a_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\sqrt</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.13278em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center">\frac</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac {1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:center">\dfrac</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac {1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:center">\tfrac</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\tfrac {1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr></tbody></table><ul><li>特殊符号</li></ul><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">\infty</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></td><td style="text-align:center">\cup</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∪</mo></mrow><annotation encoding="application/x-tex">\cup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∪</span></span></span></span></td><td style="text-align:center">\cap</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∩</mo></mrow><annotation encoding="application/x-tex">\cap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∩</span></span></span></span></td><td style="text-align:center">\subset</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding="application/x-tex">\subset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span></span></span></span></td><td style="text-align:center">\subseteq</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span></td></tr><tr><td style="text-align:center">\supset</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊃</mo></mrow><annotation encoding="application/x-tex">\supset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊃</span></span></span></span></td><td style="text-align:center">\in</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span></td><td style="text-align:center">\notin</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∉</mi></mrow><annotation encoding="application/x-tex">\notin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\varnothing</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66334em;vertical-align:-0.08167em;"></span><span class="mord amsrm">∅</span></span></span></span></td><td style="text-align:center">\forall</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi></mrow><annotation encoding="application/x-tex">\forall</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∀</span></span></span></span></td></tr><tr><td style="text-align:center">\exists</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∃</mi></mrow><annotation encoding="application/x-tex">\exists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∃</span></span></span></span></td><td style="text-align:center">\lnot</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi></mrow><annotation encoding="application/x-tex">\lnot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">¬</span></span></span></span></td><td style="text-align:center">\nabla</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∇</mi></mrow><annotation encoding="application/x-tex">\nabla</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">∇</span></span></span></span></td><td style="text-align:center">\partial</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∂</mi></mrow><annotation encoding="application/x-tex">\partial</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span></span></span></span></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><ul><li>运算符</li></ul><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">\pm</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">±</span></span></span></span></td><td style="text-align:center">\times</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span></td><td style="text-align:center">\div</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span></td><td style="text-align:center">\cdot</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span></td><td style="text-align:center">\cap</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∩</mo></mrow><annotation encoding="application/x-tex">\cap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∩</span></span></span></span></td></tr><tr><td style="text-align:center">\cup</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∪</mo></mrow><annotation encoding="application/x-tex">\cup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∪</span></span></span></span></td><td style="text-align:center">\geq</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\geq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span></span></span></span></td><td style="text-align:center">\leq</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span></span></span></span></td><td style="text-align:center">\neq</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">≠</mi></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span></span></span></span></td><td style="text-align:center">\approx</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≈</mo></mrow><annotation encoding="application/x-tex">\approx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mrel">≈</span></span></span></span></td></tr><tr><td style="text-align:center">\equiv</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mrel">≡</span></span></span></span></td><td style="text-align:center">\sum</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span></span></span></span></td><td style="text-align:center">\prod</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span></span></span></span></td><td style="text-align:center">\lim</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>lim</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\lim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">lim</span></span></span></span></td><td style="text-align:center">\int</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∫</mo></mrow><annotation encoding="application/x-tex">\int</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span></span></span></span></td></tr><tr><td style="text-align:center">\iint\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∬</mo></mrow><annotation encoding="application/x-tex">\iint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.111em;vertical-align:-0.306em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0004999999999999727em;">∬</span></span></span></span></td><td style="text-align:center">\iiint</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∭</mo></mrow><annotation encoding="application/x-tex">\iiint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.111em;vertical-align:-0.306em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0004999999999999727em;">∭</span></span></span></span></td><td style="text-align:center">\leftarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">←</span></span></span></span></td><td style="text-align:center">\rightarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span></td><td style="text-align:center">\leftrightarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>↔</mo></mrow><annotation encoding="application/x-tex">\leftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">↔</span></span></span></span></td></tr><tr><td style="text-align:center">\Leftarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇐</mo></mrow><annotation encoding="application/x-tex">\Leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇐</span></span></span></span></td><td style="text-align:center">\Rightarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span></td><td style="text-align:center">\Leftrightarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇔</mo></mrow><annotation encoding="application/x-tex">\Leftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇔</span></span></span></span></td><td style="text-align:center">\longleftarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟵</mo></mrow><annotation encoding="application/x-tex">\longleftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟵</span></span></span></span></td><td style="text-align:center">\longrightarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span></td></tr><tr><td style="text-align:center">\Longleftarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟸</mo></mrow><annotation encoding="application/x-tex">\Longleftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟸</span></span></span></span></td><td style="text-align:center">\Longrightarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟹</mo></mrow><annotation encoding="application/x-tex">\Longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟹</span></span></span></span></td><td style="text-align:center">\Longleftrightarrow</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟺</mo></mrow><annotation encoding="application/x-tex">\Longleftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟺</span></span></span></span></td><td style="text-align:center">\xleftarrow{x+y+z}</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover><mo stretchy="true">←</mo><mpadded width="+0.6em" lspace="0.3em"><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mpadded></mover></mrow><annotation encoding="application/x-tex">\xleftarrow{x+y+z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.041331em;vertical-align:-0.01100000000000012em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0303309999999999em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.01100000000000012em;"><span></span></span></span></span></span></span></span></span></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><ul><li>样例</li></ul><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th><th style="text-align:center">代码</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">\sum_{i=1}^ni\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>i</mi><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\sum_{i=1}^ni\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td><td style="text-align:center">\sum\limits_{i=1}^ni\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>i</mi><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^ni\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.329066em;vertical-align:-0.9776689999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3513970000000004em;"><span style="top:-2.122331em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0000050000000003em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.950005em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9776689999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td><td style="text-align:center">\sum\nolimits_{i=1}^ni\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>i</mi><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\sum\nolimits_{i=1}^ni\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td></tr><tr><td style="text-align:center">\prod_{i=1}^n\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\prod_{i=1}^n\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td><td style="text-align:center">\prod\limits_{i=1}^n\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\prod\limits_{i=1}^n\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.329066em;vertical-align:-0.9776689999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3513970000000004em;"><span style="top:-2.122331em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0000050000000003em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∏</span></span></span><span style="top:-3.950005em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9776689999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td><td style="text-align:center">\prod\nolimits_{i=1}^n\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\prod\nolimits_{i=1}^n\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td></tr><tr><td style="text-align:center">\lim_{x\to0}x^2\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></msub><msup><mi>x</mi><mn>2</mn></msup><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\lim_{x\to0}x^2\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td><td style="text-align:center">\lim\limits_{x\to0}x^2\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><msup><mi>x</mi><mn>2</mn></msup><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\lim\limits_{x\to0}x^2\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.531216em;vertical-align:-0.717108em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td><td style="text-align:center">\lim\nolimits_{x\to0}x^2\quad</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></msub><msup><mi>x</mi><mn>2</mn></msup><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\lim\nolimits_{x\to0}x^2\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span></span></td></tr><tr><td style="text-align:center">\int_a^bx^2dx</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><msup><mi>x</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_a^bx^2dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.399828em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.044008em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:center">\int\limits_a^bx^2dx</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><msup><mi>x</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int\limits_a^bx^2dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5972280000000003em;vertical-align:-1.00556em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.591668em;"><span style="top:-2.09444em;margin-left:-0.19445em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.00056em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op" style="margin-right:0.19445em;">∫</span></span></span><span style="top:-4.00556em;margin-left:0.19445em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.00556em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:center">\int\nolimits_a^bx^2dx</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><msup><mi>x</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int\nolimits_a^bx^2dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.399828em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.044008em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></td></tr></tbody></table><p>[ \int\int\quad \int\int\int\quad \int\int\int\int\quad \int\dots\int ]<br /><code>\[ \int\int\quad \int\int\int\quad \int\int\int\int\quad \int\dots\int \]</code></p><ul><li>注音和标注</li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mover accent="true"><mi>x</mi><mo>^</mo></mover><mover accent="true"><mi>x</mi><mo>ˇ</mo></mover><mover accent="true"><mi>x</mi><mo>ˊ</mo></mover><mover accent="true"><mi>x</mi><mo>ˋ</mo></mover><mover accent="true"><mi>x</mi><mo>~</mo></mover><mover accent="true"><mi>x</mi><mo>˘</mo></mover><mover accent="true"><mi>x</mi><mo>˚</mo></mover><mover accent="true"><mi>x</mi><mo>˙</mo></mover><mover accent="true"><mi>x</mi><mo>¨</mo></mover></mrow><annotation encoding="application/x-tex">\bar{x}     \vec{x}\hat{x}\check{x}\acute{x}\grave{x}\tilde{x}\breve{x}\mathring{x}\dot{x}\ddot{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">^</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.62847em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˇ</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˊ</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˋ</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">~</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">˘</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.34722em;">˚</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">¨</span></span></span></span></span></span></span></span></span></p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\bar&#123;x&#125;\vec&#123;x&#125;\hat&#123;x&#125;\check&#123;x&#125;\acute&#123;x&#125;\grave&#123;x&#125;\tilde&#123;x&#125;\breve&#123;x&#125;\mathring&#123;x&#125;\dot&#123;x&#125;\ddot&#123;x&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>分隔符</li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">‾</mo></mover><munder accentunder="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">‾</mo></munder><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">←</mo></mover><munder accentunder="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">←</mo></munder><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">→</mo></mover><munder accentunder="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">→</mo></munder><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">↔</mo></mover><munder accentunder="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">↔</mo></munder><mover><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">⏞</mo></mover><munder><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">⏟</mo></munder><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">^</mo></mover><mover accent="true"><mrow><mi>x</mi><mi>x</mi><mi>x</mi></mrow><mo stretchy="true">~</mo></mover></mrow><annotation encoding="application/x-tex">\overline{xxx}\underline{xxx}\overleftarrow{xxx}\underleftarrow{xxx}\overrightarrow{xxx}\underrightarrow{xxx}\overleftrightarrow{xxx}\underleftrightarrow{xxx}\overbrace{xxx}             %brace 大括号\underbrace{xxx}\widehat{xxx}               %hat  帽\widetilde{xxx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.72656em;vertical-align:-0.648em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43056000000000005em;"><span style="top:-2.84em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19999999999999996em;"><span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9525600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43056em;"><span class="svg-align" style="top:-2.4779999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.522em;"><span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9525600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43056em;"><span class="svg-align" style="top:-2.4779999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.522em;"><span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9525600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.522em;min-width:0.888em;"><span class="halfarrow-left" style="height:0.522em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span><span class="halfarrow-right" style="height:0.522em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43056em;"><span class="svg-align" style="top:-2.4779999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.522em;min-width:0.888em;"><span class="halfarrow-left" style="height:0.522em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span><span class="halfarrow-right" style="height:0.522em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.522em;"><span></span></span></span></span></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.07856em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span><span class="svg-align" style="top:-3.53056em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z'/></svg></span></span></span></span></span></span></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43056000000000005em;"><span class="svg-align" style="top:-2.352em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.648em;"><span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.73056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.3em;"><svg width='100%' height='0.3em' viewBox='0 0 2364 300' preserveAspectRatio='none'><path d='M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z'/></svg></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.71656em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.286em;"><svg width='100%' height='0.286em' viewBox='0 0 1033 286' preserveAspectRatio='none'><path d='M344 55.266c-142 0-300.638 81.316-311.5 86.418-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114c1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751 181.476 676 181.476c-149 0-189-126.21-332-126.21z'/></svg></span></span></span></span></span></span></span></span></span></p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\overline&#123;xxx&#125;\underline&#123;xxx&#125;\overleftarrow&#123;xxx&#125;\underleftarrow&#123;xxx&#125;\overrightarrow&#123;xxx&#125;\underrightarrow&#123;xxx&#125;\overleftrightarrow&#123;xxx&#125;\underleftrightarrow&#123;xxx&#125;\overbrace&#123;xxx&#125;             %brace 大括号\underbrace&#123;xxx&#125;\widehat&#123;xxx&#125;               %hat  帽\widetilde&#123;xxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>[<br />\Bigg(<br />\bigg(<br />\Big(<br />\big(<br />(x)<br />\big)<br />\Big)<br />\bigg)<br />\Bigg)\quad<br />]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[    \Bigg(        \bigg(            \Big(                \big(                    (x)                \big)            \Big)        \bigg)    \Bigg)\quad\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>[<br />\Bigg[<br />\bigg[<br />\Big[<br />\big[<br />[x]<br />\big]<br />\Big]<br />\bigg]<br />\Bigg]\quad<br />]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[    \Bigg[        \bigg[            \Big[                \big[                    [x]                \big]            \Big]        \bigg]    \Bigg]\quad\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>[<br />\Bigg\langle<br />\bigg\langle<br />\Big\langle<br />\big\langle<br />\langle x \rangle<br />\big\rangle<br />\Big\rangle<br />\bigg\rangle<br />\Bigg\rangle\quad<br />]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[    \Bigg\langle        \bigg\langle            \Big\langle                \big\langle                    \langle x \rangle                \big\rangle            \Big\rangle        \bigg\rangle    \Bigg\rangle\quad\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>[<br />\Bigg\lvert<br />\bigg\lvert<br />\Big\lvert<br />\big\lvert<br />\lvert x \rvert<br />\big\rvert<br />\Big\rvert<br />\bigg\rvert<br />\Bigg\rvert\quad<br />]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[    \Bigg\lvert        \bigg\lvert            \Big\lvert                \big\lvert                    \lvert x \rvert                \big\rvert            \Big\rvert        \bigg\rvert    \Bigg\rvert\quad\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>[<br />\Bigg\lVert<br />\bigg\lVert<br />\Big\lVert<br />\big\lVert<br />\lVert x \rVert<br />\big\rVert<br />\Big\rVert<br />\bigg\rVert<br />\Bigg\rVert<br />]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[    \Bigg\lVert        \bigg\lVert            \Big\lVert                \big\lVert                    \lVert x \rVert                \big\rVert            \Big\rVert        \bigg\rVert    \Bigg\rVert\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>省略号</li></ul><p>[ \dots , \cdots , \vdots ,\ddots ]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[  \dots , \cdots , \vdots ,\ddots \]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>空白间距</li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mtext> </mtext><mi mathvariant="normal">∣</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">∣</mi><mtext> </mtext><mi mathvariant="normal">∣</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">∣</mi><mtext>  </mtext><mi mathvariant="normal">∣</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">∣</mi><mspace width="1em"/><mi mathvariant="normal">∣</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">∣</mi><mspace width="2em"/><mi mathvariant="normal">∣</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">∣</mi><mtext> ⁣</mtext><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|\,| \\|\:| \\|\;| \\|\quad| \\|\qquad| \\|\!|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">∣</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">∣</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∣</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:2em;"></span><span class="mord">∣</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mord">∣</span></span></span></span></p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">|\,||\:||\;||\quad||\qquad||\!|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>矩阵</li></ul><blockquote><p>居顶、居中(缺省) 、居底，分别用 t, c, b 来表示；<br />列对齐也有三种方式：居左、居中、居右，分别用 l, c, r 表示。<br />\\ 和&amp; 用来分隔行和列。</p></blockquote><p>[<br />\begin{array}{ccc}<br />x_1 &amp; x_2 &amp; \dots \\<br />x_3 &amp; x_4 &amp; \dots \\<br />\vdots &amp; \vdots &amp; \ddots<br />\end{array}<br />]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[    \begin&#123;array&#125;&#123;ccc&#125;        x_1 &amp; x_2 &amp; \dots \\\\        x_3 &amp; x_4 &amp; \dots \\\\        \vdots &amp; \vdots &amp; \ddots    \end&#123;array&#125;\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>[<br />\begin{pmatrix} a&amp;b \\ c&amp;d \end{pmatrix} \quad<br />\begin{bmatrix} a&amp;b \\ c&amp;d \end{bmatrix} \quad<br />\begin{Bmatrix} a&amp;b \\ c&amp;d \end{Bmatrix} \quad<br />\begin{vmatrix} a&amp;b \\ c&amp;d \end{vmatrix} \quad<br />\begin{Vmatrix} a&amp;b \\ c&amp;d \end{Vmatrix}<br />]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[    \begin&#123;pmatrix&#125; a&amp;b \\\\ c&amp;d \end&#123;pmatrix&#125; \quad    \begin&#123;bmatrix&#125; a&amp;b \\\\ c&amp;d \end&#123;bmatrix&#125; \quad    \begin&#123;Bmatrix&#125; a&amp;b \\\\ c&amp;d \end&#123;Bmatrix&#125; \quad    \begin&#123;vmatrix&#125; a&amp;b \\\\ c&amp;d \end&#123;vmatrix&#125; \quad    \begin&#123;Vmatrix&#125; a&amp;b \\\\ c&amp;d \end&#123;Vmatrix&#125;\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Marry has a little matrix ( \begin{smallmatrix}<br />a&amp;b\\c&amp;d \end{smallmatrix} ) .</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Marry has a little matrix \( \begin&#123;smallmatrix&#125;a&amp;b\\\\c&amp;d \end&#123;smallmatrix&#125; \) .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>多行公式<br />– 长公式<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>+</mo><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>d</mi><mo>+</mo><mi>e</mi><mo>+</mo><mi>f</mi><mo>+</mo><mi>g</mi></mrow><annotation encoding="application/x-tex">x = a+b+c+ \\\\d+e+f+g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span></span></p></li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">x &#x3D; a+b+c+ \\\\d+e+f+g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>[ \begin{split}<br />x =a+b+c+{} \\<br />d+e+f+g<br />\end{split} ]</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[ \begin&#123;split&#125;x &#x3D;a+b+c+&#123;&#125; \\\\d+e+f+g\end&#123;split&#125; \]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>– 公式组</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: gather at position 7: \begin{̲g̲a̲t̲h̲e̲r̲}̲a = b+c+d \\\\…'>\begin{gather}a = b+c+d \\\\x = y+z\end{gather} \\\begin{align}a &amp;= b+c+d \\x &amp;= y+z\end{align}</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\begin&#123;gather&#125;a &#x3D; b+c+d \\\\x &#x3D; y+z\end&#123;gather&#125; \\\begin&#123;align&#125;a &amp;&#x3D; b+c+d \\x &amp;&#x3D; y+z\end&#123;align&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>数学字体<br />[<br />\begin{equation}<br />\mathrm{A}\quad<br />\mathsf{A}\quad<br />\mathtt{A}\quad<br />\mathcal{A}\quad<br />\mathbf{A}\quad<br />\mathit{A}\quad<br />\mathbb{A}\quad<br />\mathfrak{A}\quad<br />\mathscr{A}\quad<br />\end{equation} ]</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">\[\begin&#123;equation&#125;\mathrm&#123;A&#125;\quad\mathsf&#123;A&#125;\quad\mathtt&#123;A&#125;\quad\mathcal&#123;A&#125;\quad\mathbf&#123;A&#125;\quad\mathit&#123;A&#125;\quad\mathbb&#123;A&#125;\quad\mathfrak&#123;A&#125;\quad\mathscr&#123;A&#125;\quad\end&#123;equation&#125; \]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
      <category>Math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Django</title>
    <link href="/10/10/Python/Django/%E5%88%9D%E5%A7%8BDjango/"/>
    <url>/10/10/Python/Django/%E5%88%9D%E5%A7%8BDjango/</url>
    
    <content type="html"><![CDATA[<h2 id="1-模型设计"><a class="markdownIt-Anchor" href="#1-模型设计"></a> 1. 模型设计</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! mysite/news/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Reporter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    full_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>full_name<span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    pub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>    headline <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>    reporter <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Reporter<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>headline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="2-应用数据模型"><a class="markdownIt-Anchor" href="#2-应用数据模型"></a> 2. 应用数据模型</h2><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py makemigrationspython manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="3-django-模板"><a class="markdownIt-Anchor" href="#3-django-模板"></a> 3. Django 模板</h2>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The C++ Standard Template Library(STL)</title>
    <link href="/09/18/C++/STL%E5%A4%A7%E5%85%A8/"/>
    <url>/09/18/C++/STL%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>The Standard Template Library (STL) is a set of C++ template classes to provide common programming data structures and functions such as lists, stacks, arrays, etc. It is a library of container classes, algorithms, and iterators. It is a generalized library and so, its components are parameterized. A working knowledge of template classes is a prerequisite for working with STL.</p><p>标准模板库（STL）是一组 C ++模板类，用于提供常见的编程数据结构和功能，例如列表，堆栈，数组等。它是容器类，算法和迭代器的库。 它是一个通用库，因此其组件已参数化。 模板类的工作知识是使用 STL 的先决条件。</p></blockquote><h1 id="一-span-idalgorithmsalgorithmsspan"><a class="markdownIt-Anchor" href="#一-span-idalgorithmsalgorithmsspan"></a> 一. <span id="Algorithms">Algorithms</span></h1><blockquote><p>The header algorithm defines a collection of functions especially designed to be used on ranges of elements.They act on containers and provide means for various operations for the contents of the containers.</p><p>翻头算法定义了一组专门设计用于元素范围的函数集合，它们作用于容器并为容器的内容提供各种操作手段。</p></blockquote><h2 id="1-span-idalgorithmspan"><a class="markdownIt-Anchor" href="#1-span-idalgorithmspan"></a> 1. <span id="">Algorithm</span></h2><ul><li><h3 id="span-idsortingsortingspan"><a class="markdownIt-Anchor" href="#span-idsortingsortingspan"></a> <span id="Sorting">Sorting</span></h3><p>Sorting is one of the most basic functions applied to data. It means arranging the data in a particular fashion, which can be increasing or decreasing. There is a builtin function in C++ STL by the name of sort().<br />This function internally uses IntroSort. In more details it is implemented using hybrid of QuickSort, HeapSort and <a href="http://InsertionSort.By">InsertionSort.By</a> default, it uses QuickSort but if QuickSort is doing unfair partitioning and taking more than N*logN time, it switches to HeapSort and when the array size becomes really small, it switches to InsertionSort.</p><p>排序是应用于数据的最基本功能之一。这意味着以特定的方式排列数据，可以增加或减少。C ++ STL 中有一个内置函数，名称为 sort（）。<br />此函数在内部使用 IntroSort。更详细地讲，它是使用 QuickSort，HeapSort 和 InsertionSort 的混合实现的。默认情况下，它使用 QuickSort，但是如果 QuickSort 进行不公平的分区并且花费的时间超过 N * logN，它将切换到 HeapSort，并且当数组大小变得非常小时，它切换到 InsertionSort。</p></li></ul><blockquote><p>sort(startaddress, endaddress)</p><p>startaddress: the address of the first element of the array<br />endaddress: the address of the next contiguous location of the last element of the array.<br />So actually sort() sorts in the range of [startaddress,endaddress)</p><p>startaddress：数组第一个元素的地址。<br />endaddress：数组最后一个元素的下一个连续位置的地址。<br />所以 sort（）实际上在[startaddress，endaddress）范围内排序<br />注: 可用 cmp 定义 sort 的排序方式（sort(startaddress,endaddress,cmp)）</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;cmp用法bool cmp(int a,int b)&#123;    return a&gt;b;&#125;&#x2F;&#x2F;实现从大到小的排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;void show(int a[])&#123;for(int i &#x3D; 0; i &lt; 10; ++i)cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;int main()&#123;int a[10]&#x3D; &#123;1, 5, 8, 9, 6, 7, 3, 4, 2, 0&#125;;cout &lt;&lt; &quot;\n The array before sorting is : &quot;;show(a);sort(a, a+10);cout &lt;&lt; &quot;\n\n The array after sorting is : &quot;;show(a);return 0;&#125;&lt;!--The array before sorting is : 1 5 8 9 6 7 3 4 2 0--&gt;&lt;!--The array after sorting is : 0 1 2 3 4 5 6 7 8 9--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idsearchingsearchingspan"><a class="markdownIt-Anchor" href="#span-idsearchingsearchingspan"></a> <span id="Searching">Searching</span></h3><div class="code-wrapper"><pre><code>Binary search is a widely used searching algorithm that requires the array to be sorted before search is applied. The main idea behind this algorithm is to keep dividing the array in half (divide and conquer) until the element is found, or all the elements are exhausted.It works by comparing the middle item of the array with our target, if it matches, it returns true otherwise if the middle term is greater than the target, the search is performed in the left sub-array.If the middle term is less than target, the search is performed in the right sub-array.二进制搜索是一种广泛使用的搜索算法，该算法要求在应用搜索之前对数组进行排序。 该算法背后的主要思想是将数组继续分成两半（分而治之），直到找到元素或所有元素用尽为止。它通过将数组的中间项与目标进行比较来工作，如果匹配，则返回true；否则，如果中间项大于目标，则在左侧子数组中执行搜索。如果中间项小于目标，则在右边的子数组中执行搜索。</code></pre></div><blockquote><p>binary_search(startaddress, endaddress, valuetofind)</p><p>startaddress: the address of the first element of the array.<br />endaddress: the address of the last element of the array.<br />valuetofind: the target value which we have to search for.</p><p>startaddress：数组第一个元素的地址。<br />endaddress：数组最后一个元素的地址。<br />valuetofind：要搜索的目标值。</p></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; CPP program to implement&#x2F;&#x2F; Binary Search in&#x2F;&#x2F; Standard Template Library (STL)#include &lt;algorithm&gt;#include &lt;iostream&gt;using namespace std;void show(int a[], int arraysize)&#123;for (int i &#x3D; 0; i &lt; arraysize; ++i)cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;int main()&#123;int a[] &#x3D; &#123; 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 &#125;;int asize &#x3D; sizeof(a) &#x2F; sizeof(a[0]);cout &lt;&lt; &quot;\n The array is : &quot;;show(a, asize);cout &lt;&lt; &quot;\n\nLet&#39;s say we want to search for 2 in the array&quot;;cout &lt;&lt; &quot;\n So, we first sort the array&quot;;sort(a, a + asize);cout &lt;&lt; &quot;\n\n The array after sorting is : &quot;;show(a, asize);cout &lt;&lt; &quot;\n\nNow, we do the binary search&quot;;if (binary_search(a, a + 10, 2))cout &lt;&lt; &quot;\nElement found in the array&quot;;elsecout &lt;&lt; &quot;\nElement not found in the array&quot;;cout &lt;&lt; &quot;\n\nNow, say we want to search for 10&quot;;if (binary_search(a, a + 10, 10))cout &lt;&lt; &quot;\nElement found in the array&quot;;elsecout &lt;&lt; &quot;\nElement not found in the array&quot;;return 0;&#125;&lt;!--The array is : 1 5 8 9 0 6 7 3 4 2 0--&gt;&lt;!--Let&#39;s say we want to search for 2 in the array--&gt;&lt;!-- So, we first sort the array--&gt;&lt;!--The array after sorting is : 0 1 2 3 4 5 6 7 8 9--&gt;&lt;!--Now, we do the binary search--&gt;&lt;!--Element found in the array--&gt;&lt;!--Now, say we want to search for 10--&gt;&lt;!--Element not found in the array--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idimportant_stl_algorithmsimportant-stl-algorithmsspan"><a class="markdownIt-Anchor" href="#span-idimportant_stl_algorithmsimportant-stl-algorithmsspan"></a> <span id="Important_STL_Algorithms">Important STL Algorithms</span></h3><div class="code-wrapper"><pre><code>For all those who aspire to excel in competitive programming, only having a knowledge about containers of STL is of less use till one is not aware what all STL has to offer.STL has an ocean of algorithms, for all &lt; algorithm &gt; library functions : Refer here.Some of the most used algorithms on vectors and most useful one’s in Competitive Programming are mentioned as follows :对于那些渴望在竞争性编程方面出类拔萃的人来说，只有了解STL的容器是没有多大用处的，直到你不知道STL提供了什么。STL有大量的算法，对于所有的&lt;algorithm&gt;库函数：请参阅这里。关于向量的一些最常用的算法和竞争编程中最有用的算法如下：</code></pre></div><blockquote><center>Non-Manipulating Algorithms</center><ol><li>sort(first_iterator, last_iterator)<br />To sort the given vector.<br /><code>排序给定的向量。</code></li><li>reverse(first_iterator, last_iterator)<br />To reverse a vector.<code>反转向量。</code></li><li>*max_element (first_iterator, last_iterator)<br />To find the maximum element of a vector.<br /><code>查找向量的最大元素。</code></li><li>*min_element (first_iterator, last_iterator)<br />To find the minimum element of a vector.<br /><code>查找向量的最小元素。</code></li><li>accumulate(first_iterator, last_iterator, initial value of sum)<br />Does the summation of vector elements.<br /><code>对向量元素求和。</code></li><li>count(first_iterator, last_iterator,x)<br />To count the occurrences of x in vector.<br /><code>计算向量中x的出现。</code></li><li>find(first_iterator, last_iterator, x)<br />Points to last address of vector ((name_of_vector).end()) if element is not present in vector.<br /><code>如果向量中不存在元素，则指向向量（（name_of_vector）.end（））的最后地址。</code></li><li>binary_search(first_iterator, last_iterator, x)<br />Tests whether x exists in sorted vector or not.<br /><code>测试x是否存在于排序的向量中。</code></li><li>lower_bound(first_iterator, last_iterator, x)<br />returns an iterator pointing to the first element in the range [first,last) which has a value not less than ‘x’.<br /><code>返回一个迭代器，该迭代器指向[first，last）范围内第一个元素，该元素的值不少于“ x”。</code></li><li>upper_bound(first_iterator, last_iterator, x)<br />returns an iterator pointing to the first element in the range [first,last) which has a value greater than ‘x’.<br /><code>返回一个迭代器，该迭代器指向[first，last）范围内第一个元素的值大于“ x”。</code></li><li>arr.erase(position to be deleted)<br />This erases selected element in vector and shifts and resizes the vector elements accordingly.<br /><code>删除矢量中的选定元素，并相应地移动和调整矢量元素的大小。</code></li><li>arr.erase(unique(arr.begin(),arr.end()),arr.end())<br />This erases the duplicate occurrences in sorted vector in a single line.<br /><code>擦除单行中排序向量中的重复项。</code></li><li>next_permutation(first_iterator, last_iterator)<br />This modified the vector to its next permutation.<br /><code>这将向量修改为其下一个排列。</code></li><li>prev_permutation(first_iterator, last_iterator)<br />This modified the vector to its previous permutation.<br /><code>这将向量修改为其先前的排列。</code></li><li>distance(first_iterator,desired_position)<br />It returns the distance of desired position from the first iterator.This function is very useful while finding the index.<br /><code>返回到第一个迭代器的期望位置的距离。此函数在查找索引时非常有用。</code></li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*-----------------------------------------------------------------*&#x2F;&#x2F;&#x2F; A C++ program to demonstrate working of sort(),&#x2F;&#x2F; reverse()#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;numeric&gt; &#x2F;&#x2F;For accumulate operationusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing vector with array valuesint arr[] &#x3D; &#123;10, 20, 5, 23 ,42 , 15&#125;;int n &#x3D; sizeof(arr)&#x2F;sizeof(arr[0]);vector&lt;int&gt; vect(arr, arr+n);cout &lt;&lt; &quot;Vector is: &quot;;for (int i&#x3D;0; i&lt;n; i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;&#x2F;&#x2F; Sorting the Vector in Ascending ordersort(vect.begin(), vect.end());cout &lt;&lt; &quot;\nVector after sorting is: &quot;;for (int i&#x3D;0; i&lt;n; i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;&#x2F;&#x2F; Reversing the Vectorreverse(vect.begin(), vect.end());cout &lt;&lt; &quot;\nVector after reversing is: &quot;;for (int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; &quot;\nMaximum element of vector is: &quot;;cout &lt;&lt; *max_element(vect.begin(), vect.end());cout &lt;&lt; &quot;\nMinimum element of vector is: &quot;;cout &lt;&lt; *min_element(vect.begin(), vect.end());&#x2F;&#x2F; Starting the summation from 0cout &lt;&lt; &quot;\nThe summation of vector elements is: &quot;;cout &lt;&lt; accumulate(vect.begin(), vect.end(), 0);return 0;&#125;&lt;!--Vector before sorting is: 10 20 5 23 42 15 --&gt;&lt;!--Vector after sorting is: 5 10 15 20 23 42 --&gt;&lt;!--Vector before reversing is: 5 10 15 20 23 42 --&gt;&lt;!--Vector after reversing is: 42 23 20 15 10 5 --&gt;&lt;!--Maximum element of vector is: 42--&gt;&lt;!--Minimum element of vector is: 5--&gt;&lt;!--The summation of vector elements is: 115--&gt;&#x2F;*------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to demonstrate working of count()&#x2F;&#x2F; and find()#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Initializing vector with array valuesint arr[] &#x3D; &#123;10, 20, 5, 23 ,42, 20, 15&#125;;int n &#x3D; sizeof(arr)&#x2F;sizeof(arr[0]);vector&lt;int&gt; vect(arr, arr+n);cout &lt;&lt; &quot;Occurrences of 20 in vector : &quot;;&#x2F;&#x2F; Counts the occurrences of 20 from 1st to&#x2F;&#x2F; last elementcout &lt;&lt; count(vect.begin(), vect.end(), 20);&#x2F;&#x2F; find() returns iterator to last address if&#x2F;&#x2F; element not presentfind(vect.begin(), vect.end(),5) !&#x3D; vect.end()?cout &lt;&lt; &quot;\nElement found&quot;:cout &lt;&lt; &quot;\nElement not found&quot;;return 0;&#125;&lt;!--Occurrences of 20 in vector: 2--&gt;&lt;!--Element found--&gt;&#x2F;*-----------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to demonstrate working of lower_bound()&#x2F;&#x2F; and upper_bound().#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Initializing vector with array valuesint arr[] &#x3D; &#123;5, 10, 15, 20, 20, 23, 42, 45&#125;;int n &#x3D; sizeof(arr)&#x2F;sizeof(arr[0]);vector&lt;int&gt; vect(arr, arr+n);&#x2F;&#x2F; Sort the array to make sure that lower_bound()&#x2F;&#x2F; and upper_bound() work.sort(vect.begin(), vect.end());&#x2F;&#x2F; Returns the first occurrence of 20auto q &#x3D; lower_bound(vect.begin(), vect.end(), 20);&#x2F;&#x2F; Returns the last occurrence of 20auto p &#x3D; upper_bound(vect.begin(), vect.end(), 20);cout &lt;&lt; &quot;The lower bound is at position: &quot;;cout &lt;&lt; q-vect.begin() &lt;&lt; endl;cout &lt;&lt; &quot;The upper bound is at position: &quot;;cout &lt;&lt; p-vect.begin() &lt;&lt; endl;return 0;&#125;&lt;!--The lower bound is at position: 3--&gt;&lt;!--The upper bound is at position: 5--&gt;&#x2F;*----------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to demonstrate working of erase()#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Initializing vector with array valuesint arr[] &#x3D; &#123;5, 10, 15, 20, 20, 23, 42, 45&#125;;int n &#x3D; sizeof(arr)&#x2F;sizeof(arr[0]);vector&lt;int&gt; vect(arr, arr+n);cout &lt;&lt; &quot;Vector is :&quot;;for (int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; vect[i]&lt;&lt;&quot; &quot;;&#x2F;&#x2F; Delete second element of vectorvect.erase(vect.begin()+1);cout &lt;&lt; &quot;\nVector after erasing the element: &quot;;for (int i&#x3D;0; i&lt;5; i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;&#x2F;&#x2F; sorting to enable use of unique()sort(vect.begin(), vect.end());cout &lt;&lt; &quot;\nVector before removing duplicate &quot;&quot; occurrences: &quot;;for (int i&#x3D;0; i&lt;5; i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;&#x2F;&#x2F; Deletes the duplicate occurrencesvect.erase(unique(vect.begin(),vect.end()),vect.end());cout &lt;&lt; &quot;\nVector after deleting duplicates: &quot;;for (int i&#x3D;0; i&lt; vect.size(); i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--Vector is :5 10 15 20 20 23 --&gt;&lt;!--Vector after erasing the element: 5 15 20 20 23 --&gt;&lt;!--Vector before removing duplicate  occurrences: 5 15 20 20 23 --&gt;&lt;!--Vector after deleting duplicates: 5 15 20 23 42 45 --&gt;&#x2F;*------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to demonstrate working of next_permutation()&#x2F;&#x2F; and prev_permutation()#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Initializing vector with array valuesint arr[] &#x3D; &#123;5, 10, 15, 20, 20, 23, 42, 45&#125;;int n &#x3D; sizeof(arr)&#x2F;sizeof(arr[0]);vector&lt;int&gt; vect(arr, arr+n);cout &lt;&lt; &quot;Given Vector is:\n&quot;;for (int i&#x3D;0; i&lt;n; i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;&#x2F;&#x2F; modifies vector to its next permutation ordernext_permutation(vect.begin(), vect.end());cout &lt;&lt; &quot;\nVector after performing next permutation:\n&quot;;for (int i&#x3D;0; i&lt;n; i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;prev_permutation(vect.begin(), vect.end());cout &lt;&lt; &quot;\nVector after performing prev permutation:\n&quot;;for (int i&#x3D;0; i&lt;n; i++)cout &lt;&lt; vect[i] &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--Given Vector is:--&gt;&lt;!--5 10 15 20 20 23 42 45 --&gt;&lt;!--Vector after performing next permutation:--&gt;&lt;!--5 10 15 20 20 23 45 42 --&gt;&lt;!--Vector after performing prev permutation:--&gt;&lt;!--5 10 15 20 20 23 42 45 --&gt;&#x2F;*-------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to demonstrate working of distance()#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Initializing vector with array valuesint arr[] &#x3D; &#123;5, 10, 15, 20, 20, 23, 42, 45&#125;;int n &#x3D; sizeof(arr)&#x2F;sizeof(arr[0]);vector&lt;int&gt; vect(arr, arr+n);&#x2F;&#x2F; Return distance of first to maximum elementcout &lt;&lt; &quot;Distance between first to max element: &quot;;cout &lt;&lt; distance(vect.begin(),max_element(vect.begin(), vect.end()));return 0;&#125;&lt;!--Distance between first to max element: 7--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-iduseful_array_algorithmsuseful-array-algorithmsspan"><a class="markdownIt-Anchor" href="#span-iduseful_array_algorithmsuseful-array-algorithmsspan"></a> <span id="Useful_Array_algorithms">Useful Array algorithms</span></h3><div class="code-wrapper"><pre><code>From C++ 11 onwards, some new and interesting algorithms are added in STL of C++. These algorithms operate on an array and are useful in saving time during coding and hence useful in competitive programming as well.从C ++ 11开始，在C ++的STL中添加了一些有趣的新算法。 这些算法在数组上运行，可用于节省编码时间，因此也可用于竞争性编程。</code></pre></div><blockquote><ol><li>all_of()<br />This function operates on whole range of array elements and can save time to run a loop to check each elements one by one. It checks for a given property on every element and returns true when each element in range satisfies specified property, else returns false.<br /><code>此函数可在整个数组元素范围内运行，并且可以节省时间运行循环以逐个检查每个元素。 它检查每个元素上的给定属性，并在范围内的每个元素满足指定属性时返回true，否则返回false。</code></li><li>any_of()<br />This function checks for a given range if there’s even one element satisfying a given property mentioned in function. Returns true if at least one element satisfies the property else returns false.<br /><code>如果甚至没有一个元素满足函数中提到的给定属性，则此函数会检查给定范围。 如果至少一个元素满足属性，则返回true，否则返回false。</code></li><li>none_of()<br />This function returns true if none of elements satisfies the given condition else returns false.<br /><code>如果没有元素满足给定条件，则此函数返回true，否则返回false。</code></li><li>copy_n()<br />copy_n() copies one array elements to new array. This type of copy creates a deep copy of array. This function takes 3 arguments, source array name, size of array and the target array name.<br /><code>copy_n（）将一个数组元素复制到新数组。 这种类型的副本会创建数组的深层副本。 此函数接受3个参数，即源数组名称，数组大小和目标数组名称。</code></li></ol><ul><li>iota()<br />This function is used to assign continuous values to array. This function accepts 3 arguments, the array name, size, and the starting number.<br /><code>此函数用于为数组分配连续值。 该函数接受3个参数，即数组名称，大小和起始编号。</code></li></ul></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ code to demonstrate working of all_of()#include&lt;iostream&gt;#include&lt;algorithm&gt; &#x2F;&#x2F; for all_of()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing arrayint ar[6] &#x3D; &#123;1, 2, 3, 4, 5, -6&#125;;&#x2F;&#x2F; Checking if all elements are positiveall_of(ar, ar+6, [](int x) &#123; return x&gt;0; &#125;)?cout &lt;&lt; &quot;All are positive elements&quot; :cout &lt;&lt; &quot;All are not positive elements&quot;;return 0;&#125;&lt;!--All are not positive elements--&gt;&#x2F;*----------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of any_of()#include&lt;iostream&gt;#include&lt;algorithm&gt; &#x2F;&#x2F; for any_of()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing arrayint ar[6] &#x3D; &#123;1, 2, 3, 4, 5, -6&#125;;&#x2F;&#x2F; Checking if any element is negativeany_of(ar, ar+6, [](int x)&#123; return x&lt;0; &#125;)?cout &lt;&lt; &quot;There exists a negative element&quot; :cout &lt;&lt; &quot;All are positive elements&quot;;return 0;&#125;&lt;!--There exists a negative element--&gt;&#x2F;*---------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of none_of()#include&lt;iostream&gt;#include&lt;algorithm&gt; &#x2F;&#x2F; for none_of()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing arrayint ar[6] &#x3D; &#123;1, 2, 3, 4, 5, 6&#125;;&#x2F;&#x2F; Checking if no element is negativenone_of(ar, ar+6, [](int x)&#123; return x&lt;0; &#125;)?cout &lt;&lt; &quot;No negative elements&quot; :cout &lt;&lt; &quot;There are negative elements&quot;;return 0;&#125;&lt;!--No negative elements--&gt;&#x2F;*--------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of copy_n()#include&lt;iostream&gt;#include&lt;algorithm&gt; &#x2F;&#x2F; for copy_n()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing arrayint ar[6] &#x3D; &#123;1, 2, 3, 4, 5, 6&#125;;&#x2F;&#x2F; Declaring second arrayint ar1[6];&#x2F;&#x2F; Using copy_n() to copy contentscopy_n(ar, 6, ar1);&#x2F;&#x2F; Displaying the copied arraycout &lt;&lt; &quot;The new array after copying is : &quot;;for (int i&#x3D;0; i&lt;6 ; i++)cout &lt;&lt; ar1[i] &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--The new array after copying is : 1 2 3 4 5 6--&gt;&#x2F;*-----------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of iota()#include&lt;iostream&gt;#include&lt;numeric&gt; &#x2F;&#x2F; for iota()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing array with 0 valuesint ar[6] &#x3D; &#123;0&#125;;&#x2F;&#x2F; Using iota() to assign valuesiota(ar, ar+6, 20);&#x2F;&#x2F; Displaying the new arraycout &lt;&lt; &quot;The new array after assigning values is : &quot;;for (int i&#x3D;0; i&lt;6 ; i++)cout &lt;&lt; ar[i] &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--The new array after assigning values is : 20 21 22 23 24 25--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idpartition_operationspartition-operationsspan"><a class="markdownIt-Anchor" href="#span-idpartition_operationspartition-operationsspan"></a> <span id="Partition_Operations">Partition Operations</span></h3><div class="code-wrapper"><pre><code>C++ has a class in its STL algorithms library which allows us easy partition algorithms using certain inbuilt functions. Partition refers to act of dividing elements of containers depending upon a given condition.C ++在其STL算法库中有一个类，该类允许我们使用某些内置函数轻松进行分区算法。分区是指根据给定条件划分容器元素的动作。</code></pre></div><blockquote><p>Partition operations :</p><ol><li>partition(beg, end, condition)<br />This function is used to partition the elements on basis of condition mentioned in its arguments.<br /><code>此函数用于根据参数中提到的条件对元素进行分区。</code></li><li>is_partitioned(beg, end, condition)<br />This function returns boolean true if container is partitioned else returns false.<br /><code>如果容器已分区，则此函数返回true，否则返回false。</code></li><li>stable_partition(beg, end, condition)<br />This function is used to partition the elements on basis of condition mentioned in its arguments in such a way that the relative order of the elements is preserved.<br /><code>该函数用于根据参数中提到的条件对元素进行分区，以保留元素的相对顺序。</code></li><li>partition_point(beg, end, condition)<br />This function returns an iterator pointing to the partition point of container i.e. the first element in the partitioned range [beg,end) for which condition is not true. The container should already be partitioned for this function to work.<br /><code>此函数返回一个迭代器，该迭代器指向容器的分区点，即条件不成立的分区范围[beg，end）中的第一个元素。容器应该已经分区了，此功能才能起作用。</code></li><li>partition_copy(beg, end, beg1, beg2, condition)<br />This function copies the partitioned elements in the differenet containers mentioned in its arguments. It takes 5 arguments. Beginning and ending position of container, beginning position of new container where elements have to be copied (elements returning true for condition), beginning position of new container where other elements have to be copied (elements returning false for condition) and the condition. Resizing new containers is necessary for this function.<br /><code>此函数将其分区中的分区元素复制到其参数中提到的differnet容器中。它需要5个参数。容器的开始和结束位置，必须复制元素的新容器的开始位置（元素返回条件为true），必须复制其他元素的新容器的开始位置（元素返回条件为false）和条件。调整新容器的大小对于此功能是必需的。</code></li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; partition() and is_partitioned()#include&lt;iostream&gt;#include&lt;algorithm&gt; &#x2F;&#x2F; for partition algorithm#include&lt;vector&gt; &#x2F;&#x2F; for vectorusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing vectorvector&lt;int&gt; vect &#x3D; &#123; 2, 1, 5, 6, 8, 7 &#125;;&#x2F;&#x2F; Checking if vector is partitioned&#x2F;&#x2F; using is_partitioned()is_partitioned(vect.begin(), vect.end(), [](int x)&#123;return x%2&#x3D;&#x3D;0;&#125;)?cout &lt;&lt; &quot;Vector is partitioned&quot;:cout &lt;&lt; &quot;Vector is not partitioned&quot;;cout &lt;&lt; endl;&#x2F;&#x2F; partitioning vector using partition()partition(vect.begin(), vect.end(), [](int x)&#123;return x%2&#x3D;&#x3D;0;&#125;);&#x2F;&#x2F; Checking if vector is partitioned&#x2F;&#x2F; using is_partitioned()is_partitioned(vect.begin(), vect.end(), [](int x)&#123;return x%2&#x3D;&#x3D;0;&#125;)?cout &lt;&lt; &quot;Now, vector is partitioned after partition operation&quot;:cout &lt;&lt; &quot;Vector is still not partitioned after partition operation&quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Displaying partitioned Vectorcout &lt;&lt; &quot;The partitioned vector is : &quot;;for (int &amp;x : vect) cout &lt;&lt; x &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--Vector is not partitioned--&gt;&lt;!--Now, vector is partitioned after partition operation--&gt;&lt;!--The partitioned vector is : 2 8 6 5 1 7 --&gt;&#x2F;*---------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; stable_partition() and partition_point()#include&lt;iostream&gt;#include&lt;algorithm&gt; &#x2F;&#x2F; for partition algorithm#include&lt;vector&gt; &#x2F;&#x2F; for vectorusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing vectorvector&lt;int&gt; vect &#x3D; &#123; 2, 1, 5, 6, 8, 7 &#125;;&#x2F;&#x2F; partitioning vector using stable_partition()&#x2F;&#x2F; in sorted orderstable_partition(vect.begin(), vect.end(), [](int x)&#123;return x%2 &#x3D;&#x3D; 0;&#125;);&#x2F;&#x2F; Displaying partitioned Vectorcout &lt;&lt; &quot;The partitioned vector is : &quot;;for (int &amp;x : vect) cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Declaring iteratorvector&lt;int&gt;::iterator it1;&#x2F;&#x2F; using partition_point() to get ending position of partitionauto it &#x3D; partition_point(vect.begin(), vect.end(), [](int x)&#123;return x%2&#x3D;&#x3D;0;&#125;);&#x2F;&#x2F; Displaying partitioned Vectorcout &lt;&lt; &quot;The vector elements returning true for condition are : &quot;;for ( it1&#x3D; vect.begin(); it1!&#x3D;it; it1++)cout &lt;&lt; *it1 &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The partitioned vector is : 2 6 8 1 5 7 --&gt;&lt;!--The vector elements returning true for condition are : 2 6 8 --&gt;&#x2F;*--------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; partition_copy()#include&lt;iostream&gt;#include&lt;algorithm&gt; &#x2F;&#x2F; for partition algorithm#include&lt;vector&gt; &#x2F;&#x2F; for vectorusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing vectorvector&lt;int&gt; vect &#x3D; &#123; 2, 1, 5, 6, 8, 7 &#125;;&#x2F;&#x2F; Declaring vector1vector&lt;int&gt; vect1;&#x2F;&#x2F; Declaring vector1vector&lt;int&gt; vect2;&#x2F;&#x2F; Resizing vectors to suitable size using count_if() and resize()int n &#x3D; count_if (vect.begin(), vect.end(), [](int x)&#123;return x%2&#x3D;&#x3D;0;&#125; );vect1.resize(n);vect2.resize(vect.size()-n);&#x2F;&#x2F; Using partition_copy() to copy partitionspartition_copy(vect.begin(), vect.end(), vect1.begin(),vect2.begin(), [](int x)&#123;return x%2&#x3D;&#x3D;0;&#125;);&#x2F;&#x2F; Displaying partitioned Vectorcout &lt;&lt; &quot;The elements that return true for condition are : &quot;;for (int &amp;x : vect1)cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Displaying partitioned Vectorcout &lt;&lt; &quot;The elements that return false for condition are : &quot;;for (int &amp;x : vect2)cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The elements that return true for condition are : 2 6 8 --&gt;&lt;!--The elements that return false for condition are : 1 5 7 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><h2 id="2-span-idnumericnumericspan"><a class="markdownIt-Anchor" href="#2-span-idnumericnumericspan"></a> 2. <span id="Numeric">Numeric</span></h2><ul><li><h3 id="span-idvalarray_classvalarray-classspan"><a class="markdownIt-Anchor" href="#span-idvalarray_classvalarray-classspan"></a> <span id="valarray_class">valarray class</span></h3>C++98 introduced a special container called valarray to hold and provide mathematical operations on arrays efficiently.<ul><li>It supports element-wise mathematical operations and various forms of generalized subscript operators, slicing and indirect access.</li><li>As compare to vectors, valarrays are efficient in certain mathematical operations than vectors also.<br />C ++ 98 引入了一个名为 valarray 的特殊容器，可以有效地保存并提供对数组的数学运算。</li><li>它支持按元素进行数学运算以及各种形式的广义下标运算符，切片和间接访问。</li><li>与向量相比，valarray 在某些数学运算中比向量更有效。</li></ul></li></ul><blockquote><p>Public member functions in valarray class :</p><ol><li>apply()<br />This function applies the manipulation given in its arguments to all the valarray elements at once and returns a new valarray with manipulated values.<br /><code>此函数立即将其参数中给出的操作应用于所有valarray元素，并返回具有操作值的新valarray。</code></li><li>sum()<br />This function returns the summation of all the elements of valarrays at once.<br /><code>此函数一次返回valarrays所有元素的总和。</code></li><li>min()<br />This function returns the smallest element of valarray.<br /><code>此函数返回valarray的最小元素。</code></li><li>max()<br />This function returns the largest element of valarray.<br /><code>此函数返回valarray的最大元素。</code></li><li>shift()<br />This function returns the new valarray after shifting elements by the number mentioned in its argument. If the number is positive, left-shift is applied, if number is negative, right-shift is applied.<br /><code>该函数在将元素移位其参数中提到的数字后返回新的valarray。 如果数字为正，则应用左移；如果数字为负，则应用右移。</code></li><li>cshift()<br />This function returns the new valarray after circularly shifting(rotating) elements by the number mentioned in its argument. If the number is positive, left-circular shift is applied, if number is negative, right-circular shift is applied.<br /><code>该函数将元素循环移位（旋转）其参数中提到的数字后，将返回新的valarray。 如果数字为正，则应用左圆周移位；如果数字为负，则应用右圆周移位。</code></li><li>swap()<br />This function swaps one valarray with other.<br /><code>此函数将一个valarray与另一个交换。</code></li></ol></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; apply() and sum()#include&lt;iostream&gt;#include&lt;valarray&gt; &#x2F;&#x2F; for valarray functionsusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing valarrayvalarray&lt;int&gt; varr &#x3D; &#123; 10, 2, 20, 1, 30 &#125;;&#x2F;&#x2F; Declaring new valarrayvalarray&lt;int&gt; varr1 ;&#x2F;&#x2F; Using apply() to increment all elements by 5varr1 &#x3D; varr.apply([](int x)&#123;return x&#x3D;x+5;&#125;);&#x2F;&#x2F; Displaying new elements valuecout &lt;&lt; &quot;The new valarray with manipulated values is : &quot;;for (int &amp;x: varr1) cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Displaying sum of both old and new valarraycout &lt;&lt; &quot;The sum of old valarray is : &quot;;cout &lt;&lt; varr.sum() &lt;&lt; endl;cout &lt;&lt; &quot;The sum of new valarray is : &quot;;cout &lt;&lt; varr1.sum() &lt;&lt; endl;return 0;&#125;&lt;!--The new valarray with manipulated values is : 15 7 25 6 35 --&gt;&lt;!--The sum of old valarray is : 63--&gt;&lt;!--The sum of new valarray is : 88--&gt;&#x2F;*----------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; max() and min()#include&lt;iostream&gt;#include&lt;valarray&gt; &#x2F;&#x2F; for valarray functionsusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing valarrayvalarray&lt;int&gt; varr &#x3D; &#123; 10, 2, 20, 1, 30 &#125;;&#x2F;&#x2F; Displaying largest element of valarraycout &lt;&lt; &quot;The largest element of valarray is : &quot;;cout &lt;&lt; varr.max() &lt;&lt; endl;&#x2F;&#x2F; Displaying smallest element of valarraycout &lt;&lt; &quot;The smallest element of valarray is : &quot;;cout &lt;&lt; varr.min() &lt;&lt; endl;return 0;&#125;&lt;!--The largest element of valarray is : 30--&gt;&lt;!--The smallest element of valarray is : 1--&gt;&#x2F;*-------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; shift() and cshift()#include&lt;iostream&gt;#include&lt;valarray&gt; &#x2F;&#x2F; for valarray functionsusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing valarrayvalarray&lt;int&gt; varr &#x3D; &#123; 10, 2, 20, 1, 30 &#125;;&#x2F;&#x2F; Declaring new valarrayvalarray&lt;int&gt; varr1;&#x2F;&#x2F; using shift() to shift elements to left&#x2F;&#x2F; shifts valarray by 2 positionvarr1 &#x3D; varr.shift(2);&#x2F;&#x2F; Displaying elements of valarray after shiftingcout &lt;&lt; &quot;The new valarray after shifting is : &quot;;for ( int&amp;x : varr1) cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; using cshift() to circulary shift elements to right&#x2F;&#x2F; rotates valarray by 3 positionvarr1 &#x3D; varr.cshift(-3);&#x2F;&#x2F; Displaying elements of valarray after circular shiftingcout &lt;&lt; &quot;The new valarray after circular shifting is : &quot;;for ( int&amp;x : varr1) cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The new valarray after shifting is : 20 1 30 0 0 --&gt;&lt;!--The new valarray after circular shifting is : 20 1 30 10 2 --&gt;&#x2F;*--------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; swap()#include&lt;iostream&gt;#include&lt;valarray&gt; &#x2F;&#x2F; for valarray functionsusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing 1st valarrayvalarray&lt;int&gt; varr1 &#x3D; &#123;1, 2, 3, 4&#125;;&#x2F;&#x2F; Initializing 2nd valarrayvalarray&lt;int&gt; varr2 &#x3D; &#123;2, 4, 6, 8&#125;;&#x2F;&#x2F; Displaying valarrays before swappingcout &lt;&lt; &quot;The contents of 1st valarray &quot;&quot;before swapping are : &quot;;for (int &amp;x : varr1)cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;cout &lt;&lt; &quot;The contents of 2nd valarray &quot;&quot;before swapping are : &quot;;for (int &amp;x : varr2)cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Use of swap() to swap the valarraysvarr1.swap(varr2);&#x2F;&#x2F; Displaying valarrays after swappingcout &lt;&lt; &quot;The contents of 1st valarray &quot;&quot;after swapping are : &quot;;for (int &amp;x : varr1)cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;cout &lt;&lt; &quot;The contents of 2nd valarray &quot;&quot;after swapping are : &quot;;for (int &amp;x : varr2)cout &lt;&lt; x &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The contents of 1st valarray before swapping are : 1 2 3 4 --&gt;&lt;!--The contents of 2nd valarray before swapping are : 2 4 6 8 --&gt;&lt;!--The contents of 1st valarray after swapping are : 2 4 6 8 --&gt;&lt;!--The contents of 2nd valarray after swapping are : 1 2 3 4 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><h1 id="二-span-idcontainerscontainersspan"><a class="markdownIt-Anchor" href="#二-span-idcontainerscontainersspan"></a> 二. <span id="Containers">Containers</span></h1><blockquote><p>Containers or container classes store objects and data. There are in total seven standard “first-class” container classes and three container adaptor classes and only seven header files that provide access to these containers or container adaptors.<br />容器或容器类存储对象和数据。总共有七个标准的“一流”容器类和三个容器适配器类，并且只有七个头文件可提供对这些容器或容器适配器的访问。</p></blockquote><h2 id="1-span-idsequence_containerssequence-containersspan"><a class="markdownIt-Anchor" href="#1-span-idsequence_containerssequence-containersspan"></a> 1. <span id="Sequence_Containers">Sequence Containers</span> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2><ul><li><h3 id="span-idvectorvectorspan"><a class="markdownIt-Anchor" href="#span-idvectorvectorspan"></a> <span id="vector">vector</span></h3>Vectors are same as dynamic arrays with the ability to resize itself automatically when an element is inserted or deleted, with their storage being handled automatically by the container. Vector elements are placed in contiguous storage so that they can be accessed and traversed using iterators. In vectors, data is inserted at the end. Inserting at the end takes differential time, as sometimes there may be a need of extending the array. Removing the last element takes only constant time because no resizing happens. Inserting and erasing at the beginning or in the middle is linear in time.<br />向量与动态数组一样，当插入或删除元素时，向量可以自动调整自身大小，容器会自动处理向量的存储。向量元素被放置在连续的存储器中，这样就可以使用迭代器访问和遍历它们。在向量中，数据是在末尾插入的。在末尾插入需要不同的时间，因为有时可能需要扩展数组。移除最后一个元素只需要固定的时间，因为没有调整大小。开始或中间的插入和删除在时间上是线性的。</li><li><h6 id="all-vector-function"><a class="markdownIt-Anchor" href="#all-vector-function"></a> All Vector Function</h6><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">-</th><th style="text-align:center">-</th><th style="text-align:center">-</th></tr></thead><tbody><tr><td style="text-align:center"><a href="#">vector::begin()</a></td><td style="text-align:center"><a href="#">vector::end()</a></td><td style="text-align:center"><a href="#">vector::rbegin()</a></td><td style="text-align:center"><a href="#">vector::rend()</a></td></tr><tr><td style="text-align:center"><a href="#">vector::cbegin()</a></td><td style="text-align:center"><a href="#">vector::cend()</a></td><td style="text-align:center"><a href="#">vector::crend()</a></td><td style="text-align:center"><a href="#">vector::crbegin()</a></td></tr><tr><td style="text-align:center"><a href="#">vector::assign()</a></td><td style="text-align:center"><a href="#">vector::at()</a></td><td style="text-align:center"><a href="#">vector::back()</a></td><td style="text-align:center"><a href="#">vector::capacity()</a></td></tr><tr><td style="text-align:center"><a href="#">vector::clear()</a></td><td style="text-align:center"><a href="#">vector::push_back()</a></td><td style="text-align:center"><a href="#">vector::pop_back()</a></td><td style="text-align:center"><a href="#">vector::empty()</a></td></tr><tr><td style="text-align:center"><a href="#">vector::erase()</a></td><td style="text-align:center"><a href="#">vector::size()</a></td><td style="text-align:center"><a href="#">vector::swap()</a></td><td style="text-align:center"><a href="#">vector::reserve()</a></td></tr><tr><td style="text-align:center"><a href="#">vector::resize()</a></td><td style="text-align:center"><a href="#">vector::shrink_to_fit()</a></td><td style="text-align:center"><a href="#">vector::operator=</a></td><td style="text-align:center"><a href="#">vector::operator[]</a></td></tr><tr><td style="text-align:center"><a href="#">vector::front()</a></td><td style="text-align:center"><a href="#">vector::data()</a></td><td style="text-align:center"><a href="#">vector::emplace_back()</a></td><td style="text-align:center"><a href="#">vector::emplace()</a></td></tr><tr><td style="text-align:center"><a href="#">vector::max_size()</a></td><td style="text-align:center"><a href="#">vector::insert()</a></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></li></ul><blockquote><p>Certain functions associated with the vector are:<br /><code>与向量相关的某些函数有：</code></p><ul><li>Iterators</li></ul><ol><li>begin()<br />Returns an iterator pointing to the first element in the vector<br /><code>返回指向向量中第一个元素的迭代器</code></li><li>end()<br />Returns an iterator pointing to the theoretical element that follows the last element in the vector<br /><code>返回指向向量中最后一个元素后面的理论元素的迭代器</code></li><li>rbegin()<br />Returns a reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element<br /><code>返回指向向量中最后一个元素的反向迭代器（反向开始）。它从最后一个元素移动到第一个元素</code></li><li>rend()<br />Returns a reverse iterator pointing to the theoretical element preceding the first element in the vector (considered as reverse end)<br /><code>返回指向向量中第一个元素前面的理论元素的反向迭代器（视为反向结束）</code></li><li>cbegin()<br />Returns a constant iterator pointing to the first element in the vector.<br /><code>返回指向向量中第一个元素的常量迭代器。</code></li><li>cend()<br />Returns a constant iterator pointing to the theoretical element that follows the last element in the vector.<br /><code>返回一个常量迭代器，该迭代器指向向量中最后一个元素后面的理论元素。</code></li><li>crbegin()<br />Returns a constant reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element<br /><code>返回指向向量中最后一个元素的常量反向迭代器（反向开始）。它从最后一个元素移动到第一个元素</code></li><li>crend()<br />Returns a constant reverse iterator pointing to the theoretical element preceding the first element in the vector (considered as reverse end)<br /><code>返回一个常量反向迭代器，该迭代器指向向量中第一个元素之前的理论元素（视为反向结束）</code></li></ol><ul><li>Capacity</li></ul><ol><li>size()<br />Returns the number of elements in the vector.<br /><code>返回矢量中的元素数。</code></li><li>max_size()<br />Returns the maximum number of elements that the vector can hold.<br /><code>返回向量可以容纳的最大元素数。</code></li><li>capacity()<br />Returns the size of the storage space currently allocated to the vector expressed as number of elements.<br /><code>返回当前分配给向量的存储空间大小，用元素数表示。</code></li><li>resize(n)<br />Resizes the container so that it contains ‘n’ elements.<br /><code>调整容器大小，使其包含“n”个元素。</code></li><li>empty()<br />Returns whether the container is empty.<br /><code>返回容器是否为空。</code></li><li>shrink_to_fit()<br />Reduces the capacity of the container to fit its size and destroys all elements beyond the capacity.<br /><code>减少容器的容量以适合其大小，并销毁超出容量的所有元素。</code></li><li>reserve()<br />Requests that the vector capacity be at least enough to contain n elements.<br /><code>要求向量容量至少足以包含n个元素。</code></li></ol><ul><li>Element access:</li></ul><ol><li>reference operator [g]<br />Returns a reference to the element at position ‘g’ in the vector<br /><code>返回对向量中位置“g”处元素的引用</code></li><li>at(g)<br />Returns a reference to the element at position ‘g’ in the vector<br /><code>返回对向量中位置“g”处元素的引用</code></li><li>front()<br />Returns a reference to the first element in the vector<br /><code>返回对向量中第一个元素的引用</code></li><li>back()<br />Returns a reference to the last element in the vector<br /><code>返回对向量中最后一个元素的引用</code></li><li>data()<br />Returns a direct pointer to the memory array used internally by the vector to store its owned elements.<br /><code>返回指向向量内部用于存储其所属元素的内存数组的直接指针。</code></li></ol><ul><li>Modifiers:</li></ul><ol><li>assign()<br />It assigns new value to the vector elements by replacing old ones<br /><code>它通过替换旧元素来为向量元素赋值</code></li><li>push_back()<br />It push the elements into a vector from the back<br /><code>它将元素从后面推到一个向量中</code></li><li>pop_back()<br />It is used to pop or remove elements from a vector from the back.<br /><code>它用于从后面弹出或删除向量中的元素。</code></li><li>insert()<br />It inserts new elements before the element at the specified position<br /><code>它在元素之前的指定位置插入新元素</code></li><li>erase()<br />It is used to remove elements from a container from the specified position or range.<br /><code>它用于从容器的指定位置或范围移除元素。</code></li><li>swap()<br />It is used to swap the contents of one vector with another vector of same type. Sizes may differ.<br /><code>它用于将一个向量的内容与另一个相同类型的向量交换。尺寸可能不同。</code></li><li>clear()<br />It is used to remove all the elements of the vector container<br /><code>它用于移除向量容器的所有元素</code></li><li>emplace()<br />It extends the container by inserting new element at position<br /><code>它通过在位置插入新元素来扩展容器</code></li><li>emplace_back()<br />It is used to insert a new element into the vector container, the new element is added to the end of the vector<br /><code>它用于在向量容器中插入新元素，新元素被添加到向量的末尾</code></li></ol></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to illustrate the&#x2F;&#x2F; iterators in vector#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main()&#123;vector&lt;int&gt; g1;for (int i &#x3D; 1; i &lt;&#x3D; 5; i++)g1.push_back(i);cout &lt;&lt; &quot;Output of begin and end: &quot;;for (auto i &#x3D; g1.begin(); i !&#x3D; g1.end(); ++i)cout &lt;&lt; *i &lt;&lt; &quot; &quot;;cout &lt;&lt; &quot;\nOutput of cbegin and cend: &quot;;for (auto i &#x3D; g1.cbegin(); i !&#x3D; g1.cend(); ++i)cout &lt;&lt; *i &lt;&lt; &quot; &quot;;cout &lt;&lt; &quot;\nOutput of rbegin and rend: &quot;;for (auto ir &#x3D; g1.rbegin(); ir !&#x3D; g1.rend(); ++ir)cout &lt;&lt; *ir &lt;&lt; &quot; &quot;;cout &lt;&lt; &quot;\nOutput of crbegin and crend : &quot;;for (auto ir &#x3D; g1.crbegin(); ir !&#x3D; g1.crend(); ++ir)cout &lt;&lt; *ir &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--Output of begin and end: 1 2 3 4 5 --&gt;&lt;!--Output of cbegin and cend: 1 2 3 4 5 --&gt;&lt;!--Output of rbegin and rend: 5 4 3 2 1 --&gt;&lt;!--Output of crbegin and crend : 5 4 3 2 1--&gt;&#x2F;*----------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to illustrate the&#x2F;&#x2F; capacity function in vector#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main()&#123;vector&lt;int&gt; g1;for (int i &#x3D; 1; i &lt;&#x3D; 5; i++)g1.push_back(i);cout &lt;&lt; &quot;Size : &quot; &lt;&lt; g1.size();cout &lt;&lt; &quot;\nCapacity : &quot; &lt;&lt; g1.capacity();cout &lt;&lt; &quot;\nMax_Size : &quot; &lt;&lt; g1.max_size();&#x2F;&#x2F; resizes the vector size to 4g1.resize(4);&#x2F;&#x2F; prints the vector size after resize()cout &lt;&lt; &quot;\nSize : &quot; &lt;&lt; g1.size();&#x2F;&#x2F; checks if the vector is empty or notif (g1.empty() &#x3D;&#x3D; false)cout &lt;&lt; &quot;\nVector is not empty&quot;;elsecout &lt;&lt; &quot;\nVector is empty&quot;;&#x2F;&#x2F; Shrinks the vectorg1.shrink_to_fit();cout &lt;&lt; &quot;\nVector elements are: &quot;;for (auto it &#x3D; g1.begin(); it !&#x3D; g1.end(); it++)cout &lt;&lt; *it &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--Size : 5--&gt;&lt;!--Capacity : 8--&gt;&lt;!--Max_Size : 4611686018427387903--&gt;&lt;!--Size : 4--&gt;&lt;!--Vector is not empty--&gt;&lt;!--Vector elements are: 1 2 3 4--&gt;&#x2F;*---------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to illustrate the&#x2F;&#x2F; element accesser in vector#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;vector&lt;int&gt; g1;for (int i &#x3D; 1; i &lt;&#x3D; 10; i++)g1.push_back(i * 10);cout &lt;&lt; &quot;\nReference operator [g] : g1[2] &#x3D; &quot; &lt;&lt; g1[2];cout &lt;&lt; &quot;\nat : g1.at(4) &#x3D; &quot; &lt;&lt; g1.at(4);cout &lt;&lt; &quot;\nfront() : g1.front() &#x3D; &quot; &lt;&lt; g1.front();cout &lt;&lt; &quot;\nback() : g1.back() &#x3D; &quot; &lt;&lt; g1.back();&#x2F;&#x2F; pointer to the first elementint* pos &#x3D; g1.data();cout &lt;&lt; &quot;\nThe first element is &quot; &lt;&lt; *pos;return 0;&#125;&lt;!--Reference operator [g] : g1[2] &#x3D; 30--&gt;&lt;!--at : g1.at(4) &#x3D; 50--&gt;&lt;!--front() : g1.front() &#x3D; 10--&gt;&lt;!--back() : g1.back() &#x3D; 100--&gt;&lt;!--The first element is 10--&gt;&#x2F;*------------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to illustrate the&#x2F;&#x2F; Modifiers in vector#include &lt;bits&#x2F;stdc++.h&gt;#include &lt;vector&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Assign vectorvector&lt;int&gt; v;&#x2F;&#x2F; fill the array with 10 five timesv.assign(5, 10);cout &lt;&lt; &quot;The vector elements are: &quot;;for (int i &#x3D; 0; i &lt; v.size(); i++)cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;&#x2F;&#x2F; inserts 15 to the last positionv.push_back(15);int n &#x3D; v.size();cout &lt;&lt; &quot;\nThe last element is: &quot; &lt;&lt; v[n - 1];&#x2F;&#x2F; removes last elementv.pop_back();&#x2F;&#x2F; prints the vectorcout &lt;&lt; &quot;\nThe vector elements are: &quot;;for (int i &#x3D; 0; i &lt; v.size(); i++)cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;&#x2F;&#x2F; inserts 5 at the beginningv.insert(v.begin(), 5);cout &lt;&lt; &quot;\nThe first element is: &quot; &lt;&lt; v[0];&#x2F;&#x2F; removes the first elementv.erase(v.begin());cout &lt;&lt; &quot;\nThe first element is: &quot; &lt;&lt; v[0];&#x2F;&#x2F; inserts at the beginningv.emplace(v.begin(), 5);cout &lt;&lt; &quot;\nThe first element is: &quot; &lt;&lt; v[0];&#x2F;&#x2F; Inserts 20 at the endv.emplace_back(20);n &#x3D; v.size();cout &lt;&lt; &quot;\nThe last element is: &quot; &lt;&lt; v[n - 1];&#x2F;&#x2F; erases the vectorv.clear();cout &lt;&lt; &quot;\nVector size after erase(): &quot; &lt;&lt; v.size();&#x2F;&#x2F; two vector to perform swapvector&lt;int&gt; v1, v2;v1.push_back(1);v1.push_back(2);v2.push_back(3);v2.push_back(4);cout &lt;&lt; &quot;\n\nVector 1: &quot;;for (int i &#x3D; 0; i &lt; v1.size(); i++)cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; &quot;\nVector 2: &quot;;for (int i &#x3D; 0; i &lt; v2.size(); i++)cout &lt;&lt; v2[i] &lt;&lt; &quot; &quot;;&#x2F;&#x2F; Swaps v1 and v2v1.swap(v2);cout &lt;&lt; &quot;\nAfter Swap \nVector 1: &quot;;for (int i &#x3D; 0; i &lt; v1.size(); i++)cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; &quot;\nVector 2: &quot;;for (int i &#x3D; 0; i &lt; v2.size(); i++)cout &lt;&lt; v2[i] &lt;&lt; &quot; &quot;;&#125;&lt;!--The vector elements are: 10 10 10 10 10 --&gt;&lt;!--The last element is: 15--&gt;&lt;!--The vector elements are: 10 10 10 10 10 --&gt;&lt;!--The first element is: 5--&gt;&lt;!--The first element is: 10--&gt;&lt;!--The first element is: 5--&gt;&lt;!--The last element is: 20--&gt;&lt;!--Vector size after erase(): 0--&gt;&lt;!--Vector 1: 1 2 --&gt;&lt;!--Vector 2: 3 4 --&gt;&lt;!--After Swap --&gt;&lt;!--Vector 1: 3 4 --&gt;&lt;!--Vector 2: 1 2--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idlistlistspan"><a class="markdownIt-Anchor" href="#span-idlistlistspan"></a> <span id="list">list</span></h3>Lists are sequence containers that allow non-contiguous memory allocation. As compared to vector, list has slow traversal, but once a position has been found, insertion and deletion are quick. Normally, when we say a List, we talk about doubly linked list. For implementing a singly linked list, we use forward list.<br />列表是允许非连续内存分配的序列容器。和 vector 相比，list 遍历速度较慢，但一旦找到位置，插入和删除都很快。通常，当我们说一个列表时，我们谈论的是双链表。为了实现一个单链表，我们使用 forward list。</li></ul><blockquote><p>Functions used with List:</p><ol><li>front()<br />Returns the value of the first element in the list.<br /><code>返回列表中第一个元素的值。</code></li><li>back()<br />Returns the value of the last element in the list .<br /><code>返回列表中最后一个元素的值。</code></li><li>push_front(g)<br />Adds a new element ‘g’ at the beginning of the list .<br /><code>在列表的开头添加新元素“g”。</code></li><li>push_back(g)<br />Adds a new element ‘g’ at the end of the list.<br /><code>在列表末尾添加新元素“g”。</code></li><li>pop_front()<br />Removes the first element of the list, and reduces size of the list by 1.<br /><code>删除列表的第一个元素，并将列表大小减小1。</code></li><li>pop_back()<br />Removes the last element of the list, and reduces size of the list by 1.<br /><code>删除列表的最后一个元素，并将列表大小减小1。</code></li><li>list::begin() and list::end() in C++ STL<br />begin() function returns an iterator pointing to the first element of the list.<br /><code>函数begin()返回指向列表第一个元素的迭代器。</code><br />end() function returns an iterator pointing to the theoretical last element which follows the last element.<br /><code>函数end()返回一个迭代器，该迭代器指向最后一个元素后面的理论上的最后一个元素。</code></li><li>list rbegin() and rend() function in C++ STL<br />rbegin() returns a reverse iterator which points to the last element of the list. rend() returns a reverse iterator which points to the position before the beginning of the list.<br /><code>rbegin（）返回指向列表最后一个元素的反向迭代器。rend（）返回一个反向迭代器，它指向列表开头之前的位置。</code></li><li>list cbegin() and cend() function in C++ STL<br />cbegin() returns a constant random access iterator which points to the beginning of the list. cend() returns a constant random access iterator which points to the end of the list.<br /><code>cbegin（）返回指向列表开头的常量随机访问迭代器。cend（）返回指向列表末尾的常量随机访问迭代器。</code></li><li>list crbegin() and crend() function in C++ STL<br />crbegin() returns a constant reverse iterator which points to the last element of the list i.e reversed beginning of container. crend() returns a constant reverse iterator which points to the theoretical element preceding the first element in the list i.e. the reverse end of the list.<br /><code>crbegin（）返回一个常量反向迭代器，它指向列表的最后一个元素，即容器的反向开头。crend（）返回一个常量反向迭代器，该迭代器指向列表中第一个元素之前的理论元素，即列表的反向结尾。</code></li><li>empty()<br />Returns whether the list is empty(1) or not(0).<br /><code>返回列表是否为空（1）或非空（0）。</code></li><li>insert()<br />Inserts new elements in the list before the element at a specified position.<br /><code>在列表中元素之前的指定位置插入新元素。</code></li><li>erase()<br />Removes a single element or a range of elements from the list.<br /><code>从列表中删除单个元素或一系列元素。</code></li><li>assign()<br />Assigns new elements to list by replacing current elements and resizes the list.<br /><code>通过替换当前元素将新元素指定给列表，并调整列表大小。</code></li><li>remove()<br />Removes all the elements from the list, which are equal to given element.<br /><code>从列表中删除与给定元素相等的所有元素。</code></li><li>list::remove_if() in C++ STL<br />Used to remove all the values from the list that correspond true to the predicate or condition given as parameter to the function.<br /><code>用于从列表中删除与作为函数参数给定的谓词或条件相对应的所有值。</code></li><li>reverse()<br />Reverses the list.<br /><code>反转列表。</code></li><li>size()<br />Returns the number of elements in the list.<br /><code>返回列表中的元素数。</code></li><li>list resize() function in C++ STL<br />Used to resize a list container.<br /><code>用于调整列表容器的大小。</code></li><li>sort()<br />Sorts the list in increasing order.<br /><code>按递增顺序对列表排序。</code></li><li>list max_size() function in C++ STL<br />Returns the maximum number of elements a list container can hold.<br /><code>返回列表容器可以容纳的最大元素数。</code></li><li>list unique() in C++ STL<br />Removes all duplicate consecutive elements from the list.<br /><code>从列表中删除所有重复的连续元素。</code></li><li>list::emplace_front() and list::emplace_back() in C++ STL<br />emplace_front() function is used to insert a new element into the list container, the new element is added to the beginning of the list. emplace_back() function is used to insert a new element into the list container, the new element is added to the end of the list.<br /><code>emplace_front（）函数用于在列表容器中插入新元素，将新元素添加到列表的开头。emplace_back（）函数用于在列表容器中插入新元素，将新元素添加到列表的末尾。</code></li><li>list::clear() in C++ STL<br />clear() function is used to remove all the elements of the list container, thus making it size 0.<br /><code>clear（）函数用于删除列表容器的所有元素，从而使其大小为0。</code></li><li>list::operator= in C++ STL<br />This operator is used to assign new contents to the container by replacing the existing contents.<br /><code>此运算符用于通过替换现有内容将新内容分配给容器。</code></li><li>list::swap() in C++ STL<br />This function is used to swap the contents of one list with another list of same type and size.<br /><code>此函数用于将一个列表的内容与另一个类型和大小相同的列表交换。</code></li><li>list splice() function in C++ STL<br />Used to transfer elements from one list to another.<br /><code>用于将元素从一个列表转移到另一个列表。</code></li><li>list merge() function in C++ STL<br />Merges two sorted lists into one.<br /><code>将两个已排序的列表合并为一个。</code></li><li>list emplace() function in C++ STL<br />Extends list by inserting new element at a given position.<br /><code>通过在给定位置插入新元素来扩展列表。</code></li></ol></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;list&gt;#include &lt;iterator&gt;using namespace std;&#x2F;&#x2F;function for printing the elements in a listvoid showlist(list &lt;int&gt; g)&#123;list &lt;int&gt; :: iterator it;for(it &#x3D; g.begin(); it !&#x3D; g.end(); ++it)cout &lt;&lt; &#39;\t&#39; &lt;&lt; *it;cout &lt;&lt; &#39;\n&#39;;&#125;int main()&#123;list &lt;int&gt; gqlist1, gqlist2;for (int i &#x3D; 0; i &lt; 10; ++i)&#123;gqlist1.push_back(i * 2);gqlist2.push_front(i * 3);&#125;cout &lt;&lt; &quot;\nList 1 (gqlist1) is : &quot;;showlist(gqlist1);cout &lt;&lt; &quot;\nList 2 (gqlist2) is : &quot;;showlist(gqlist2);cout &lt;&lt; &quot;\ngqlist1.front() : &quot; &lt;&lt; gqlist1.front();cout &lt;&lt; &quot;\ngqlist1.back() : &quot; &lt;&lt; gqlist1.back();cout &lt;&lt; &quot;\ngqlist1.pop_front() : &quot;;gqlist1.pop_front();showlist(gqlist1);cout &lt;&lt; &quot;\ngqlist2.pop_back() : &quot;;gqlist2.pop_back();showlist(gqlist2);cout &lt;&lt; &quot;\ngqlist1.reverse() : &quot;;gqlist1.reverse();showlist(gqlist1);cout &lt;&lt; &quot;\ngqlist2.sort(): &quot;;gqlist2.sort();showlist(gqlist2);return 0;&#125;&lt;!--List 1 (gqlist1) is :     0    2    4    6    --&gt;&lt;!--8    10    12    14    16    18--&gt;&lt;!--List 2 (gqlist2) is :     27    24    21    18    --&gt;&lt;!--15    12    9    6    3    0--&gt;&lt;!--gqlist1.front() : 0--&gt;&lt;!--gqlist1.back() : 18--&gt;&lt;!--gqlist1.pop_front() :     2    4    6    8    --&gt;&lt;!--10    12    14    16    18--&gt;&lt;!--gqlist2.pop_back() :     27    24    21    18    --&gt;&lt;!--15    12    9    6    3--&gt;&lt;!--gqlist1.reverse() :     18    16    14    12    --&gt;&lt;!--10    8    6    4    2--&gt;&lt;!--gqlist2.sort():     3    6    9    12    --&gt;&lt;!--15    18    21    24    27--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-iddequedequespan"><a class="markdownIt-Anchor" href="#span-iddequedequespan"></a> <span id="deque">deque</span></h3><div class="code-wrapper"><pre><code>Double ended queues are sequence containers with the feature of expansion and contraction on both the ends.They are similar to vectors, but are more efficient in case of insertion and deletion of elements. Unlike vectors, contiguous storage allocation may not be guaranteed.Double Ended Queues are basically an implementation of the data structure double ended queue. A queue data structure allows insertion only at the end and deletion from the front. This is like a queue in real life, wherein people are removed from the front and added at the back. Double ended queues are a special case of queues where insertion and deletion operations are possible at both the ends.The functions for deque are same as vector, with an addition of push and pop operations for both front and back.双端队列是序列容器，两端具有扩张和收缩的特性。它们类似于向量，但在插入和删除元素时效率更高。与向量不同，连续存储分配可能无法保证。双端队列基本上是数据结构双头队列的一种实现。队列数据结构只允许在末尾插入，从前面删除。这就像现实生活中的一个队列，人们从前面被移走，在后面添加。双端队列是队列的一种特殊情况，在这种情况下，两端都可以执行插入和删除操作。deque的函数与vector相同，在前面和后面都添加了push和pop操作。</code></pre></div><blockquote><ol><li>deque insert() function in C++ STL:<br />Inserts an element. And returns an iterator that points to the first of the newly inserted elements.<br /><code>插入元素。并返回一个迭代器，该迭代器指向新插入的第一个元素。</code></li><li>deque rbegin() function in C++ STL:<br />Returns a reverse iterator which points to the last element of the deque (i.e., its reverse beginning).<br /><code>返回一个反向迭代器，它指向deque的最后一个元素（即，它的反向开始）。</code></li><li>deque rend() function in C++ STL:<br />Returns a reverse iterator which points to the position before the beginning of the deque (which is considered its reverse end).<br /><code>返回一个反向迭代器，它指向deque开始之前的位置（被认为是deque的反向结束）。</code></li><li>deque cbegin() in C++ STL:<br />Returns a constant iterator pointing to the first element of the container, that is, the iterator cannot be used to modify, only traverse the deque.<br /><code>返回指向容器第一个元素的常量迭代器，即迭代器不能用于修改，只能遍历deque。</code></li><li>deque max_size() function in C++ STL:<br />Returns the maximum number of elements that a deque container can hold.<br /><code>返回deque容器可以容纳的最大元素数。</code></li><li>deque assign() function in C++ STL:<br />Assign values to the same or different deque container.<br /><code>为相同或不同的deque容器指定值。</code></li><li>deque resize() function in C++ STL:<br />Function which changes the size of the deque.<br /><code>改变deque大小的函数。</code></li><li>deque::push_front() in C++ STL:<br />This function is used to push elements into a deque from the front.<br /><code>此函数用于将元素从前面推入deque。</code></li><li>deque::push_back() in C++ STL:<br />This function is used to push elements into a deque from the back.<br /><code>此函数用于从后面将元素推入deque。</code></li><li>deque::pop_front() and deque::pop_back() in C++ STL:<br />pop_front() function is used to pop or remove elements from a deque from the front. pop_back() function is used to pop or remove elements from a deque from the back.<br /><code>函数用于从前面弹出或删除deque中的元素。函数用于从后面弹出或删除deque中的元素。</code></li><li>deque::front() and deque::back() in C++ STL:<br />front() function is used to reference the first element of the deque container. back() function is used to reference the last element of the deque container.<br /><code>函数用于引用deque容器的第一个元素。函数用于引用deque容器的最后一个元素。</code></li><li>deque::clear() and deque::erase() in C++ STL:<br />clear() function is used to remove all the elements of the deque container, thus making its size 0. erase() function is used to remove elements from a container from the specified position or range.<br /><code>clear（）函数用于删除deque容器的所有元素，从而使其大小为0。函数的作用是：从容器的指定位置或范围中删除元素。</code></li><li>deque::empty() and deque::size() in C++ STL:<br />empty() function is used to check if the deque container is empty or not. size() function is used to return the size of the deque container or the number of elements in the deque container.<br /><code>如果函数deque（）为空，则使用该函数检查容器是否为空。函数用于返回deque容器的大小或deque容器中元素的数量。</code></li><li>deque::operator= and deque::operator[] in C++ STL:<br />operator= operator is used to assign new contents to the container by replacing the existing contents. operator[] operator is used to reference the element present at position given inside the operator.<br /><code>operator=运算符用于通过替换现有内容将新内容分配给容器。运算符[]运算符用于引用位于运算符内部给定位置的元素。</code></li><li>deque::at() and deque::swap() in C++ STL:<br />at() function is used reference the element present at the position given as the parameter to the function. swap() function is used to swap the contents of one deque with another deque of same type and size.<br /><code>at（）函数用于引用作为函数参数给定位置的元素。swap（）函数用于将一个deque的内容与另一个相同类型和大小的deque交换。</code></li><li>deque::begin() and deque::end() in C++ STL:<br />begin() function is used to return an iterator pointing to the first element of the deque container. end() function is used to return an iterator pointing to the last element of the deque container.<br /><code>函数用于返回指向deque容器的第一个元素的迭代器。函数用于返回指向deque容器的最后一个元素的迭代器。</code></li><li>deque::emplace_front() and deque::emplace_back() in C++ STL:<br />emplace_front() function is used to insert a new element into the deque container. The new element is added to the beginning of the deque. emplace_back() function is used to insert a new element into the deque container. The new element is added to the end of the deque.<br /><code>emplace_front（）函数用于在deque容器中插入新元素。新元素被添加到deque的开头。emplace_back（）函数用于在deque容器中插入新元素。新元素被添加到deque的末尾。</code></li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;deque&gt;using namespace std;void showdq(deque &lt;int&gt; g)&#123;deque &lt;int&gt; :: iterator it;for (it &#x3D; g.begin(); it !&#x3D; g.end(); ++it)cout &lt;&lt; &#39;\t&#39; &lt;&lt; *it;cout &lt;&lt; &#39;\n&#39;;&#125;int main()&#123;deque &lt;int&gt; gquiz;gquiz.push_back(10);gquiz.push_front(20);gquiz.push_back(30);gquiz.push_front(15);cout &lt;&lt; &quot;The deque gquiz is : &quot;;showdq(gquiz);cout &lt;&lt; &quot;\ngquiz.size() : &quot; &lt;&lt; gquiz.size();cout &lt;&lt; &quot;\ngquiz.max_size() : &quot; &lt;&lt; gquiz.max_size();cout &lt;&lt; &quot;\ngquiz.at(2) : &quot; &lt;&lt; gquiz.at(2);cout &lt;&lt; &quot;\ngquiz.front() : &quot; &lt;&lt; gquiz.front();cout &lt;&lt; &quot;\ngquiz.back() : &quot; &lt;&lt; gquiz.back();cout &lt;&lt; &quot;\ngquiz.pop_front() : &quot;;gquiz.pop_front();showdq(gquiz);cout &lt;&lt; &quot;\ngquiz.pop_back() : &quot;;gquiz.pop_back();showdq(gquiz);return 0;&#125;&lt;!--The deque gquiz is :     15    20    10    30--&gt;&lt;!--gquiz.size() : 4--&gt;&lt;!--gquiz.max_size() : 4611686018427387903--&gt;&lt;!--gquiz.at(2) : 10--&gt;&lt;!--gquiz.front() : 15--&gt;&lt;!--gquiz.back() : 30--&gt;&lt;!--gquiz.pop_front() :     20    10    30--&gt;&lt;!--gquiz.pop_back() :     20    10--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idarraysarraysspan"><a class="markdownIt-Anchor" href="#span-idarraysarraysspan"></a> <span id="arrays">arrays</span></h3><div class="code-wrapper"><pre><code>The introduction of array class from C++11 has offered a better alternative for C-style arrays. The advantages of array class over C-style array are :- Array classes knows its own size, whereas C-style arrays lack this property. So when passing to functions, we don’t need to pass size of Array as a separate parameter.- With C-style array there is more risk of array being decayed into a pointer. Array classes don’t decay into pointers- Array classes are generally more efficient, light-weight and reliable than C-style arrays.从C++ 11引入数组类为C风格数组提供了更好的选择。array class相对于C-style array的优势在于：- 数组类知道它自己的大小，而C风格的数组缺少这个属性。所以当传递给函数时，我们不需要将数组的大小作为单独的参数传递。- 使用C样式的数组，数组衰减为指针的风险更大。数组类不会衰减为指针- 数组类通常比C样式数组更高效、更轻、更可靠。</code></pre></div><blockquote><p>Operations on array :</p><ol><li>at() :<br />This function is used to access the elements of array.<br /><code>此函数用于访问数组的元素。</code></li><li>get() :<br />This function is also used to access the elements of array. This function is not the member of array class but overloaded function from class tuple.<br /><code>此函数还用于访问数组的元素。此函数不是数组类的成员，而是类元组的重载函数。</code></li><li>operator[] :<br />This is similar to C-style arrays. This method is also used to access array elements.<br /><code>这类似于C样式数组。此方法也用于访问数组元素。</code></li><li>front() :<br />This returns the first element of array.<br /><code>返回数组的第一个元素。</code></li><li>back() :<br />This returns the last element of array.<br /><code>返回数组的最后一个元素。</code></li><li>size() :<br />It returns the number of elements in array. This is a property that C-style arrays lack.<br /><code>返回数组中的元素数。这是C样式数组缺少的属性。</code></li><li>max_size() :<br />It returns the maximum number of elements array can hold i.e, the size with which array is declared. The size() and max_size() return the same value.<br /><code>返回数组可以容纳的最大元素数，即声明数组的大小。size（）和max_size（）返回相同的值。</code></li><li>swap() :<br />The swap() swaps all elements of one array with other.<br /><code>swap（）将一个数组的所有元素与另一个数组交换。</code></li><li>empty() :<br />This function returns true when the array size is zero else returns false.<br /><code>当数组大小为零时，此函数返回true，否则返回false。</code></li><li>fill() :<br />This function is used to fill the entire array with a particular value.<br /><code>此函数用于用特定值填充整个数组。</code></li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ code to demonstrate working of array,&#x2F;&#x2F; to() and get()#include&lt;iostream&gt;#include&lt;array&gt; &#x2F;&#x2F; for array, at()#include&lt;tuple&gt; &#x2F;&#x2F; for get()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing the array elementsarray&lt;int,6&gt; ar &#x3D; &#123;1, 2, 3, 4, 5, 6&#125;;&#x2F;&#x2F; Printing array elements using at()cout &lt;&lt; &quot;The array elements are (using at()) : &quot;;for ( int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; ar.at(i) &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Printing array elements using get()cout &lt;&lt; &quot;The array elements are (using get()) : &quot;;cout &lt;&lt; get&lt;0&gt;(ar) &lt;&lt; &quot; &quot; &lt;&lt; get&lt;1&gt;(ar) &lt;&lt; &quot; &quot;;cout &lt;&lt; get&lt;2&gt;(ar) &lt;&lt; &quot; &quot; &lt;&lt; get&lt;3&gt;(ar) &lt;&lt; &quot; &quot;;cout &lt;&lt; get&lt;4&gt;(ar) &lt;&lt; &quot; &quot; &lt;&lt; get&lt;5&gt;(ar) &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Printing array elements using operator[]cout &lt;&lt; &quot;The array elements are (using operator[]) : &quot;;for ( int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; ar[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The array elemets are (using at()) : 1 2 3 4 5 6 --&gt;&lt;!--The array elemets are (using get()) : 1 2 3 4 5 6 --&gt;&lt;!--The array elements are (using operator[]) : 1 2 3 4 5 6 --&gt;&#x2F;*--------------------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of&#x2F;&#x2F; front() and back()#include&lt;iostream&gt;#include&lt;array&gt; &#x2F;&#x2F; for front() and back()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing the array elementsarray&lt;int,6&gt; ar &#x3D; &#123;1, 2, 3, 4, 5, 6&#125;;&#x2F;&#x2F; Printing first element of arraycout &lt;&lt; &quot;First element of array is : &quot;;cout &lt;&lt; ar.front() &lt;&lt; endl;&#x2F;&#x2F; Printing last element of arraycout &lt;&lt; &quot;Last element of array is : &quot;;cout &lt;&lt; ar.back() &lt;&lt; endl;return 0;&#125;&lt;!--First element of array is : 1--&gt;&lt;!--Last element of array is : 6--&gt;&#x2F;*--------------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of&#x2F;&#x2F; size() and max_size()#include&lt;iostream&gt;#include&lt;array&gt; &#x2F;&#x2F; for size() and max_size()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing the array elementsarray&lt;int,6&gt; ar &#x3D; &#123;1, 2, 3, 4, 5, 6&#125;;&#x2F;&#x2F; Printing number of array elementscout &lt;&lt; &quot;The number of array elements is : &quot;;cout &lt;&lt; ar.size() &lt;&lt; endl;&#x2F;&#x2F; Printing maximum elements array can holdcout &lt;&lt; &quot;Maximum elements array can hold is : &quot;;cout &lt;&lt; ar.max_size() &lt;&lt; endl;return 0;&#125;&lt;!--The number of array elements is : 6--&gt;&lt;!--Maximum elements array can hold is : 6--&gt;&#x2F;*--------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of swap()#include&lt;iostream&gt;#include&lt;array&gt; &#x2F;&#x2F; for swap() and arrayusing namespace std;int main()&#123;&#x2F;&#x2F; Initializing 1st arrayarray&lt;int,6&gt; ar &#x3D; &#123;1, 2, 3, 4, 5, 6&#125;;&#x2F;&#x2F; Initializing 2nd arrayarray&lt;int,6&gt; ar1 &#x3D; &#123;7, 8, 9, 10, 11, 12&#125;;&#x2F;&#x2F; Printing 1st and 2nd array before swappingcout &lt;&lt; &quot;The first array elements before swapping are : &quot;;for (int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; ar[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;cout &lt;&lt; &quot;The second array elements before swapping are : &quot;;for (int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; ar1[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Swapping ar1 values with arar.swap(ar1);&#x2F;&#x2F; Printing 1st and 2nd array after swappingcout &lt;&lt; &quot;The first array elements after swapping are : &quot;;for (int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; ar[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;cout &lt;&lt; &quot;The second array elements after swapping are : &quot;;for (int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; ar1[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The first array elements before swapping are : 1 2 3 4 5 6 --&gt;&lt;!--The second array elements before swapping are : 7 8 9 10 11 12 --&gt;&lt;!--The first array elements after swapping are : 7 8 9 10 11 12 --&gt;&lt;!--The second array elements after swapping are : 1 2 3 4 5 6 --&gt;&#x2F;*-------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of empty()&#x2F;&#x2F; and fill()#include&lt;iostream&gt;#include&lt;array&gt; &#x2F;&#x2F; for fill() and empty()using namespace std;int main()&#123;&#x2F;&#x2F; Declaring 1st arrayarray&lt;int,6&gt; ar;&#x2F;&#x2F; Declaring 2nd arrayarray&lt;int,0&gt; ar1;&#x2F;&#x2F; Checking size of array if it is emptyar1.empty()? cout &lt;&lt; &quot;Array empty&quot;:cout &lt;&lt; &quot;Array not empty&quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Filling array with 0ar.fill(0);&#x2F;&#x2F; Displaying array after fillingcout &lt;&lt; &quot;Array after filling operation is : &quot;;for ( int i&#x3D;0; i&lt;6; i++)cout &lt;&lt; ar[i] &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--Array empty--&gt;&lt;!--Array after filling operation is : 0 0 0 0 0 0 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idforward_listforward_list-introduced-in-c11span"><a class="markdownIt-Anchor" href="#span-idforward_listforward_list-introduced-in-c11span"></a> <span id="forward_list">forward_list (Introduced in C++11)</span></h3><div class="code-wrapper"><pre><code>Forward list in STL implements singly linked list. Introduced from C\++11, forward list are useful than other containers in insertion, removal and moving operations (like sort) and allows time constant insertion and removal of elements.It differs from list by the fact that forward list keeps track of location of only next element while list keeps track to both next and previous elements, thus increasing the storage space required to store each element. The drawback of forward list is that it cannot be iterated backwards and its individual elements cannot be accessed directly.Forward List is preferred over list when only forward traversal is required (same as singly linked list is preferred over doubly linked list) as we can save space. Some example cases are, chaining in hashing, adjacency list representation of graph, etc.STL中的转发列表实现了单链表。从C++ 11中介绍，转发列表在插入、删除和移动操作（如排序）中比其他容器有用，并允许元素的时间常数插入和移除。它与list的不同之处在于forward list只跟踪下一个元素的位置，而list则同时跟踪下一个和前一个元素，从而增加了存储每个元素所需的存储空间。forward list的缺点是它不能向后迭代，并且不能直接访问它的各个元素。当只需要向前遍历时，转发列表比列表优先（与单链表优先于双链表相同），这样可以节省空间。例如，散列中的链接、图的邻接表表示等。</code></pre></div><blockquote><p>Operations on Forward List :</p><ol><li>assign() :<br />This function is used to assign values to forward list, its another variant is used to assign repeated elements.<br /><code>此函数用于为转发列表赋值，它的另一个变量用于分配重复的元素。</code></li><li>push_front() :<br />This function is used to insert the element at the first position on forward list. The value from this function is copied to the space before first element in the container. The size of forward list increases by 1.<br /><code>此函数用于在前向列表的第一个位置插入元素。此函数中的值将复制到容器中第一个元素之前的空间中。转发列表的大小增加1。</code></li><li>emplace_front() :<br />This function is similar to the previous function but in this no copying operation occurs, the element is created directly at the memory before the first element of the forward list.<br /><code>此函数与上一个函数类似，但在这个函数中不会发生复制操作，元素直接在转发列表的第一个元素之前的内存中创建。</code></li><li>pop_front() :<br />This function is used to delete the first element of list.<br /><code>此函数用于删除列表的第一个元素。</code></li><li>insert_after():<br />This function gives us a choice to insert elements at any position in forward list. The arguments in this function are copied at the desired position.<br /><code>此函数使我们可以选择在转发列表的任何位置插入元素。此函数中的参数被复制到所需的位置。</code></li><li>emplace_after():<br />This function also does the same operation as above function but the elements are directly made without any copy operation.<br /><code>此函数也执行与上述函数相同的操作，但元素是直接生成的，没有任何复制操作。</code></li><li>erase_after():<br />This function is used to erase elements from a particular position in the forward list.<br /><code>此函数用于从转发列表中的特定位置删除元素。</code></li><li>remove() :<br />This function removes the particular element from the forward list mentioned in its argument.<br /><code>此函数从其参数中提到的转发列表中删除特定元素。</code></li><li>remove_if() :<br />This function removes according to the condition in its argument.<br /><code>此函数根据参数中的条件删除。</code></li><li>splice_after() :<br />This function transfers elements from one forward list to other.<br /><code>此函数用于将元素从一个转发列表传输到另一个转发列表。</code></li></ol><p>Some more methods of forward_list:</p><ol><li>front():<br />This function is used to reference the first element of the forward list container.<br /><code>此函数用于引用转发列表容器的第一个元素。</code></li><li>begin():<br />begin() function is used to return an iterator pointing to the first element of the forward list container.<br /><code>begin（）函数用于返回指向转发列表容器的第一个元素的迭代器。</code></li><li>end():<br />end() function is used to return an iterator pointing to the last element of the list container.<br /><code>end（）函数用于返回指向列表容器的最后一个元素的迭代器。</code></li><li>cbegin():<br />Returns a constant iterator pointing to the first element of the forward_list.<br /><code>返回指向前向列表的第一个元素的常量迭代器。</code></li><li>cend():<br />Returns a constant iterator pointing to the past-the-last element of the forward_list.<br /><code>返回指向前向列表最后一个元素的常量迭代器。</code></li><li>before_begin():<br />Returns a iterator which points to the position before the first element of the forward_list.<br /><code>返回一个迭代器，该迭代器指向转发列表的第一个元素之前的位置。</code></li><li>cbefore_begin():<br />Returns a constant random access iterator which points to the position before the first element of the forward_list.<br /><code>返回一个常量随机访问迭代器，该迭代器指向转发列表第一个元素之前的位置。</code></li><li>max_size():<br />Returns the maximum number of elements can be held by forward_list.<br /><code>返回转发列表可以容纳的最大元素数。</code></li><li>resize():<br />Changes the size of forward_list.<br /><code>更改转发列表的大小。</code></li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ code to demonstrate forward list&#x2F;&#x2F; and assign()#include&lt;iostream&gt;#include&lt;forward_list&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Declaring forward listforward_list&lt;int&gt; flist1;&#x2F;&#x2F; Declaring another forward listforward_list&lt;int&gt; flist2;&#x2F;&#x2F; Assigning values using assign()flist1.assign(&#123;1, 2, 3&#125;);&#x2F;&#x2F; Assigning repeating values using assign()&#x2F;&#x2F; 5 elements with value 10flist2.assign(5, 10);&#x2F;&#x2F; Displaying forward listscout &lt;&lt; &quot;The elements of first forward list are : &quot;;for (int&amp;a : flist1)cout &lt;&lt; a &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;cout &lt;&lt; &quot;The elements of second forward list are : &quot;;for (int&amp;b : flist2)cout &lt;&lt; b &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The elements of first forward list are : 1 2 3 --&gt;&lt;!--The elements of second forward list are : 10 10 10 10 10 --&gt;&#x2F;*-----------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of&#x2F;&#x2F; push_front(), emplace_front() and pop_front()#include&lt;iostream&gt;#include&lt;forward_list&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Initializing forward listforward_list&lt;int&gt; flist &#x3D; &#123;10, 20, 30, 40, 50&#125;;&#x2F;&#x2F; Inserting value using push_front()&#x2F;&#x2F; Inserts 60 at frontflist.push_front(60);&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after push_front operation : &quot;;for (int&amp;c : flist)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Inserting value using emplace_front()&#x2F;&#x2F; Inserts 70 at frontflist.emplace_front(70);&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after emplace_front operation : &quot;;for (int&amp;c : flist)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Deleting first value using pop_front()&#x2F;&#x2F; Pops 70flist.pop_front();&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after pop_front operation : &quot;;for (int&amp;c : flist)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The forward list after push_front operation : 60 10 20 30 40 50 --&gt;&lt;!--The forward list after emplace_front operation : 70 60 10 20 30 40 50 --&gt;&lt;!--The forward list after pop_front operation : 60 10 20 30 40 50--&gt;&#x2F;*------------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of&#x2F;&#x2F; insert_after(), emplace_after() and erase_after()#include&lt;iostream&gt;#include&lt;forward_list&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Initializing forward listforward_list&lt;int&gt; flist &#x3D; &#123;10, 20, 30&#125; ;&#x2F;&#x2F; Declaring a forward list iteratorforward_list&lt;int&gt;::iterator ptr;&#x2F;&#x2F; Inserting value using insert_after()&#x2F;&#x2F; starts insertion from second positionptr &#x3D; flist.insert_after(flist.begin(), &#123;1, 2, 3&#125;);&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after insert_after operation : &quot;;for (int&amp;c : flist)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Inserting value using emplace_after()&#x2F;&#x2F; inserts 2 after ptrptr &#x3D; flist.emplace_after(ptr,2);&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after emplace_after operation : &quot;;for (int&amp;c : flist)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Deleting value using erase.after Deleted 2&#x2F;&#x2F; after ptrptr &#x3D; flist.erase_after(ptr);&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after erase_after operation : &quot;;for (int&amp;c : flist)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The forward list after insert_after operation : 10 1 2 3 20 30 --&gt;&lt;!--The forward list after emplace_after operation : 10 1 2 3 2 20 30 --&gt;&lt;!--The forward list after erase_after operation : 10 1 2 3 2 30 --&gt;&#x2F;*------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of remove() and&#x2F;&#x2F; remove_if()#include&lt;iostream&gt;#include&lt;forward_list&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Initializing forward listforward_list&lt;int&gt; flist &#x3D; &#123;10, 20, 30, 25, 40, 40&#125;;&#x2F;&#x2F; Removing element using remove()&#x2F;&#x2F; Removes all occurrences of 40flist.remove(40);&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after remove operation : &quot;;for (int&amp;c : flist)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Removing according to condition. Removes&#x2F;&#x2F; elements greater than 20. Removes 25 and 30flist.remove_if([](int x)&#123; return x&gt;20;&#125;);&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after remove_if operation : &quot;;for (int&amp;c : flist)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The forward list after remove operation : 10 20 30 25 --&gt;&lt;!--The forward list after remove_if operation : 10 20 --&gt;&#x2F;*-------------------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate working of&#x2F;&#x2F; splice_after()#include&lt;iostream&gt;#include&lt;forward_list&gt; &#x2F;&#x2F; for splice_after()using namespace std;int main()&#123;&#x2F;&#x2F; Initializing forward listforward_list&lt;int&gt; flist1 &#x3D; &#123;10, 20, 30&#125;;&#x2F;&#x2F; Initializing second listforward_list&lt;int&gt; flist2 &#x3D; &#123;40, 50, 60&#125;;&#x2F;&#x2F; Shifting elements from first to second&#x2F;&#x2F; forward list after 1st positionflist2.splice_after(flist2.begin(),flist1);&#x2F;&#x2F; Displaying the forward listcout &lt;&lt; &quot;The forward list after splice_after operation : &quot;;for (int&amp;c : flist2)cout &lt;&lt; c &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The forward list after splice_after operation : 40 10 20 30 50 60 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><h2 id="2-span-idcontainer_adaptorscontainer-adaptorsspan"><a class="markdownIt-Anchor" href="#2-span-idcontainer_adaptorscontainer-adaptorsspan"></a> 2. <span id="Container_Adaptors">Container Adaptors</span> <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h2><ul><li><h3 id="span-idqueuequeuespan"><a class="markdownIt-Anchor" href="#span-idqueuequeuespan"></a> <span id="queue">queue</span></h3><div class="code-wrapper"><pre><code>Queues are a type of container adaptors which operate in a first in first out (FIFO) type of arrangement. Elements are inserted at the back (end) and are deleted from the front.队列是一种容器适配器，它以先进先出（FIFO）的方式进行操作。元素将在后面（末端）插入，并从前面删除。</code></pre></div><blockquote><p>The functions supported by queue are :</p><ol><li>empty():<br />Returns whether the queue is empty.<br /><code>返回队列是否为空。</code></li><li>size():<br />Returns the size of the queue.<br /><code>返回队列的大小。</code></li><li>queue::swap() in C++ STL:<br />Exchange the contents of two queues but the queues must be of same type, although sizes may differ.<br /><code>交换两个队列的内容，但队列必须是相同类型的，尽管大小可能不同。</code></li><li>queue::emplace() in C++ STL:<br />Insert a new element into the queue container, the new element is added to the end of the queue.<br /><code>将新元素插入队列容器中，将新元素添加到队列的末尾。</code></li><li>queue::front() and queue::back() in C++ STL:<br />front() function returns a reference to the first element of the queue. back() function returns a reference to the last element of the queue.<br /><code>front()函数的作用是：返回对队列第一个元素的引用。back()函数的作用是：返回对队列最后一个元素的引用。</code></li><li>push(g) and pop():<br />push() function adds the element ‘g’ at the end of the queue. pop() function deletes the first element of the queue.<br /><code>push（）函数在队列末尾添加元素“g”。pop()函数的作用是：删除队列的第一个元素。</code></li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; CPP code to illustrate&#x2F;&#x2F; Queue in Standard Template Library (STL)#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;void showq(queue &lt;int&gt; gq)&#123;queue &lt;int&gt; g &#x3D; gq;while (!g.empty())&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; g.front();g.pop();&#125;cout &lt;&lt; &#39;\n&#39;;&#125;int main()&#123;queue &lt;int&gt; gquiz;gquiz.push(10);gquiz.push(20);gquiz.push(30);cout &lt;&lt; &quot;The queue gquiz is : &quot;;showq(gquiz);cout &lt;&lt; &quot;\ngquiz.size() : &quot; &lt;&lt; gquiz.size();cout &lt;&lt; &quot;\ngquiz.front() : &quot; &lt;&lt; gquiz.front();cout &lt;&lt; &quot;\ngquiz.back() : &quot; &lt;&lt; gquiz.back();cout &lt;&lt; &quot;\ngquiz.pop() : &quot;;gquiz.pop();showq(gquiz);return 0;&#125;&lt;!--The queue gquiz is :     10    20    30--&gt;&lt;!--gquiz.size() : 3--&gt;&lt;!--gquiz.front() : 10--&gt;&lt;!--gquiz.back() : 30--&gt;&lt;!--gquiz.pop() :     20    30--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idpriority_queuepriority_queuespan"><a class="markdownIt-Anchor" href="#span-idpriority_queuepriority_queuespan"></a> <span id="priority_queue">priority_queue</span></h3><div class="code-wrapper"><pre><code>Priority queues are a type of container adapters, specifically designed such that the first element of the queue is the greatest of all elements in the queue and elements are in non increasing order(hence we can see that each element of the queue has a priority&#123;fixed order&#125;).优先级队列是一种容器适配器，专门设计为队列的第一个元素是队列中所有元素中最大的元素，元素的顺序不是递增的（因此我们可以看到队列的每个元素都有一个优先级&#123;fixed order&#125;）。</code></pre></div><blockquote><p>Methods of priority queue are:</p><ol><li>priority_queue::empty() in C++ STL:<br />empty() function returns whether the queue is empty.<br /><code>empty()函数的作用是：返回队列是否为空。</code></li><li>priority_queue::size() in C++ STL:<br />size() function returns the size of the queue.<br /><code>size()函数的作用是：返回队列的大小。</code></li><li>priority_queue::top() in C++ STL:<br />Returns a reference to the top most element of the queue.<br /><code>返回对队列最顶层元素的引用。</code></li><li>priority_queue::push() in C++ STL:<br />push(g) function adds the element ‘g’ at the end of the queue.<br /><code>push（g）函数在队列末尾添加元素“g”。</code></li><li>priority_queue::pop() in C++ STL:<br />pop() function deletes the first element of the queue.<br /><code>pop()函数的作用是：删除队列的第一个元素。</code></li><li>priority_queue::swap() in C++ STL:<br />This function is used to swap the contents of one priority queue with another priority queue of same type and size.<br /><code>此函数用于将一个优先级队列的内容与另一个类型和大小相同的优先级队列的内容交换。</code></li><li>priority_queue::emplace() in C++ STL:<br />This function is used to insert a new element into the priority queue container, the new element is added to the top of the priority queue.<br /><code>此函数用于将新元素插入优先级队列容器中，将新元素添加到优先级队列的顶部。</code></li><li>priority_queue value_type in C++ STL:<br />Represents the type of object stored as an element in a priority_queue. It acts as a synonym for the template parameter.<br /><code>表示存储为优先级队列中元素的对象类型。它充当模板参数的同义词。</code></li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; Note that by default C++ creates a max-heap&#x2F;&#x2F; for priority queue#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;void showpq(priority_queue &lt;int&gt; gq)&#123;priority_queue &lt;int&gt; g &#x3D; gq;while (!g.empty())&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; g.top();g.pop();&#125;cout &lt;&lt; &#39;\n&#39;;&#125;int main ()&#123;priority_queue &lt;int&gt; gquiz;gquiz.push(10);gquiz.push(30);gquiz.push(20);gquiz.push(5);gquiz.push(1);cout &lt;&lt; &quot;The priority queue gquiz is : &quot;;showpq(gquiz);cout &lt;&lt; &quot;\ngquiz.size() : &quot; &lt;&lt; gquiz.size();cout &lt;&lt; &quot;\ngquiz.top() : &quot; &lt;&lt; gquiz.top();cout &lt;&lt; &quot;\ngquiz.pop() : &quot;;gquiz.pop();showpq(gquiz);return 0;&#125;&lt;!--The priority queue gquiz is :     30    20    10    5    1--&gt;&lt;!--gquiz.size() : 5--&gt;&lt;!--gquiz.top() : 30--&gt;&lt;!--gquiz.pop() :     20    10    5    1--&gt;&#x2F;*-------------------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ program to demonstrate min heap#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;void showpq(priority_queue &lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; gq)&#123;priority_queue &lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; g &#x3D; gq;while (!g.empty())&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; g.top();g.pop();&#125;cout &lt;&lt; &#39;\n&#39;;&#125;int main ()&#123;priority_queue &lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; gquiz;gquiz.push(10);gquiz.push(30);gquiz.push(20);gquiz.push(5);gquiz.push(1);cout &lt;&lt; &quot;The priority queue gquiz is : &quot;;showpq(gquiz);cout &lt;&lt; &quot;\ngquiz.size() : &quot; &lt;&lt; gquiz.size();cout &lt;&lt; &quot;\ngquiz.top() : &quot; &lt;&lt; gquiz.top();cout &lt;&lt; &quot;\ngquiz.pop() : &quot;;gquiz.pop();showpq(gquiz);return 0;&#125;&lt;!--The priority queue gquiz is :     1    5    10    20    30--&gt;&lt;!--gquiz.size() : 5--&gt;&lt;!--gquiz.top() : 1--&gt;&lt;!--gquiz.pop() :     5    10    20    30--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idstackstackspan"><a class="markdownIt-Anchor" href="#span-idstackstackspan"></a> <span id="stack">stack</span></h3><div class="code-wrapper"><pre><code>Stacks are a type of container adaptors with LIFO(Last In First Out) type of working, where a new element is added at one end and (top) an element is removed from that end only.堆栈是一种具有后进先出（后进先出）工作方式的容器适配器，在这种情况下，在一端添加新元素，而只从该端移除元素。</code></pre></div><blockquote><p>The functions associated with stack are:</p><ol><li>empty():<br />Returns whether the stack is empty – Time Complexity : O(1)<br /><code>返回堆栈是否为空-时间复杂度：O（1）</code></li><li>size():<br />Returns the size of the stack – Time Complexity : O(1)<br /><code>返回堆栈的大小-时间复杂性：O（1）</code></li><li>top():<br />Returns a reference to the top most element of the stack – Time Complexity : O(1)<br /><code>返回对堆栈最顶层元素的引用-时间复杂性：O（1）</code></li><li>push(g):<br />Adds the element ‘g’ at the top of the stack – Time Complexity : O(1)<br /><code>在堆栈顶部添加元素“g”–时间复杂性：O（1）</code></li><li>pop():<br />Deletes the top most element of the stack – Time Complexity : O(1)<br /><code>删除堆栈最上面的元素-时间复杂性：O（1）</code></li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; CPP program to demonstrate working of STL stack#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;void showstack(stack &lt;int&gt; s)&#123;while (!s.empty())&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; s.top();s.pop();&#125;cout &lt;&lt; &#39;\n&#39;;&#125;int main ()&#123;stack &lt;int&gt; s;s.push(10);s.push(30);s.push(20);s.push(5);s.push(1);cout &lt;&lt; &quot;The stack is : &quot;;showstack(s);cout &lt;&lt; &quot;\ns.size() : &quot; &lt;&lt; s.size();cout &lt;&lt; &quot;\ns.top() : &quot; &lt;&lt; s.top();cout &lt;&lt; &quot;\ns.pop() : &quot;;s.pop();showstack(s);return 0;&#125;&lt;!--The stack is :     1    5    20    30    10--&gt;&lt;!--s.size() : 5--&gt;&lt;!--s.top() : 1--&gt;&lt;!--s.pop() :     5    20    30    10--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><h2 id="3-span-idassociative_containersassociative-containersspan"><a class="markdownIt-Anchor" href="#3-span-idassociative_containersassociative-containersspan"></a> 3. <span id="Associative_Containers">Associative Containers</span> <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h2><ul><li><h3 id="span-idsetsetspan"><a class="markdownIt-Anchor" href="#span-idsetsetspan"></a> <span id="set">set</span></h3><div class="code-wrapper"><pre><code>Sets are a type of associative containers in which each element has to be unique, because the value of the element identifies it. The value of the element cannot be modified once it is added to the set, though it is possible to remove and add the modified value of that element.</code></pre></div><blockquote><p>Some basic functions associated with Set:</p><ol><li>begin() – Returns an iterator to the first element in the set.</li><li>end() – Returns an iterator to the theoretical element that follows last element in the set.</li><li>size() – Returns the number of elements in the set.</li><li>max_size() – Returns the maximum number of elements that the set can hold.</li><li>empty() – Returns whether the set is empty.</li></ol><p>Methods of set:</p><ol><li>begin() – Returns an iterator to the first element in the set.</li><li>end() – Returns an iterator to the theoretical element that follows last element in the set.</li><li>rbegin()– Returns a reverse iterator pointing to the last element in the container.</li><li>rend()– Returns a reverse iterator pointing to the theoretical element right before the first element in the set container.</li><li>crbegin()– Returns a constant iterator pointing to the last element in the container.</li><li>crend() – Returns a constant iterator pointing to the position just before the first element in the container.</li><li>cbegin()– Returns a constant iterator pointing to the first element in the container.</li><li>cend() – Returns a constant iterator pointing to the position past the last element in the container.</li><li>size() – Returns the number of elements in the set.</li><li>max_size() – Returns the maximum number of elements that the set can hold.</li><li>empty() – Returns whether the set is empty.</li><li>insert(const g) – Adds a new element ‘g’ to the set.</li><li>iterator insert (iterator position, const g) – Adds a new element ‘g’ at the position pointed by iterator.</li><li>erase(iterator position) – Removes the element at the position pointed by the iterator.</li><li>erase(const g)– Removes the value ‘g’ from the set.</li><li>clear() – Removes all the elements from the set.</li><li>key_comp() / value_comp() – Returns the object that determines how the elements in the set are ordered (‘&lt;‘ by default).</li><li>find(const g) – Returns an iterator to the element ‘g’ in the set if found, else returns the iterator to end.</li><li>count(const g) – Returns 1 or 0 based on the element ‘g’ is present in the set or not.</li><li>lower_bound(const g) – Returns an iterator to the first element that is equivalent to ‘g’ or definitely will not go before the element ‘g’ in the set.</li><li>upper_bound(const g) – Returns an iterator to the first element that is equivalent to ‘g’ or definitely will go after the element ‘g’ in the set.</li><li>equal_range()– The function returns an iterator of pairs. (key_comp). The pair refers to the range that includes all the elements in the container which have a key equivalent to k.</li><li>emplace()– This function is used to insert a new element into the set container, only if the element to be inserted is unique and does not already exists in the set.</li><li>emplace_hint()– Returns an iterator pointing to the position where the insertion is done. If the element passed in the parameter already exists, then it returns an iterator pointing to the position where the existing element is.</li><li>swap()– This function is used to exchange the contents of two sets but the sets must be of same type, although sizes may differ.</li><li>operator= – The ‘=’ is an operator in C++ STL which copies (or moves) a set to another set and set::operator= is the corresponding operator function.</li><li>get_allocator()– Returns the copy of the allocator object associated with the set.</li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;set&gt;#include &lt;iterator&gt;using namespace std;int main()&#123;&#x2F;&#x2F; empty set containerset &lt;int, greater &lt;int&gt; &gt; s1;&#x2F;&#x2F; insert elements in random orders1.insert(40);s1.insert(30);s1.insert(60);s1.insert(20);s1.insert(50);s1.insert(50); &#x2F;&#x2F; only one 50 will be added to the sets1.insert(10);&#x2F;&#x2F; printing set s1set &lt;int, greater &lt;int&gt; &gt; :: iterator itr;cout &lt;&lt; &quot;\nThe set s1 is : &quot;;for (itr &#x3D; s1.begin(); itr !&#x3D; s1.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; *itr;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; assigning the elements from s1 to s2set &lt;int&gt; s2(s1.begin(), s1.end());&#x2F;&#x2F; print all elements of the set s2cout &lt;&lt; &quot;\nThe set s2 after assign from s1 is : &quot;;for (itr &#x3D; s2.begin(); itr !&#x3D; s2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; *itr;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; remove all elements up to 30 in s2cout &lt;&lt; &quot;\ns2 after removal of elements less than 30 : &quot;;s2.erase(s2.begin(), s2.find(30));for (itr &#x3D; s2.begin(); itr !&#x3D; s2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; *itr;&#125;&#x2F;&#x2F; remove element with value 50 in s2int num;num &#x3D; s2.erase (50);cout &lt;&lt; &quot;\ns2.erase(50) : &quot;;cout &lt;&lt; num &lt;&lt; &quot; removed \t&quot; ;for (itr &#x3D; s2.begin(); itr !&#x3D; s2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; *itr;&#125;cout &lt;&lt; endl;&#x2F;&#x2F;lower bound and upper bound for set s1cout &lt;&lt; &quot;s1.lower_bound(40) : &quot;&lt;&lt; *s1.lower_bound(40) &lt;&lt; endl;cout &lt;&lt; &quot;s1.upper_bound(40) : &quot;&lt;&lt; *s1.upper_bound(40) &lt;&lt; endl;&#x2F;&#x2F;lower bound and upper bound for set s2cout &lt;&lt; &quot;s2.lower_bound(40) : &quot;&lt;&lt; *s2.lower_bound(40) &lt;&lt; endl;cout &lt;&lt; &quot;s2.upper_bound(40) : &quot;&lt;&lt; *s2.upper_bound(40) &lt;&lt; endl;return 0;&#125;&lt;!--The set s1 is :      60    50    40    30    20    10--&gt;&lt;!--The set s2 after assign from s1 is : 10      20    30    40    50    60--&gt;&lt;!--s2 after removal of elements less than 30 : 30    40    50    60--&gt;&lt;!--s2.erase(50) : 1 removed     30    40    60--&gt;&lt;!--s1.lower_bound(40) : 40--&gt;&lt;!--s1.upper_bound(40) : 30--&gt;&lt;!--s2.lower_bound(40) : 40--&gt;&lt;!--s2.upper_bound(40) : 60--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idmultisetmultisetspan"><a class="markdownIt-Anchor" href="#span-idmultisetmultisetspan"></a> <span id="multiset">multiset</span></h3><div class="code-wrapper"><pre><code>Multisets are a type of associative containers similar to set, with an exception that multiple elements can have same values.</code></pre></div><blockquote><p>Some Basic Functions associated with multiset:</p><ol><li>begin() – Returns an iterator to the first element in the multiset</li><li>end() – Returns an iterator to the theoretical element that follows last element in the multiset</li><li>size() – Returns the number of elements in the multiset</li><li>max_size() – Returns the maximum number of elements that the multiset can hold</li><li>empty() – Returns whether the multiset is empty</li></ol><p>List of functions of Multiset:</p><ol><li>begin() – Returns an iterator to the first element in the multiset.</li><li>end() – Returns an iterator to the theoretical element that follows last element in the multiset.</li><li>size() – Returns the number of elements in the multiset.</li><li>max_size()– Returns the maximum number of elements that the multiset can hold.</li><li>empty() – Returns whether the multiset is empty.</li><li>pair insert(const g) – Adds a new element ‘g’ to the multiset.</li><li>iterator insert (iterator position,const g) – Adds a new element ‘g’ at the position pointed by iterator.</li><li>erase(iterator position)– Removes the element at the position pointed by the iterator.</li><li>erase(const g)– Removes the value ‘g’ from the multiset.</li><li>clear()– Removes all the elements from the multiset.</li><li>key_comp() / value_comp()– Returns the object that determines how the elements in the multiset are ordered (‘&lt;’ by default).</li><li>find(const g)– Returns an iterator to the element ‘g’ in the multiset if found, else returns the iterator to end.</li><li>count(const g)– Returns the number of matches to element ‘g’ in the multiset.</li><li>lower_bound(const g)– Returns an iterator to the first element that is equivalent to ‘g’ or definitely will not go before the element ‘g’ in the multiset.</li><li>upper_bound(const g)– Returns an iterator to the first element that is equivalent to ‘g’ or definitely will go after the element ‘g’ in the multiset.</li><li>multiset::swap()– This function is used to exchange the contents of two multisets but the sets must be of same type, although sizes may differ.</li><li>multiset::operator=– This operator is used to assign new contents to the container by replacing the existing contents.</li><li>multiset::emplace()– This function is used to insert a new element into the multiset container.</li><li>multiset equal_range()– Returns an iterator of pairs. The pair refers to the range that includes all the elements in the container which have a key equivalent to k.</li><li>multiset::emplace_hint() – Inserts a new element in the multiset.</li><li>multiset::rbegin()– Returns a reverse iterator pointing to the last element in the multiset container.</li><li>multiset::rend()– Returns a reverse iterator pointing to the theoretical element right before the first element in the multiset container.</li><li>multiset::cbegin()– Returns a constant iterator pointing to the first element in the container.</li><li>multiset::cend()– Returns a constant iterator pointing to the position past the last element in the container.</li><li>multiset::crbegin()– Returns a constant reverse iterator pointing to the last element in the container.</li><li>multiset::crend()– Returns a constant reverse iterator pointing to the position just before the first element in the container.</li><li>multiset::get_allocator()– Returns a copy of the allocator object associated with the multiset.</li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;set&gt;#include &lt;iterator&gt;using namespace std;int main()&#123;&#x2F;&#x2F; empty multiset containermultiset &lt;int, greater &lt;int&gt; &gt; gquiz1;&#x2F;&#x2F; insert elements in random ordergquiz1.insert(40);gquiz1.insert(30);gquiz1.insert(60);gquiz1.insert(20);gquiz1.insert(50);gquiz1.insert(50); &#x2F;&#x2F; 50 will be added again to the multiset unlike setgquiz1.insert(10);&#x2F;&#x2F; printing multiset gquiz1multiset &lt;int, greater &lt;int&gt; &gt; :: iterator itr;cout &lt;&lt; &quot;\nThe multiset gquiz1 is : &quot;;for (itr &#x3D; gquiz1.begin(); itr !&#x3D; gquiz1.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; *itr;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; assigning the elements from gquiz1 to gquiz2multiset &lt;int&gt; gquiz2(gquiz1.begin(), gquiz1.end());&#x2F;&#x2F; print all elements of the multiset gquiz2cout &lt;&lt; &quot;\nThe multiset gquiz2 after assign from gquiz1 is : &quot;;for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; *itr;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; remove all elements up to element with value 30 in gquiz2cout &lt;&lt; &quot;\ngquiz2 after removal of elements less than 30 : &quot;;gquiz2.erase(gquiz2.begin(), gquiz2.find(30));for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; *itr;&#125;&#x2F;&#x2F; remove all elements with value 50 in gquiz2int num;num &#x3D; gquiz2.erase(50);cout &lt;&lt; &quot;\ngquiz2.erase(50) : &quot;;cout &lt;&lt; num &lt;&lt; &quot; removed \t&quot; ;for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; *itr;&#125;cout &lt;&lt; endl;&#x2F;&#x2F;lower bound and upper bound for multiset gquiz1cout &lt;&lt; &quot;gquiz1.lower_bound(40) : &quot;&lt;&lt; *gquiz1.lower_bound(40) &lt;&lt; endl;cout &lt;&lt; &quot;gquiz1.upper_bound(40) : &quot;&lt;&lt; *gquiz1.upper_bound(40) &lt;&lt; endl;&#x2F;&#x2F;lower bound and upper bound for multiset gquiz2cout &lt;&lt; &quot;gquiz2.lower_bound(40) : &quot;&lt;&lt; *gquiz2.lower_bound(40) &lt;&lt; endl;cout &lt;&lt; &quot;gquiz2.upper_bound(40) : &quot;&lt;&lt; *gquiz2.upper_bound(40) &lt;&lt; endl;return 0;&#125;&lt;!--The multiset gquiz1 is :  60     50    50    40    30    20    10--&gt;&lt;!--The multiset gquiz2 after assign from gquiz1 is :  10     20    30    40    50    50    60--&gt;&lt;!--gquiz2 after removal of elements less than 30 :  30    40    50    50    60--&gt;&lt;!--gquiz2.erase(50) : 2 removed         30    40    60--&gt;&lt;!--gquiz1.lower_bound(40) : 40--&gt;&lt;!--gquiz1.upper_bound(40) : 30--&gt;&lt;!--gquiz2.lower_bound(40) : 40--&gt;&lt;!--gquiz2.upper_bound(40) : 60--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idmapmapspan"><a class="markdownIt-Anchor" href="#span-idmapmapspan"></a> <span id="map">map</span></h3>Maps are associative containers that store elements in a mapped fashion. Each element has a key value and a mapped value. No two mapped values can have same key values.</li></ul><blockquote><p>Some basic functions associated with Map:</p><ol><li>begin() – Returns an iterator to the first element in the map</li><li>end() – Returns an iterator to the theoretical element that follows last element in the map</li><li>size() – Returns the number of elements in the map</li><li>max_size() – Returns the maximum number of elements that the map can hold</li><li>empty() – Returns whether the map is empty</li><li>pair insert(keyvalue, mapvalue) – Adds a new element to the map</li><li>erase(iterator position) – Removes the element at the position pointed by the iterator</li><li>erase(const g)– Removes the key value ‘g’ from the map</li><li>clear() – Removes all the elements from the map</li></ol><p>List of all functions of Map:</p><ol><li>map insert() in C++ STL– Insert elements with a particular key in the map container. .</li><li>map count() function in C++ STL– Returns the number of matches to element with key value ‘g’ in the map.</li><li>map equal_range() in C++ STL– Returns an iterator of pairs. The pair refers to the bounds of a range that includes all the elements in the container which have a key equivalent to k.</li><li>map erase() function in C++ STL– Used to erase element from the container.</li><li>map rend() function in C++ STL– Returns a reverse iterator pointing to the theoretical element right before the first key-value pair in the map(which is considered its reverse end).</li><li>map rbegin() function in C++ STL– Returns a reverse iterator which points to the last element of the map.</li><li>map find() function in C++ STL– Returns an iterator to the element with key value ‘g’ in the map if found, else returns the iterator to end.</li><li>map crbegin() and crend() function in C++ STL– crbegin() returns a constant reverse iterator referring to the last element in the map container. crend() returns a constant reverse iterator pointing to the theoretical element before the first element in the map.</li><li>map cbegin() and cend() function in C++ STL– cbegin() returns a constant iterator referring to the first element in the map container. cend() returns a constant iterator pointing to the theoretical element that follows last element in the multimap.</li><li>map emplace() in C++ STL– Inserts the key and its element in the map container.</li><li>map max_size() in C++ STL– Returns the maximum number of elements a map container can hold.</li><li>map upper_bound() function in C++ STL– Returns an iterator to the first element that is equivalent to mapped value with key value ‘g’ or definitely will go after the element with key value ‘g’ in the map</li><li>map operator= in C++ STL– Assigns contents of a container to a different container, replacing its current content.</li><li>map lower_bound() function in C++ STL– Returns an iterator to the first element that is equivalent to mapped value with key value ‘g’ or definitely will not go before the element with key value ‘g’ in the map.</li><li>map emplace_hint() function in C++ STL– Inserts the key and its element in the map container with a given hint.</li><li>map value_comp() in C++ STL– Returns the object that determines how the elements in the map are ordered (‘&lt;’ by default).</li><li>map key_comp() function in C++ STL– Returns the object that determines how the elements in the map are ordered (‘&lt;’ by default).</li><li>map::size() in C++ STL– Returns the number of elements in the map.</li><li>map::empty() in C++ STL– Returns whether the map is empty.</li><li>map::begin() and end() in C++ STL– begin() returns an iterator to the first element in the map. end() returns an iterator to the theoretical element that follows last element in the map</li><li>map::operator[] in C++ STL– This operator is used to reference the element present at position given inside the operator.</li><li>map::clear() in C++ STL– Removes all the elements from the map.</li><li>map::at() and map::swap() in C++ STL– at() function is used to return the reference to the element associated with the key k. swap() function is used to exchange the contents of two maps but the maps must be of same type, although sizes may differ.</li></ol></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;iterator&gt;#include &lt;map&gt;using namespace std;int main()&#123;&#x2F;&#x2F; empty map containermap&lt;int, int&gt; gquiz1;&#x2F;&#x2F; insert elements in random ordergquiz1.insert(pair&lt;int, int&gt;(1, 40));gquiz1.insert(pair&lt;int, int&gt;(2, 30));gquiz1.insert(pair&lt;int, int&gt;(3, 60));gquiz1.insert(pair&lt;int, int&gt;(4, 20));gquiz1.insert(pair&lt;int, int&gt;(5, 50));gquiz1.insert(pair&lt;int, int&gt;(6, 50));gquiz1.insert(pair&lt;int, int&gt;(7, 10));&#x2F;&#x2F; printing map gquiz1map&lt;int, int&gt;::iterator itr;cout &lt;&lt; &quot;\nThe map gquiz1 is : \n&quot;;cout &lt;&lt; &quot;\tKEY\tELEMENT\n&quot;;for (itr &#x3D; gquiz1.begin(); itr !&#x3D; gquiz1.end(); ++itr) &#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;first&lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;second &lt;&lt; &#39;\n&#39;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; assigning the elements from gquiz1 to gquiz2map&lt;int, int&gt; gquiz2(gquiz1.begin(), gquiz1.end());&#x2F;&#x2F; print all elements of the map gquiz2cout &lt;&lt; &quot;\nThe map gquiz2 after&quot;&lt;&lt; &quot; assign from gquiz1 is : \n&quot;;cout &lt;&lt; &quot;\tKEY\tELEMENT\n&quot;;for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr) &#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;first&lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;second &lt;&lt; &#39;\n&#39;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; remove all elements up to&#x2F;&#x2F; element with key&#x3D;3 in gquiz2cout &lt;&lt; &quot;\ngquiz2 after removal of&quot;&quot; elements less than key&#x3D;3 : \n&quot;;cout &lt;&lt; &quot;\tKEY\tELEMENT\n&quot;;gquiz2.erase(gquiz2.begin(), gquiz2.find(3));for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr) &#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;first&lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;second &lt;&lt; &#39;\n&#39;;&#125;&#x2F;&#x2F; remove all elements with key &#x3D; 4int num;num &#x3D; gquiz2.erase(4);cout &lt;&lt; &quot;\ngquiz2.erase(4) : &quot;;cout &lt;&lt; num &lt;&lt; &quot; removed \n&quot;;cout &lt;&lt; &quot;\tKEY\tELEMENT\n&quot;;for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr) &#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;first&lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;second &lt;&lt; &#39;\n&#39;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; lower bound and upper bound for map gquiz1 key &#x3D; 5cout &lt;&lt; &quot;gquiz1.lower_bound(5) : &quot;&lt;&lt; &quot;\tKEY &#x3D; &quot;;cout &lt;&lt; gquiz1.lower_bound(5)-&gt;first &lt;&lt; &#39;\t&#39;;cout &lt;&lt; &quot;\tELEMENT &#x3D; &quot;&lt;&lt; gquiz1.lower_bound(5)-&gt;second &lt;&lt; endl;cout &lt;&lt; &quot;gquiz1.upper_bound(5) : &quot;&lt;&lt; &quot;\tKEY &#x3D; &quot;;cout &lt;&lt; gquiz1.upper_bound(5)-&gt;first &lt;&lt; &#39;\t&#39;;cout &lt;&lt; &quot;\tELEMENT &#x3D; &quot;&lt;&lt; gquiz1.upper_bound(5)-&gt;second &lt;&lt; endl;return 0;&#125;&lt;!--The map gquiz1 is : --&gt;&lt;!--    KEY    ELEMENT--&gt;&lt;!--    1    40--&gt;&lt;!--    2    30--&gt;&lt;!--    3    60--&gt;&lt;!--    4    20--&gt;&lt;!--    5    50--&gt;&lt;!--    6    50--&gt;&lt;!--    7    10--&gt;&lt;!--The map gquiz2 after assign from gquiz1 is : --&gt;&lt;!--    KEY    ELEMENT--&gt;&lt;!--    1    40--&gt;&lt;!--    2    30--&gt;&lt;!--    3    60--&gt;&lt;!--    4    20--&gt;&lt;!--    5    50--&gt;&lt;!--    6    50--&gt;&lt;!--    7    10--&gt;&lt;!--gquiz2 after removal of elements less than key&#x3D;3 : --&gt;&lt;!--    KEY    ELEMENT--&gt;&lt;!--    3    60--&gt;&lt;!--    4    20--&gt;&lt;!--    5    50--&gt;&lt;!--    6    50--&gt;&lt;!--    7    10--&gt;&lt;!--gquiz2.erase(4) : 1 removed --&gt;&lt;!--    KEY    ELEMENT--&gt;&lt;!--    3    60--&gt;&lt;!--    5    50--&gt;&lt;!--    6    50--&gt;&lt;!--    7    10--&gt;&lt;!--gquiz1.lower_bound(5) :     KEY &#x3D; 5        ELEMENT &#x3D; 50--&gt;&lt;!--gquiz1.upper_bound(5) :     KEY &#x3D; 6        ELEMENT &#x3D; 50--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idmultimapmultimapspan"><a class="markdownIt-Anchor" href="#span-idmultimapmultimapspan"></a> <span id="multimap">multimap</span></h3><div class="code-wrapper"><pre><code>Multimap is similar to map with an addition that multiple elements can have same keys. Also, it is NOT required that the key value and mapped value pair has to be unique in this case.</code></pre></div><blockquote><p>Some Basic Functions associated with multimap:</p><ol><li>begin() – Returns an iterator to the first element in the multimap</li><li>end() – Returns an iterator to the theoretical element that follows last element in the multimap</li><li>size() – Returns the number of elements in the multimap</li><li>max_size() – Returns the maximum number of elements that the multimap can hold</li><li>empty() – Returns whether the multimap is empty</li><li>pair&lt;int,int&gt; insert(keyvalue,multimapvalue) – Adds a new element to the multimap</li></ol><p>List of Functions of Multimap:</p><ol><li>multimap::operator= in C++ STL– It is used to assign new contents to the container by replacing the existing contents.</li><li>multimap::crbegin() and multimap::crend() in C++ STL– crbegin() returns a constant reverse iterator referring to the last element in the multimap container. crend() returns a constant reverse iterator pointing to the theoretical element before the first element in the multimap.</li><li>multimap::emplace_hint() in C++ STL– Inserts the key and its element in the multimap container with a given hint.</li><li>multimap clear() function in C++ STL– Removes all the elements from the multimap.</li><li>multimap empty() function in C++ STL– Returns whether the multimap is empty.</li><li>multimap maxsize() in C++ STL– Returns the maximum number of elements a multimap container can hold.</li><li>multimap value_comp() function in C++ STL– Returns the object that determines how the elements in the multimap are ordered (‘&lt;‘ by default)</li><li>multimap rend in C++ STL– Returns a reverse iterator pointing to the theoretical element preceding to the first element of the multimap container.</li><li>multimap::cbegin() and multimap::cend() in C++ STL– cbegin() returns a constant iterator referring to the first element in the multimap container. cend() returns a constant iterator pointing to the theoretical element that follows last element in the multimap.</li><li>multimap::swap() in C++ STL– Swap the contents of one multimap with another multimap of same type and size.</li><li>multimap rbegin in C++ STL– Returns an iterator pointing to the last element of the container.</li><li>multimap size() function in C++ STL– Returns the number of elements in the multimap container.</li><li>multimap::emplace() in C++ STL– Inserts the key and its element in the multimap container.</li><li>multimap::begin() and multimap::end() in C++ STL– begin() returns an iterator referring to the first element in the multimap container. end() returns an iterator to the theoretical element that follows last element in the multimap.</li><li>multimap upper_bound() function in C++ STL– Returns an iterator to the first element that is equivalent to multimapped value with key value ‘g’ or definitely will go after the element with key value ‘g’ in the multimap.</li><li>multimap::count() in C++ STL– Returns the number of matches to element with key value ‘g’ in the multimap.</li><li>multimap::erase() in C++ STL– Removes the key value from the multimap.</li><li>multimap::find() in C++ STL– Returns an iterator to the element with key value ‘g’ in the multimap if found, else returns the iterator to end.</li><li>multimap equal_range() in C++ STL– Returns an iterator of pairs. The pair refers to the bounds of a range that includes all the elements in the container which have a key equivalent to k.</li><li>multimap insert() in C++ STL– Used to insert elements in the multimap container.</li><li>multimap lower_bound() function in C++ STL– Returns an iterator to the first element that is equivalent to multimapped value with key value ‘g’ or definitely will not go before the element with key value ‘g’ in the multimap.</li><li>multimap key_comp() in C++ STL– Returns the object that determines how the elements in the multimap are ordered (‘&lt;‘ by default).</li></ol></blockquote></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;iterator&gt;using namespace std;int main()&#123;multimap &lt;int, int&gt; gquiz1; &#x2F;&#x2F; empty multimap container&#x2F;&#x2F; insert elements in random ordergquiz1.insert(pair &lt;int, int&gt; (1, 40));gquiz1.insert(pair &lt;int, int&gt; (2, 30));gquiz1.insert(pair &lt;int, int&gt; (3, 60));gquiz1.insert(pair &lt;int, int&gt; (4, 20));gquiz1.insert(pair &lt;int, int&gt; (5, 50));gquiz1.insert(pair &lt;int, int&gt; (6, 50));gquiz1.insert(pair &lt;int, int&gt; (6, 10));&#x2F;&#x2F; printing multimap gquiz1multimap &lt;int, int&gt; :: iterator itr;cout &lt;&lt; &quot;\nThe multimap gquiz1 is : \n&quot;;cout &lt;&lt; &quot;\tKEY\tELEMENT\n&quot;;for (itr &#x3D; gquiz1.begin(); itr !&#x3D; gquiz1.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;first&lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;second &lt;&lt; &#39;\n&#39;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; assigning the elements from gquiz1 to gquiz2multimap &lt;int, int&gt; gquiz2(gquiz1.begin(),gquiz1.end());&#x2F;&#x2F; print all elements of the multimap gquiz2cout &lt;&lt; &quot;\nThe multimap gquiz2 after assign from gquiz1 is : \n&quot;;cout &lt;&lt; &quot;\tKEY\tELEMENT\n&quot;;for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;first&lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;second &lt;&lt; &#39;\n&#39;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; remove all elements up to element with value 30 in gquiz2cout &lt;&lt; &quot;\ngquiz2 after removal of elements less than key&#x3D;3 : \n&quot;;cout &lt;&lt; &quot;\tKEY\tELEMENT\n&quot;;gquiz2.erase(gquiz2.begin(), gquiz2.find(3));for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;first&lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;second &lt;&lt; &#39;\n&#39;;&#125;&#x2F;&#x2F; remove all elements with key &#x3D; 4int num;num &#x3D; gquiz2.erase(4);cout &lt;&lt; &quot;\ngquiz2.erase(4) : &quot;;cout &lt;&lt; num &lt;&lt; &quot; removed \n&quot; ;cout &lt;&lt; &quot;\tKEY\tELEMENT\n&quot;;for (itr &#x3D; gquiz2.begin(); itr !&#x3D; gquiz2.end(); ++itr)&#123;cout &lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;first&lt;&lt; &#39;\t&#39; &lt;&lt; itr-&gt;second &lt;&lt; &#39;\n&#39;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F;lower bound and upper bound for multimap gquiz1 key &#x3D; 5cout &lt;&lt; &quot;gquiz1.lower_bound(5) : &quot; &lt;&lt; &quot;\tKEY &#x3D; &quot;;cout &lt;&lt; gquiz1.lower_bound(5)-&gt;first &lt;&lt; &#39;\t&#39;;cout &lt;&lt; &quot;\tELEMENT &#x3D; &quot; &lt;&lt; gquiz1.lower_bound(5)-&gt;second &lt;&lt; endl;cout &lt;&lt; &quot;gquiz1.upper_bound(5) : &quot; &lt;&lt; &quot;\tKEY &#x3D; &quot;;cout &lt;&lt; gquiz1.upper_bound(5)-&gt;first &lt;&lt; &#39;\t&#39;;cout &lt;&lt; &quot;\tELEMENT &#x3D; &quot; &lt;&lt; gquiz1.upper_bound(5)-&gt;second &lt;&lt; endl;return 0;&#125;&lt;!--The multimap gquiz1 is : --&gt;&lt;!--    KEY    ELEMENT--&gt;&lt;!--    1    40--&gt;&lt;!--    2    30--&gt;&lt;!--    3    60--&gt;&lt;!--    4    20--&gt;&lt;!--    5    50--&gt;&lt;!--    6    50--&gt;&lt;!--    6    10--&gt;&lt;!--The multimap gquiz2 after assign from gquiz1 is : --&gt;&lt;!--    KEY    ELEMENT--&gt;&lt;!--    1    40--&gt;&lt;!--    2    30--&gt;&lt;!--    3    60--&gt;&lt;!--    4    20--&gt;&lt;!--    5    50--&gt;&lt;!--    6    50--&gt;&lt;!--    6    10--&gt;&lt;!--gquiz2 after removal of elements less than key&#x3D;3 : --&gt;&lt;!--    KEY    ELEMENT--&gt;&lt;!--    3    60--&gt;&lt;!--    4    20--&gt;&lt;!--    5    50--&gt;&lt;!--    6    50--&gt;&lt;!--    6    10--&gt;&lt;!--gquiz2.erase(4) : 1 removed --&gt;&lt;!--    KEY    ELEMENT--&gt;&lt;!--    3    60--&gt;&lt;!--    5    50--&gt;&lt;!--    6    50--&gt;&lt;!--    6    10--&gt;&lt;!--gquiz1.lower_bound(5) :     KEY &#x3D; 5        ELEMENT &#x3D; 50--&gt;&lt;!--gquiz1.upper_bound(5) :     KEY &#x3D; 6        ELEMENT &#x3D; 50--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><h2 id="4-span-idunordered_associative_containersunordered-associative-containersspan"><a class="markdownIt-Anchor" href="#4-span-idunordered_associative_containersunordered-associative-containersspan"></a> 4. <span id="Unordered_Associative_Containers">Unordered Associative Containers</span> <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h2><ul><li><h3 id="span-idunordered_setunordered_set-introduced-in-c11span"><a class="markdownIt-Anchor" href="#span-idunordered_setunordered_set-introduced-in-c11span"></a> <span id="unordered_set">unordered_set (Introduced in C++11)</span></h3><p>An unordered_set is implemented using a hash table where keys are hashed into indices of a hash table so that the insertion is always randomized. All operations on the unordered_set takes constant time O(1) on an average which can go up to linear time O(n) in worst case which depends on the internally used hash function, but practically they perform very well and generally provide a constant time lookup operation.<br />The unordered_set can contain key of any type – predefined or user-defined data structure but when we define key of type user define the type, we need to specify our comparison function according to which keys will be compared.</p><p>Sets vs Unordered Sets<br />Set is an ordered sequence of unique keys whereas unordered_set is a set in which key can be stored in any order, so unordered. Set is implemented as a balanced tree structure that is why it is possible to maintain order between the elements (by specific tree traversal). The time complexity of set operations is O(log n) while for unordered_set, it is O(1).</p><p>Methods on Unordered Sets:<br />For unordered_set many functions are defined among which most users are the size and empty for capacity, find for searching a key, insert and erase for modification.<br />The Unordered_set allows only unique keys, for duplicate keys unordered_multiset should be used.</p><p>Example of declaration, find, insert and iteration in unordered_set is given below :</p></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to demonstrate various function of unordered_set#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;&#x2F;&#x2F; declaring set for storing string data-typeunordered_set &lt;string&gt; stringSet ;&#x2F;&#x2F; inserting various string, same string will be stored&#x2F;&#x2F; once in setstringSet.insert(&quot;code&quot;) ;stringSet.insert(&quot;in&quot;) ;stringSet.insert(&quot;c++&quot;) ;stringSet.insert(&quot;is&quot;) ;stringSet.insert(&quot;fast&quot;) ;string key &#x3D; &quot;slow&quot; ;&#x2F;&#x2F; find returns end iterator if key is not found,&#x2F;&#x2F; else it returns iterator to that keyif (stringSet.find(key) &#x3D;&#x3D; stringSet.end())cout &lt;&lt; key &lt;&lt; &quot; not found&quot; &lt;&lt; endl &lt;&lt; endl ;elsecout &lt;&lt; &quot;Found &quot; &lt;&lt; key &lt;&lt; endl &lt;&lt; endl ;key &#x3D; &quot;c++&quot;;if (stringSet.find(key) &#x3D;&#x3D; stringSet.end())cout &lt;&lt; key &lt;&lt; &quot; not found\n&quot; ;elsecout &lt;&lt; &quot;Found &quot; &lt;&lt; key &lt;&lt; endl ;&#x2F;&#x2F; now iterating over whole set and printing its&#x2F;&#x2F; contentcout &lt;&lt; &quot;\nAll elements : &quot;;unordered_set&lt;string&gt; :: iterator itr;for (itr &#x3D; stringSet.begin(); itr !&#x3D; stringSet.end(); itr++)cout &lt;&lt; (*itr) &lt;&lt; endl;&#125;&lt;!--slow not found--&gt;&lt;!--Found c++--&gt;&lt;!--All elements : --&gt;&lt;!--is--&gt;&lt;!--fast--&gt;&lt;!--c++--&gt;&lt;!--in--&gt;&lt;!--code--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>find, insert and erase take constant amount of time on average. The find() function returns an iterator to end() if key is not there in set, otherwise an iterator to the key position is returned. The iterator works as a pointer to the key values so that we can get the key by dereferencing them using * operator.</p><p>A practical problem based on unordered_set – Given a set of integers, find all the duplicates among them.</p><div class="code-wrapper"><pre><code>Input  : arr[] = &#123;1, 5, 2, 1, 4, 3, 1, 7, 2, 8, 9, 5&#125;Output : Duplicate item are : 5 2 1</code></pre></div><p>Below is C++ solution using unordered_set.</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to find duplicate from an array using&#x2F;&#x2F; unordered_set#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F; Print duplicates in arr[0..n-1] using unordered_setvoid printDuplicates(int arr[], int n)&#123;&#x2F;&#x2F; declaring unordered sets for checking and storing&#x2F;&#x2F; duplicatesunordered_set&lt;int&gt; intSet;unordered_set&lt;int&gt; duplicate;&#x2F;&#x2F; looping through array elementsfor (int i &#x3D; 0; i &lt; n; i++)&#123;&#x2F;&#x2F; if element is not there then insert thatif (intSet.find(arr[i]) &#x3D;&#x3D; intSet.end())intSet.insert(arr[i]);&#x2F;&#x2F; if element is already there then insert into&#x2F;&#x2F; duplicate setelseduplicate.insert(arr[i]);&#125;&#x2F;&#x2F; printing the resultcout &lt;&lt; &quot;Duplicate item are : &quot;;unordered_set&lt;int&gt; :: iterator itr;&#x2F;&#x2F; iterator itr loops from begin() till end()for (itr &#x3D; duplicate.begin(); itr !&#x3D; duplicate.end(); itr++)cout &lt;&lt; *itr &lt;&lt; &quot; &quot;;&#125;&#x2F;&#x2F; Driver codeint main()&#123;int arr[] &#x3D; &#123;1, 5, 2, 1, 4, 3, 1, 7, 2, 8, 9, 5&#125;;int n &#x3D; sizeof(arr) &#x2F; sizeof(int);printDuplicates(arr, n);return 0;&#125;&lt;!--Duplicate item are : 5 1 2 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>Methods of unordered_set:</p><ol><li>insert()– Insert a new {element} in the unordered_set container.</li><li>begin()– Return an iterator pointing to the first element in the unordered_set container.</li><li>end()– Returns an iterator pointing to the past-the-end-element.</li><li>count()– Count occurrences of a particular element in an unordered_set container.</li><li>find()– Search for an element in the container.</li><li>clear()– Removes all of the elements from an unordered_set and empties it.</li><li>cbegin()– Return a const_iterator pointing to the first element in the unordered_set container.</li><li>cend()– Return a const_iterator pointing to past-the-end element in the unordered_set container or in one of it’s bucket.</li><li>bucket_size()– Returns the total number of elements present in a specific bucket in an unordered_set container.</li><li>erase()– Remove either a single element of a range of elements ranging from start(inclusive) to end(exclusive).</li><li>size()– Return the number of elements in the unordered_set container.</li><li>swap()– Exchange values of two unordered_set containers.</li><li>emplace()– Insert an element in an unordered_set container.</li><li>max_size()– Returns maximum number of elements that an unordered_set container can hold.</li><li>empty()– Check if an unordered_set container is empty or not.</li><li>equal_range– Returns range that includes all elements equal to given value.</li><li>operator= – Copies (or moves) an unordered_set to another unordered_set and unordered_set::operator= is the corresponding operator function.</li><li>hash_function() – This hash function is a unary function which takes asingle argument only and returns a unique value of type size_t based on it.</li><li>reserve()– Used to request capacity change of unordered_set.</li><li>bucket()– Returns the bucket number of a specific element.</li><li>bucket_count() – Returns the total number of buckets present in an unordered_set container.</li><li>load_factor()– Returns the current load factor in the unordered_set container.</li><li>rehash()– Set the number of buckets in the container of unordered_set to given size or more.</li><li>max_load_factor()– Returns(Or sets) the current maximum load factor of the unordered set container.</li><li>emplace_hint()– Inserts a new element in the unordered_set only if the value to be inserted is unique, with a given hint.</li><li>== operator – The ‘==’ is an operator in C++ STL performs equality comparison operation between two unordered sets and unordered_set::operato== is the corresponding operator function for the same.</li><li>key_eq()– Returns a boolean value according to the comparison. It returns the key equivalence comparison predicate used by the unordered_set.</li><li>operator!=– The != is a relational operator in C++ STL which compares the equality and inequality between unordered_set containers.</li><li>max_bucket_count() – Find the maximum number of buckets that unordered_set can have.</li></ol></blockquote><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idunordered_multisetunordered_multiset-introduced-in-c11span"><a class="markdownIt-Anchor" href="#span-idunordered_multisetunordered_multiset-introduced-in-c11span"></a> <span id="unordered_multiset">unordered_multiset (Introduced in C++11)</span></h3>We have discussed about unordered_set in our previous post the problem with unordered_set is that, it is not possible to store duplicate entries in that data structure. For example if we have some value v already in unordered_set, inserting v again will have no effect.<br />To handle this duplication unordered_mulitset should be used, it can store duplicate elements also. Internally when an existing value is inserted, the data structure increases its count which is associated with each value. As count of each value is stored in unordered_multiset, it takes more space than unordered_set (if all values are distinct).<br />The internal implementation of unordered_multiset is same as that of unordered_set and also uses hash table for searching, just the count value is associated with each value in former one. Due to hashing of elements it has no particular order of storing the elements so all element can come in any order but duplicate element comes together. All operation on unordered_multiset takes constant time on average but can go upto linear in worst case.<br />Unordered_multiset supports many function which are demonstrated in below code :</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to demonstrate various function&#x2F;&#x2F; of unordered_multiset#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F; making typedef for short declarationtypedef unordered_multiset&lt;int&gt;::iterator umit;&#x2F;&#x2F; Utility function to print unordered_multisetvoid printUset(unordered_multiset&lt;int&gt; ums)&#123;&#x2F;&#x2F; begin() returns iterator to first element of setumit it &#x3D; ums.begin();for (; it !&#x3D; ums.end(); it++)cout &lt;&lt; *it &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#125;&#x2F;&#x2F; Driver program to check all functionint main()&#123;&#x2F;&#x2F; empty initializationunordered_multiset&lt;int&gt; ums1;&#x2F;&#x2F; Initialization by intializer listunordered_multiset&lt;int&gt; ums2 (&#123;1, 3, 1, 7, 2, 3,4, 1, 6&#125;);&#x2F;&#x2F; Initialization by assignmentums1 &#x3D; &#123;2, 7, 2, 5, 0, 3, 7, 5&#125;;&#x2F;&#x2F; empty() function return true if set is empty&#x2F;&#x2F; otherwise falseif (ums1.empty())cout &lt;&lt; &quot;unordered multiset 1 is empty\n&quot;;elsecout &lt;&lt; &quot;unordered multiset 1 is not empty\n&quot;;&#x2F;&#x2F; size() function returns total number of elements&#x2F;&#x2F; in data structurecout &lt;&lt; &quot;The size of unordered multiset 2 is : &quot;&lt;&lt; ums2.size() &lt;&lt; endl;printUset(ums1);ums1.insert(7);printUset(ums1);int val &#x3D; 3;&#x2F;&#x2F; find function returns iterator to first position&#x2F;&#x2F; of val, if exist otherwise it returns iterator&#x2F;&#x2F; to endif (ums1.find(val) !&#x3D; ums1.end())cout &lt;&lt; &quot;unordered multiset 1 contains &quot;&lt;&lt; val &lt;&lt; endl;elsecout &lt;&lt; &quot;unordered multiset 1 does not contains &quot;&lt;&lt; val &lt;&lt; endl;&#x2F;&#x2F; count function returns total number of occurrence in setval &#x3D; 5;int cnt &#x3D; ums1.count(val);cout &lt;&lt; val &lt;&lt; &quot; appears &quot; &lt;&lt; cnt&lt;&lt; &quot; times in unordered multiset 1 \n&quot;;val &#x3D; 9;&#x2F;&#x2F; if count return &gt;0 value then element exist otherwise notif (ums1.count(val))cout &lt;&lt; &quot;unordered multiset 1 contains &quot;&lt;&lt; val &lt;&lt; endl;elsecout &lt;&lt; &quot;unordered multiset 1 does not contains &quot;&lt;&lt; val &lt;&lt; endl;val &#x3D; 1;&#x2F;&#x2F; equal_range returns a pair, where first is iterator&#x2F;&#x2F; to first position of val and second it iterator to&#x2F;&#x2F; last position to valpair&lt;umit, umit&gt; erange_it &#x3D; ums2.equal_range(val);if (erange_it.first !&#x3D; erange_it.second)cout &lt;&lt; val &lt;&lt; &quot; appeared atleast once in &quot;&quot;unoredered_multiset \n&quot;;printUset(ums2);&#x2F;&#x2F; erase function deletes all instances of valums2.erase(val);printUset(ums2);&#x2F;&#x2F; clear function deletes all entries from setums1.clear();ums2.clear();if (ums1.empty())cout &lt;&lt; &quot;unordered multiset 1 is empty\n&quot;;elsecout &lt;&lt; &quot;unordered multiset 1 is not empty\n&quot;;&#125;&lt;!--unordered multiset 1 is not empty--&gt;&lt;!--The size of unordered multiset 2 is : 9--&gt;&lt;!--3 0 5 5 7 7 2 2 --&gt;&lt;!--3 0 5 5 7 7 7 2 2 --&gt;&lt;!--unordered multiset 1 contains 3--&gt;&lt;!--5 appears 2 times in unordered multiset 1 --&gt;&lt;!--unordered multiset 1 does not contains 9--&gt;&lt;!--1 appeared atleast once in unoredered_multiset --&gt;&lt;!--6 4 2 7 3 3 1 1 1 --&gt;&lt;!--6 4 2 7 3 3 --&gt;&lt;!--unordered multiset 1 is empty--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>As we can see most of the operation work similar to that of unordered_set but some things to note are:<br />equal_range(val) function returns a pair of type where first iterator points to first position of val and second points to last position of val in data structure.<br />erase(val) function deletes all its instances from the data structure for example if some value v has occurred t times in unordered_multiset and when erase is called, v is deleted completely which is not a expected behavior many times.</p><p>We can delete only one copy of some value by using find function and iterator version of erase, as find function returns iterator to first position of found value we can pass this iterator to erase instead of actual value to delete only one copy, the code for doing this is shown below :</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to delete one copy from unordered set#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F; making typedef for short declarationtypedef unordered_multiset&lt;int&gt;::iterator umit;&#x2F;&#x2F; Utility function to print unordered_multisetvoid printUset(unordered_multiset&lt;int&gt; ums)&#123;&#x2F;&#x2F; begin() returns iterator to first element of&#x2F;&#x2F; setumit it &#x3D; ums.begin();for (; it !&#x3D; ums.end(); it++)cout &lt;&lt; *it &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#125;&#x2F;&#x2F; function to delete one copy of val from setvoid erase_one_entry(unordered_multiset&lt;int&gt;&amp; ums,int val)&#123;&#x2F;&#x2F; find returns iterator to first positionumit it &#x3D; ums.find(val);&#x2F;&#x2F; if element is there then erasing thatif (it !&#x3D; ums.end())ums.erase(it);&#125;&#x2F;&#x2F; Driver program to check above functionint main()&#123;&#x2F;&#x2F; initializing multiset by initializer listunordered_multiset&lt;int&gt; ums (&#123;1, 3, 1, 7, 2, 3,4, 1, 6&#125;);int val &#x3D; 1;printUset(ums);erase_one_entry(ums, val);printUset(ums);&#125;&lt;!--6 4 2 7 3 3 1 1 1 --&gt;&lt;!--6 4 2 7 3 3 1 1 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>Methods of unordered_multiset:</p><ol><li>insert()– Inserts new elements in the unordered_multiset. Thus increases the container size.</li><li>begin()– Returns an iterator pointing to the first element in the container or to the first element in one of its bucket.</li><li>end()– Returns an iterator pointing to the position immediately after the last element in the container or to the position immediately after the last element in one of its bucket.</li><li>empty()– It returns true if the unordered_multiset container is empty. Otherwise, it returns false.</li><li>find()– Returns an iterator which points to the position which has the element val.</li><li>cbegin()– Returns a constant iterator pointing to the first element in the container or to the first element in one of its bucket.</li><li>cend()– Returns a constant iterator pointing to the position immediately after the last element in the container or to the position immediately after the last element in one of its bucket.</li><li>equal_range()– Returns the range in which all the elements are equal to a given value.</li><li>emplace()– Inserts a new element in the unordered_multiset container.</li><li>clear()– Clears the contents of the unordered_multiset container.</li><li>count()– Returns the count of elements in the unordered_multiset container which is equal to a given value.</li><li>size()– The size() method of unordered_multiset is used to count the number of elements of unordered_set it is called with.</li><li>max_size– The max_size() of unordered_multiset takes the maximum number of elements that the unordered_multiset container is able to hold.</li><li>swap()– Swaps the contents of two unordered_multiset containers.</li><li>erase() – Used to remove either a single element or, all elements with a definite value or, a range of elements ranging from start(inclusive) to end(exclusive).</li><li>bucket()– Returns the bucket number in which a given element is. Bucket size varies from 0 to bucket_count-1.</li><li>bucket_size()– Returns the number of elements in the bucket which has the element val.</li><li>reserve()– The reverse() function of unordered_multiset sets the number of buckets in the container (bucket_count) to the most appropriate to contain at least n elements.</li><li>max_bucket_count()– Returns the maximum number of buckets that the unordered multiset container can have.</li><li>load_factor()– Returns the current load factor in the unordered_multiset container.</li><li>max_load_factor()– Returns the maximum load factor of the unordered_multiset container.</li><li>bucket_count()– Returns the total number of buckets in the unordered_multiset container.</li><li>hash_function()– This hash function is a unary function which takes a single argument only and returns a unique value of type size_t based on it.</li><li>rehash()– Sets the number of buckets in the container to N or more.</li><li>key_eq()– Returns a boolean value according to the comparison.</li><li>emplace_hint()– Inserts a new element in the unordered_multiset container.</li><li>get_allocator– This function gets the stored allocator object and returns the allocator object which is used to construct the container.</li><li>operator =– The ‘=’ is an operator in C++ STL which copies (or moves) an unordered_multiset to another unordered_multiset and unordered_multiset::operator= is the corresponding operator function.</li></ol></blockquote><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idunordered_mapunordered_map-introduced-in-c11span"><a class="markdownIt-Anchor" href="#span-idunordered_mapunordered_map-introduced-in-c11span"></a> <span id="unordered_map">unordered_map (Introduced in C++11)</span></h3><div class="code-wrapper"><pre><code>unordered_map is an associated container that stores elements formed by combination of key value and a mapped value. The key value is used to uniquely identify the element and mapped value is the content associated with the key. Both key and value can be of any type predefined or user-defined.Internally unordered_map is implemented using Hash Table, the key provided to map are hashed into indices of hash table that is why performance of data structure depends on hash function a lot but on an average the cost of search, insert and delete from hash table is O(1).<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to demonstrate functionality of unordered_map#include &lt;iostream&gt;#include &lt;unordered_map&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Declaring umap to be of &lt;string, int&gt; type&#x2F;&#x2F; key will be of string type and mapped value will&#x2F;&#x2F; be of double typeunordered_map&lt;string, int&gt; umap;&#x2F;&#x2F; inserting values by using [] operatorumap[&quot;GeeksforGeeks&quot;] &#x3D; 10;umap[&quot;Practice&quot;] &#x3D; 20;    umap[&quot;Contribute&quot;] &#x3D; 30;&#x2F;&#x2F; Traversing an unordered mapfor (auto x : umap)cout &lt;&lt; x.first &lt;&lt; &quot; &quot; &lt;&lt; x.second &lt;&lt; endl;&#125;&lt;!--Contribute 30--&gt;&lt;!--GeeksforGeeks 10--&gt;&lt;!--Practice 20--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>**unordered_map vs unordered_set :**In unordered_set, we have only key, no value, these are mainly used to see presence/absence in a set. For example, consider the problem of counting frequencies of individual words. We can’t use unordered_set (or set) as we can’t store counts.**unordered_map vs map :**map (like set) is an ordered sequence of unique keys whereas in unordered_map key can be stored in any order, so unordered.Map is implemented as balanced tree structure that is why it is possible to maintain an order between the elements (by specific tree traversal). Time complexity of map operations is O(Log n) while for unordered_map, it is O(1) on average.**Methods on unordered_map**A lot of function are available which work on unordered_map. most useful of them are – operator =, operator [], empty and size for capacity, begin and end for iterator, find and count for lookup, insert and erase for modification.The C++11 library also provides function to see internally used bucket count, bucket size and also used hash function and various hash policies but they are less useful in real application.We can iterate over all elements of unordered_map using Iterator. Initialization, indexing and iteration is shown in below sample code :<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to demonstrate functionality of unordered_map#include &lt;iostream&gt;#include &lt;unordered_map&gt;using namespace std;int main()&#123;&#x2F;&#x2F; Declaring umap to be of &lt;string, double&gt; type&#x2F;&#x2F; key will be of string type and mapped value will&#x2F;&#x2F; be of double typeunordered_map&lt;string, double&gt; umap;&#x2F;&#x2F; inserting values by using [] operatorumap[&quot;PI&quot;] &#x3D; 3.14;umap[&quot;root2&quot;] &#x3D; 1.414;umap[&quot;root3&quot;] &#x3D; 1.732;umap[&quot;log10&quot;] &#x3D; 2.302;umap[&quot;loge&quot;] &#x3D; 1.0;&#x2F;&#x2F; inserting value by insert functionumap.insert(make_pair(&quot;e&quot;, 2.718));string key &#x3D; &quot;PI&quot;;&#x2F;&#x2F; If key not found in map iterator to end is returnedif (umap.find(key) &#x3D;&#x3D; umap.end())cout &lt;&lt; key &lt;&lt; &quot; not found\n\n&quot;;&#x2F;&#x2F; If key found then iterator to that key is returnedelsecout &lt;&lt; &quot;Found &quot; &lt;&lt; key &lt;&lt; &quot;\n\n&quot;;key &#x3D; &quot;lambda&quot;;if (umap.find(key) &#x3D;&#x3D; umap.end())cout &lt;&lt; key &lt;&lt; &quot; not found\n&quot;;elsecout &lt;&lt; &quot;Found &quot; &lt;&lt; key &lt;&lt; endl;&#x2F;&#x2F; iterating over all value of umapunordered_map&lt;string, double&gt;:: iterator itr;cout &lt;&lt; &quot;\nAll Elements : \n&quot;;for (itr &#x3D; umap.begin(); itr !&#x3D; umap.end(); itr++)&#123;&#x2F;&#x2F; itr works as a pointer to pair&lt;string, double&gt;&#x2F;&#x2F; type itr-&gt;first stores the key part and&#x2F;&#x2F; itr-&gt;second stroes the value partcout &lt;&lt; itr-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; itr-&gt;second &lt;&lt; endl;&#125;&#125;&lt;!--    Found PI--&gt;&lt;!--lambda not found--&gt;&lt;!--All Elements : --&gt;&lt;!--loge  1--&gt;&lt;!--e  2.718--&gt;&lt;!--log10  2.302--&gt;&lt;!--root3  1.732--&gt;&lt;!--PI  3.14--&gt;&lt;!--root2  1.414--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>A practical problem based on unordered_map – given a string of words, find frequencies of individual words.    Input :  str = &quot;geeks for geeks geeks quiz practice qa for&quot;;    Output : Frequencies of individual words are    (practice, 1)    (for, 2)    (qa, 1)    (quiz, 1)    (geeks, 3)Below is a C++ solution using unordered_map.<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to find freq of every word using&#x2F;&#x2F; unordered_map#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F; Prints frequencies of individual words in strvoid printFrequencies(const string &amp;str)&#123;&#x2F;&#x2F; declaring map of &lt;string, int&gt; type, each word    &#x2F;&#x2F; is mapped to its frequency    unordered_map&lt;string, int&gt; wordFreq;&#x2F;&#x2F; breaking input into word using string streamstringstream ss(str); &#x2F;&#x2F; Used for breaking wordsstring word; &#x2F;&#x2F; To store individual wordswhile (ss &gt;&gt; word)wordFreq[word]++;&#x2F;&#x2F; now iterating over word, freq pair and printing&#x2F;&#x2F; them in &lt;, &gt; formatunordered_map&lt;string, int&gt;:: iterator p;for (p &#x3D; wordFreq.begin(); p !&#x3D; wordFreq.end(); p++)cout &lt;&lt; &quot;(&quot; &lt;&lt; p-&gt;first &lt;&lt; &quot;, &quot; &lt;&lt; p-&gt;second &lt;&lt; &quot;)\n&quot;;&#125;&#x2F;&#x2F; Driver codeint main()&#123;string str &#x3D; &quot;geeks for geeks geeks quiz &quot;&quot;practice qa for&quot;;printFrequencies(str);return 0;&#125;&lt;!--(qa, 1)--&gt;&lt;!--(quiz, 1)--&gt;&lt;!--(practice, 1)--&gt;&lt;!--(geeks, 3)--&gt;&lt;!--(for, 2)--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></code></pre><blockquote><p>Methods of unordered_map :</p><ol><li>at(): This function in C++ unordered_map returns the reference to the value with the element as key k.</li><li>begin(): Returns an iterator pointing to the first element in the container in the unordered_map container</li><li>end(): Returns an iterator pointing to the position past the last element in the container in the &gt; 1. unordered_map container</li><li>bucket(): Returns the bucket number where the element with the key k is located in the map.</li><li>bucket_count: bucket_count is used to count the total no. of buckets in the unordered_map. No parameter is required to pass into this function.</li><li>bucket_size: Returns number of elements in each bucket of the unordered_map.</li><li>count(): Count the number of elements present in an unordered_map with a given key.</li><li>equal_range: Return the bounds of a range that includes all the elements in the container with a key that compares equal to k.</li></ol></blockquote></li></ul><p><a href="#Menu">返回目录</a></p><ul><li><h3 id="span-idunordered_multimapunordered_multimap-introduced-in-c11span"><a class="markdownIt-Anchor" href="#span-idunordered_multimapunordered_multimap-introduced-in-c11span"></a> <span id="unordered_multimap">unordered_multimap (Introduced in C++11)</span></h3><p><strong>Allows Duplicates:</strong><br />We have discussed about unordered_map in our previous post , but there is a limitation, we can not store duplicates in unordered_map, that is if we have a key value pair already in our unordered_multimap and another pair is inserted, then both will be there whereas in case of unordered_map the previous value corresponding to the key is updated by new value that is only would be there. Even can exist in unordered_multimap twice.</p><p><strong>Internal Representation:</strong><br />The internal implementation of unordered_multimap is same as that of unordered_map but for duplicate keys another count value is maintained with each key- value pair. As pairs are stored in hash table, there is no particular order among them but pair with same keys come together in data structure whereas pair with same values are not guaranteed to come together.</p><p><strong>Time Complexity:</strong><br />All operation on unordered_multimap takes constant amount of time on an average but time can go to linear in worst case depending on internally used hash function but in long run unordered_multimap outperforms multimap (tree based multimap).</p></li></ul><p>Functions:<br />unorderd_multimap supports many function which are demonstrated in below code :</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to demonstrate various function of&#x2F;&#x2F; unordered_multimap#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F;making typedef for short declarationtypedef unordered_multimap&lt;string, int&gt;::iterator umit;&#x2F;&#x2F; Utility function to print unordered_multimapvoid printUmm(unordered_multimap&lt;string, int&gt; umm)&#123;&#x2F;&#x2F; begin() returns iterator to first element of mapumit it &#x3D; umm.begin();for (; it !&#x3D; umm.end(); it++)cout &lt;&lt; &quot;&lt;&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot;, &quot; &lt;&lt; it-&gt;second&lt;&lt; &quot;&gt; &quot;;cout &lt;&lt; endl;&#125;&#x2F;&#x2F; Driver program to check all functionint main()&#123;&#x2F;&#x2F; empty initializationunordered_multimap&lt;string, int&gt; umm1;&#x2F;&#x2F; Initialization bu intializer listunordered_multimap&lt;string, int&gt; umm2 (&#123;&#123;&quot;apple&quot;, 1&#125;,&#123;&quot;ball&quot;, 2&#125;,&#123;&quot;apple&quot;, 10&#125;,&#123;&quot;cat&quot;, 7&#125;,&#123;&quot;dog&quot;, 9&#125;,&#123;&quot;cat&quot;, 6&#125;,&#123;&quot;apple&quot;, 1&#125;&#125;);&#x2F;&#x2F; Initialization by assignment operationumm1 &#x3D; umm2;printUmm(umm1);&#x2F;&#x2F; empty returns true, if container is empty else it returns&#x2F;&#x2F; falseif (umm2.empty())cout &lt;&lt; &quot;unordered multimap 2 is empty\n&quot;;elsecout &lt;&lt; &quot;unordered multimap 2 is not empty\n&quot;;&#x2F;&#x2F; size returns total number of elements in containercout &lt;&lt; &quot;Size of unordered multimap 1 is &quot; &lt;&lt; umm1.size()&lt;&lt; endl;string key &#x3D; &quot;apple&quot;;&#x2F;&#x2F; find and return any pair, associated with keyumit it &#x3D; umm1.find(key);if (it !&#x3D; umm1.end())&#123;cout &lt;&lt; &quot;\nkey &quot; &lt;&lt; key &lt;&lt; &quot; is there in unordered &quot;&lt;&lt; &quot; multimap 1\n&quot;;cout &lt;&lt; &quot;\none of the value associated with &quot; &lt;&lt; key&lt;&lt; &quot; is &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;&#125;elsecout &lt;&lt; &quot;\nkey &quot; &lt;&lt; key &lt;&lt; &quot; is not there in unordered&quot;&lt;&lt; &quot; multimap 1\n&quot;;&#x2F;&#x2F; count returns count of total number of pair associated&#x2F;&#x2F; with keyint cnt &#x3D; umm1.count(key);cout &lt;&lt; &quot;\ntotal values associated with &quot; &lt;&lt; key &lt;&lt; &quot; are &quot;&lt;&lt; cnt &lt;&lt; &quot;\n\n&quot;;printUmm(umm2);&#x2F;&#x2F; one insertion by makeing pair explicitlyumm2.insert(make_pair(&quot;dog&quot;, 11));&#x2F;&#x2F; insertion by initializer listumm2.insert(&#123;&#123;&quot;alpha&quot;, 12&#125;, &#123;&quot;beta&quot;, 33&#125;&#125;);cout &lt;&lt; &quot;\nAfter insertion of &lt;apple, 12&gt; and &lt;beta, 33&gt;\n&quot;;printUmm(umm2);&#x2F;&#x2F; erase deletes all pairs corresponding to keyumm2.erase(&quot;apple&quot;);cout &lt;&lt; &quot;\nAfter deletion of apple\n&quot;;printUmm(umm2);&#x2F;&#x2F; clear deletes all pairs from containerumm1.clear();umm2.clear();if (umm2.empty())cout &lt;&lt; &quot;\nunordered multimap 2 is empty\n&quot;;elsecout &lt;&lt; &quot;\nunordered multimap 2 is not empty\n&quot;;&#125;&lt;!--&lt;apple, 1&gt;  &lt;apple, 10&gt;  &lt;apple, 1&gt;  &lt;ball, 2&gt;  &lt;cat, 6&gt;  &lt;cat, 7&gt;  &lt;dog, 9&gt;  --&gt;&lt;!--unordered multimap 2 is not empty--&gt;&lt;!--Size of unordered multimap 1 is 7--&gt;&lt;!--key apple is there in unordered  multimap 1--&gt;&lt;!--one of the value associated with apple is 1--&gt;&lt;!--total values associated with apple are 3--&gt;&lt;!--&lt;apple, 1&gt;  &lt;apple, 10&gt;  &lt;apple, 1&gt;  &lt;ball, 2&gt;  &lt;cat, 6&gt;  &lt;cat, 7&gt;  &lt;dog, 9&gt;  --&gt;&lt;!--After insertion of &lt;apple, 12&gt; and &lt;beta, 33&gt;--&gt;&lt;!--&lt;beta, 33&gt;  &lt;alpha, 12&gt;  &lt;apple, 1&gt;  &lt;apple, 10&gt;  &lt;apple, 1&gt;  &lt;ball, 2&gt;--&gt;&lt;!--&lt;cat, 6&gt;  &lt;cat, 7&gt;  &lt;dog, 11&gt;  &lt;dog, 9&gt;  --&gt;&lt;!--After deletion of apple--&gt;&lt;!--&lt;beta, 33&gt;  &lt;alpha, 12&gt;  &lt;ball, 2&gt;  &lt;cat, 6&gt;  &lt;cat, 7&gt;  &lt;dog, 11&gt;  &lt;dog, 9&gt;  --&gt;&lt;!--unordered multimap 2 is empty--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>As we can see in above code most of the operation work similar to unordered_map but some things to note are :<br />We can use initializer list for initializing and inserting many pairs at once.<br />There is no [] operator for unordered_multimap because values corresponding to a key are not unique, there can be many values associated with a single key so [] operator can not be applied to them.<br />Erase function deletes all instances of values associated with supplied key.<br />Find function returns an iterator to any instance of key-value pair among all pair associated with that key.</p><p><strong>How to access/delete if a specific value for a key?</strong><br />If we want to check whether a specific is there or not, we need to loop over all pairs of key-value corresponding to k, in similar way we can erase one copy of a specific from data structure. There is no specified order in which all values of a key are stored.</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to implement find and erase for specific&#x2F;&#x2F; key-value pair for unordered_multimap#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F; making typedef for short declarationtypedef unordered_multimap&lt;string, int&gt;:: iterator umit;&#x2F;&#x2F; function to check whether p is there in map or notbool find_kv(unordered_multimap&lt;string, int&gt;&amp; umm,pair&lt;string, int&gt; p)&#123;&#x2F;&#x2F; equal_range returns pair of iterator of first and last&#x2F;&#x2F; position associated with keypair&lt;umit, umit&gt; it &#x3D; umm.equal_range(p.first);umit it1 &#x3D; it.first;pair&lt;string, int&gt; tmp;&#x2F;&#x2F; looping over all values associated with keywhile (it1 !&#x3D; it.second)&#123;tmp &#x3D; *it1;if (tmp &#x3D;&#x3D; p)return true;it1++;&#125;return false;&#125;&#x2F;&#x2F; function to delete one copy of pair p from map ummvoid erase_kv(unordered_multimap&lt;string, int&gt;&amp; umm,pair&lt;string, int&gt; p)&#123;&#x2F;&#x2F; equal_range returns pair of iterator of first and&#x2F;&#x2F; last position associated with keypair&lt;umit, umit&gt; it &#x3D; umm.equal_range(p.first);umit it1 &#x3D; it.first;pair&lt;string, int&gt; tmp;&#x2F;&#x2F; looping over all values associated with keywhile (it1 !&#x3D; it.second)&#123;tmp &#x3D; *it1;if (tmp &#x3D;&#x3D; p)&#123;&#x2F;&#x2F; iterator version of erase : deletes pair&#x2F;&#x2F; at that position onlyumm.erase(it1);break;&#125;it1++;&#125;&#125;&#x2F;&#x2F; Utility function to print unordered_multimapvoid printUmm(unordered_multimap&lt;string, int&gt; umm)&#123;&#x2F;&#x2F; begin() returns iterator to first element of mapumit it &#x3D; umm.begin();for (; it !&#x3D; umm.end(); it++)cout &lt;&lt; &quot;&lt;&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot;, &quot; &lt;&lt; it-&gt;second &lt;&lt; &quot;&gt; &quot;;cout &lt;&lt; endl;&#125;&#x2F;&#x2F; Driver program to check above functionint main()&#123;&#x2F;&#x2F; initializing multimap by initializer listunordered_multimap&lt;string, int&gt; umm (&#123;&#123;&quot;apple&quot;, 1&#125;,&#123;&quot;ball&quot;, 2&#125;,&#123;&quot;apple&quot;, 10&#125;,&#123;&quot;cat&quot;, 7&#125;,&#123;&quot;dog&quot;, 9&#125;,&#123;&quot;cat&quot;, 6&#125;,&#123;&quot;apple&quot;, 1&#125;&#125;);cout &lt;&lt; &quot;Initial content\n&quot;;printUmm(umm);pair&lt;string, int&gt; kv &#x3D; make_pair(&quot;apple&quot;, 1);cout &lt;&lt; &quot;\nAfter insertion of one more &lt;apple, 1&gt;\n&quot;;printUmm(umm);if (find_kv(umm, kv))erase_kv(umm, kv);elsecout &lt;&lt; &quot;key-value pair is not there in unordered multimap\n&quot;;cout &lt;&lt; &quot;\nAfter deletion one occurrence of &lt;apple, 1&gt;\n&quot;;printUmm(umm);&#125;&lt;!--Initial content--&gt;&lt;!--&lt;apple, 1&gt; &lt;apple, 10&gt; &lt;apple, 1&gt; &lt;ball, 2&gt; &lt;cat, 6&gt; &lt;cat, 7&gt; &lt;dog, 9&gt; --&gt;&lt;!--After insertion of one more &lt;apple, 1&gt;--&gt;&lt;!--&lt;apple, 1&gt; &lt;apple, 10&gt; &lt;apple, 1&gt; &lt;ball, 2&gt; &lt;cat, 6&gt; &lt;cat, 7&gt; &lt;dog, 9&gt; --&gt;&lt;!--After deletion one occurrence of &lt;apple, 1&gt;--&gt;&lt;!--&lt;apple, 10&gt; &lt;apple, 1&gt; &lt;ball, 2&gt; &lt;cat, 6&gt; &lt;cat, 7&gt; &lt;dog, 9&gt; --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>Methods of unordered_multimap:</p><ol><li>begin()– Returns an iterator pointing to the first element in the container or to the first element in one of its bucket.</li><li>end()– Returns an iterator pointing to the position after the last element in the container or to the position after the last element in one of its bucket.</li><li>count()– Returns the number of elements in the container whose key is equal to the key passed in the parameter.</li><li>cbegin()– Returns a constant iterator pointing to the first element in the container or to the first element in one of its bucket.</li><li>cend()– Returns a constant iterator pointing to the position after the last element in the container or to the position after the last element in one of its bucket.</li><li>clear() – Clears the contents of the unordered_multimap container.</li><li>size()– Returns the size of the unordered_multimap. It denotes the number of elements in that container.</li><li>swap()– Swaps the contents of two unordered_multimap containers. The sizes can differ of both the containers.</li><li>find()– Returns an iterator which points to one of the elements which has the key k.</li><li>bucket_size()– Returns the number of elements in the bucket n.</li><li>empty()– It returns true if the unordered_multimap container is empty. Otherwise, it returns false.</li><li>equal_range()– Returns the range in which all the element’s key is equal to a key.</li><li>operator=– Copy/Assign/Move elements from different container.</li><li>max_size()– Returns the maximum number of elements that the unordered_multimap container can hold.</li><li>load_factor()– Returns the current load factor in the unordered_multimap container.</li><li>key_eq()– Returns a boolean value according to the comparison.</li><li>emplace()– Inserts a new {key, element} in the unordered_multimap container.</li><li>emplace_hint()– Inserts a new {key:element} in the unordered_multimap container.</li><li>bucket_count()– Returns the total number of buckets in the unordered_multimap container.</li><li>bucket()– Returns the bucket number in which a given key is.</li><li>max_load_factor()– Returns the maximum load factor of the unordered_multimap container.</li><li>rehash()– Sets the number of buckets in the container to N or more.</li><li>reserve()– Sets the number of buckets in the container (bucket_count) to the most appropriate number so that it contains at least n elements.</li><li>hash_function()– This hash function is a unary function which takes a single argument only and returns a unique value of type size_t based on it.</li><li>max_bucket_count()– Returns the maximum number of buckets that the unordered multimap container can have.</li></ol></blockquote><p><a href="#Menu">返回目录</a></p><h1 id="三-span-idfunctionsfunctionsspan"><a class="markdownIt-Anchor" href="#三-span-idfunctionsfunctionsspan"></a> 三. <span id="Functions">Functions</span></h1><blockquote><p>The STL includes classes that overload the function call operator. Instances of such classes are called function objects or functors. Functors allow the working of the associated function to be customized with the help of parameters to be passed.</p><p>STL 包含使函数调用运算符重载的类。这种类的实例称为函数对象或函子。函子允许在要传递的参数的帮助下自定义关联功能的工作。</p></blockquote><h2 id="1-span-idfunctorsfunctorsspan"><a class="markdownIt-Anchor" href="#1-span-idfunctorsfunctorsspan"></a> 1. <span id="Functors">Functors</span></h2><blockquote><p>Please note that the title is Functors (Not Functions)!!<br />Consider a function that takes only one argument. However, while calling this function we have a lot more information that we would like to pass to this function, but we cannot as it accepts only one parameter. What can be done?<br />One obvious answer might be global variables. However, good coding practices do not advocate the use of global variables and say they must be used only when there is no other alternative.<br />Functors are objects that can be treated as though they are a function or function pointer. Functors are most commonly used along with STLs in a scenario like following:<br />Below program uses transform() in STL to add 1 to all elements of arr[].</p><p>请注意标题是函子（不是函数）！！<br />考虑一个只接受一个参数的函数。然而，在调用这个函数时，我们有更多的信息想传递给这个函数，但是我们不能，因为它只接受一个参数。能做什么？<br />一个显而易见的答案可能是全局变量。然而，良好的编码实践并不提倡使用全局变量，并且说只有在没有其他选择的情况下才必须使用全局变量。<br />函子是可以当作函数或函数指针对待的对象。函子通常与 STL 一起在以下场景中使用：<br />下面的程序使用 STL 中的 transform（）将 1 添加到 arr[]的所有元素。</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; A C++ program uses transform() in STL to add&#x2F;&#x2F; 1 to all elements of arr[]#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;int increment(int x) &#123; return (x+1); &#125;int main()&#123;int arr[] &#x3D; &#123;1, 2, 3, 4, 5&#125;;int n &#x3D; sizeof(arr)&#x2F;sizeof(arr[0]);&#x2F;&#x2F; Apply increment to all elements of&#x2F;&#x2F; arr[] and store the modified elements&#x2F;&#x2F; back in arr[]transform(arr, arr+n, arr, increment);for (int i&#x3D;0; i&lt;n; i++)cout &lt;&lt; arr[i] &lt;&lt;&quot; &quot;;return 0;&#125;&lt;!--2 3 4 5 6--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>This code snippet adds only one value to the contents of the arr[]. Now suppose, that we want to add 5 to contents of arr[].<br />See what’s happening? As transform requires a unary function(a function taking only one argument) for an array, we cannot pass a number to increment(). And this would, in effect, make us write several different functions to add each number. What a mess. This is where functors come into use.<br />A functor (or function object) is a C++ class that acts like a function. Functors are called using the same old function call syntax. To create a functor, we create a object that overloads the operator().</p><p>这个代码片段只向 arr[]的内容添加一个值。现在假设我们要在 arr[]的内容中添加 5。<br />看到发生什么了吗？由于 transform 要求数组使用一元函数（一个只接受一个参数的函数），因此不能将数字传递给 increment（）。实际上，这会让我们写几个不同的函数来加上每个数。真是一团糟。这就是函子开始使用的地方。<br />函子（或函数对象）是一个 C++类，它的作用类似于函数。使用相同的旧函数调用语法调用函数。为了创建函子，我们创建一个重载 operator（）的对象。</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">The line,MyFunctor(10);Is same asMyFunctor.operator()(10);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>Let’s delve deeper and understand how this can actually be used in conjunction with STLs.</p><p>让我们更深入地研究并理解如何将其与 stl 结合使用。</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ program to demonstrate working of&#x2F;&#x2F; functors.#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F; A Functorclass increment&#123;private:int num;public:increment(int n) : num(n) &#123; &#125;&#x2F;&#x2F; This operator overloading enables calling&#x2F;&#x2F; operator function () on objects of incrementint operator () (int arr_num) const &#123;return num + arr_num;&#125;&#125;;&#x2F;&#x2F; Driver codeint main()&#123;int arr[] &#x3D; &#123;1, 2, 3, 4, 5&#125;;int n &#x3D; sizeof(arr)&#x2F;sizeof(arr[0]);int to_add &#x3D; 5;transform(arr, arr+n, arr, increment(to_add));for (int i&#x3D;0; i&lt;n; i++)cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;&#125;&lt;!--6 7 8 9 10--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Thus, here, Increment is a functor, a c++ class that acts as a function.</p><p>因此，在这里，Increment 是一个函子，一个充当函数的 c++类。</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">The line,transform(arr, arr+n, arr, increment(to_add));is the same as writing below two lines,&#x2F;&#x2F; Creating object of incrementincrement obj(to_add);&#x2F;&#x2F; Calling () on objecttransform(arr, arr+n, arr, obj);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Thus, an object a is created that overloads the operator(). Hence, functors can be used effectively in conjunction with C++ STLs.</p><p>因此，将创建一个重载 operator（）的对象 a。因此，函数可以有效地结合 C++的 STL 使用。</p></blockquote><p><a href="#Menu">返回目录</a></p><h1 id="四-span-iditeratorsiteratorsspan"><a class="markdownIt-Anchor" href="#四-span-iditeratorsiteratorsspan"></a> 四. <span id="Iterators">Iterators</span></h1><blockquote><p>As the name suggests, iterators are used for working upon a sequence of values. They are the major feature that allow generality in STL.</p><p>顾名思义，迭代器用于处理一系列值。它们是允许在 STL 中通用的主要功能。</p></blockquote><h2 id="1-span-iditeratoriteratorsspan"><a class="markdownIt-Anchor" href="#1-span-iditeratoriteratorsspan"></a> 1. <span id="Iterator">Iterators</span></h2><ul><li>Iterators are used to point at the memory addresses of STL containers. They are primarily used in sequence of numbers, characters etc. They reduce the complexity and execution time of program.<br />迭代器用于指向 STL 容器的内存地址。它们主要用于数字、字符等序列，降低了程序的复杂度和执行时间。</li></ul><blockquote><p>Operations of iterators :</p><ol><li>begin()<br />This function is used to return the beginning position of the container.<br /><code>此函数用于返回容器的起始位置。</code></li><li>end()<br />This function is used to return the after end position of the container.<br /><code>此函数用于返回容器的结束后位置。</code></li><li>advance()<br />This function is used to increment the iterator position till the specified number mentioned in its arguments.<br /><code>此函数用于递增迭代器位置，直到其参数中指定的数字为止。</code></li><li>next()<br />This function returns the new iterator that the iterator would point after advancing the positions mentioned in its arguments.<br /><code>此函数返回迭代器，迭代器将在推进其参数中提到的位置后指向该迭代器。</code></li><li>prev()<br />This function returns the new iterator that the iterator would point after decrementing the positions mentioned in its arguments.<br /><code>此函数返回迭代器，迭代器将在递减其参数中提到的位置后指向该迭代器。</code></li><li>inserter()<br />This function is used to insert the elements at any position in the container. It accepts 2 arguments, the container and iterator to position where the elements have to be inserted.<br /><code>此函数用于在容器中的任何位置插入元素。它接受2个参数，容器和迭代器来定位必须插入元素的位置。</code></li></ol></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; iterator, begin() and end()#include&lt;iostream&gt;#include&lt;iterator&gt; &#x2F;&#x2F; for iterators#include&lt;vector&gt; &#x2F;&#x2F; for vectorsusing namespace std;int main()&#123;vector&lt;int&gt; ar &#x3D; &#123; 1, 2, 3, 4, 5 &#125;;&#x2F;&#x2F; Declaring iterator to a vectorvector&lt;int&gt;::iterator ptr;&#x2F;&#x2F; Displaying vector elements using begin() and end()cout &lt;&lt; &quot;The vector elements are : &quot;;for (ptr &#x3D; ar.begin(); ptr &lt; ar.end(); ptr++)cout &lt;&lt; *ptr &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--The vector elements are : 1 2 3 4 5 --&gt;&#x2F;*--------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; advance()#include&lt;iostream&gt;#include&lt;iterator&gt; &#x2F;&#x2F; for iterators#include&lt;vector&gt; &#x2F;&#x2F; for vectorsusing namespace std;int main()&#123;vector&lt;int&gt; ar &#x3D; &#123; 1, 2, 3, 4, 5 &#125;;&#x2F;&#x2F; Declaring iterator to a vectorvector&lt;int&gt;::iterator ptr &#x3D; ar.begin();&#x2F;&#x2F; Using advance() to increment iterator position&#x2F;&#x2F; points to 4advance(ptr, 3);&#x2F;&#x2F; Displaying iterator positioncout &lt;&lt; &quot;The position of iterator after advancing is : &quot;;cout &lt;&lt; *ptr &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--The position of iterator after advancing is : 4 --&gt;&#x2F;*------------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; next() and prev()#include&lt;iostream&gt;#include&lt;iterator&gt; &#x2F;&#x2F; for iterators#include&lt;vector&gt; &#x2F;&#x2F; for vectorsusing namespace std;int main()&#123;vector&lt;int&gt; ar &#x3D; &#123; 1, 2, 3, 4, 5 &#125;;&#x2F;&#x2F; Declaring iterators to a vectorvector&lt;int&gt;::iterator ptr &#x3D; ar.begin();vector&lt;int&gt;::iterator ftr &#x3D; ar.end();&#x2F;&#x2F; Using next() to return new iterator&#x2F;&#x2F; points to 4auto it &#x3D; next(ptr, 3);&#x2F;&#x2F; Using prev() to return new iterator&#x2F;&#x2F; points to 3auto it1 &#x3D; prev(ftr, 3);&#x2F;&#x2F; Displaying iterator positioncout &lt;&lt; &quot;The position of new iterator using next() is : &quot;;cout &lt;&lt; *it &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;&#x2F;&#x2F; Displaying iterator positioncout &lt;&lt; &quot;The position of new iterator using prev() is : &quot;;cout &lt;&lt; *it1 &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;return 0;&#125;&lt;!--The position of new iterator using next() is : 4 --&gt;&lt;!--The position of new iterator using prev()  is : 3 --&gt;&#x2F;*---------------------------------------------------------*&#x2F;&#x2F;&#x2F; C++ code to demonstrate the working of&#x2F;&#x2F; inserter()#include&lt;iostream&gt;#include&lt;iterator&gt; &#x2F;&#x2F; for iterators#include&lt;vector&gt; &#x2F;&#x2F; for vectorsusing namespace std;int main()&#123;vector&lt;int&gt; ar &#x3D; &#123; 1, 2, 3, 4, 5 &#125;;vector&lt;int&gt; ar1 &#x3D; &#123;10, 20, 30&#125;;&#x2F;&#x2F; Declaring iterator to a vectorvector&lt;int&gt;::iterator ptr &#x3D; ar.begin();&#x2F;&#x2F; Using advance to set positionadvance(ptr, 3);&#x2F;&#x2F; copying 1 vector elements in other using inserter()&#x2F;&#x2F; inserts ar1 after 3rd position in arcopy(ar1.begin(), ar1.end(), inserter(ar,ptr));&#x2F;&#x2F; Displaying new vector elementscout &lt;&lt; &quot;The new vector after inserting elements is : &quot;;for (int &amp;x : ar)cout &lt;&lt; x &lt;&lt; &quot; &quot;;return 0;&#125;&lt;!--The new vector after inserting elements is : 1 2 3 10 20 30 4 5 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="#Menu">返回目录</a></p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>implement data structures which can be accessed in a sequential manner.<br />序列容器：实现可以按顺序访问的数据结构。<br /><a href="#Sequence_Containers">返回</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>provide a different interface for sequential containers.<br />容器适配器：为顺序容器提供不同的接口。<br /><a href="#Container_Adaptors">返回</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>implement sorted data structures that can be quickly searched (O(log n) complexity).<br />关联容器：实现可以快速搜索的排序数据结构（O（log n）复杂度）。<br /><a href="#Associative_Containers">返回</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>implement unordered data structures that can be quickly searched.<br />无序关联容器：实现可以快速搜索的无序数据结构.<br /><a href="#Unordered_Associative_Containers">返回</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++头文件汇总</title>
    <link href="/01/31/ACM/C++%E5%A4%B4%E6%96%87%E4%BB%B6%E6%B1%87%E6%80%BB/"/>
    <url>/01/31/ACM/C++%E5%A4%B4%E6%96%87%E4%BB%B6%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="1-万能头文件"><a class="markdownIt-Anchor" href="#1-万能头文件"></a> 1. 万能头文件</h1><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="2-c头文件汇总"><a class="markdownIt-Anchor" href="#2-c头文件汇总"></a> 2. C++头文件汇总</h1><ul><li>C 头文件</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span>　　　　<span class="token comment">//设定插入点</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span>　　　　 <span class="token comment">//字符处理</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span>　　　　 <span class="token comment">//定义错误码</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;float.h></span>　　　　 <span class="token comment">//浮点数处理</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iso646.h></span>        <span class="token comment">//对应各种运算符的宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span>　　　　<span class="token comment">//定义各种数据类型最值的常量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;locale.h></span>　　　　<span class="token comment">//定义本地化C函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span>　　　　　<span class="token comment">//定义数学函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;setjmp.h></span>        <span class="token comment">//异常处理支持</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span>        <span class="token comment">//信号机制支持</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span>        <span class="token comment">//不定参数列表支持</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span>        <span class="token comment">//常用常量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>　　　　 <span class="token comment">//定义输入／输出函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span>　　　　<span class="token comment">//定义杂项函数及内存分配函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>　　　　<span class="token comment">//字符串处理</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span>　　　　　<span class="token comment">//定义关于时间的函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wchar.h></span>　　　　 <span class="token comment">//宽字符处理及输入／输出</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wctype.h></span>　　　　<span class="token comment">//宽字符分类</span></span><span class="token comment">//传统C++</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream.h></span>　　　 <span class="token comment">//改用&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip.h></span>　　　 <span class="token comment">//改用&lt;iomainip></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream.h></span>　　　<span class="token comment">//改用&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;strstrea.h></span>　　　<span class="token comment">//该类不再支持，改用&lt;sstream>中的stringstream</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>标准 C++</li></ul><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>　　　 <span class="token comment">//STL 通用算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset></span>　　　　　<span class="token comment">//STL 位集容器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span>         <span class="token comment">//字符处理</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cerrno></span> 　　　　 <span class="token comment">//定义错误码</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cfloat></span>　　　　 <span class="token comment">//浮点数处理</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ciso646></span>         <span class="token comment">//对应各种运算符的宏</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span> 　　　　<span class="token comment">//定义各种数据类型最值的常量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;clocale></span> 　　　　<span class="token comment">//定义本地化函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span> 　　　　　<span class="token comment">//定义数学函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;complex></span>　　　　 <span class="token comment">//复数类</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;csignal></span>         <span class="token comment">//信号机制支持</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;csetjmp></span>         <span class="token comment">//异常处理支持</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdarg></span>         <span class="token comment">//不定参数列表支持</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef></span>         <span class="token comment">//常用常量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span> 　　　　 <span class="token comment">//定义输入／输出函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span> 　　　　<span class="token comment">//定义杂项函数及内存分配函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span> 　　　　<span class="token comment">//字符串处理</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span> 　　　　　<span class="token comment">//定义关于时间的函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cwchar></span> 　　　　 <span class="token comment">//宽字符处理及输入／输出</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cwctype></span> 　　　　<span class="token comment">//宽字符分类</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span>　　　　　 <span class="token comment">//STL 双端队列容器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;exception></span>　　　 <span class="token comment">//异常处理类</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span> 　　　 <span class="token comment">//文件输入／输出</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>　　　<span class="token comment">//STL 定义运算函数（代替运算符）</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits></span> 　　　　 <span class="token comment">//定义各种数据类型最值常量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span>　　　　　　<span class="token comment">//STL 线性列表容器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;locale></span>         <span class="token comment">//本地化特定信息</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span>　　　　　　 <span class="token comment">//STL 映射容器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span>         <span class="token comment">//STL通过分配器进行的内存分配</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;new></span>            <span class="token comment">//动态内存分配</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span>         <span class="token comment">//STL常用的数字操作</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span> 　　　 <span class="token comment">//参数化输入／输出</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ios></span>　　　　　　 <span class="token comment">//基本输入／输出支持</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iosfwd></span>　　　　　<span class="token comment">//输入／输出系统使用的前置声明</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> 　　　<span class="token comment">//数据流输入／输出</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;istream></span>　　　　 <span class="token comment">//基本输入流</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span>        <span class="token comment">//STL迭代器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ostream></span>　　　　 <span class="token comment">//基本输出流</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span>　　　　　 <span class="token comment">//STL 队列容器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span>　　　　　　 <span class="token comment">//STL 集合容器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span>　　　　 <span class="token comment">//基于字符串的流</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span>　　　　　 <span class="token comment">//STL 堆栈容器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdexcept></span>　　　 <span class="token comment">//标准异常类</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;streambuf></span>　　　 <span class="token comment">//底层输入／输出支持</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span>　　　　　<span class="token comment">//字符串类</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeinfo></span>        <span class="token comment">//运行期间类型信息</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span>　　　　 <span class="token comment">//STL 通用模板类</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;valarray></span>        <span class="token comment">//对包含值的数组的操作</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span>　　　　　<span class="token comment">//STL 动态数组容器</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>C99 增加部分</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;complex.h></span>　　 <span class="token comment">//复数处理</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fenv.h></span>　　　　<span class="token comment">//浮点环境</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span>　　<span class="token comment">//整数格式转换</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span>　　 <span class="token comment">//布尔环境</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span>　　　<span class="token comment">//整型环境</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tgmath.h></span>　　　<span class="token comment">//通用类型数学宏</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="ctypeh"><a class="markdownIt-Anchor" href="#ctypeh"></a> ctype.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 ctype.h字符处理函数: 本类别函数用于对单个字符进行处理，包括字符的类别测试和字符的大小写转换----------------------------------------字符测试是否字母和数字 isalnum是否字母 isalpha是否控制字符 iscntrl是否数字 isdigit是否可显示字符(除空格外) isgraph是否可显示字符(包括空格) isprint是否既不是空格，又不是字母和数字的可显示字符 ispunct是否空格 isspace是否大写字母 isupper是否16进制数字(0－9，A-F)字符 isxdigit字符大小写转换函数 转换为大写字母 toupper转换为小写字母 tolower<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="localh"><a class="markdownIt-Anchor" href="#localh"></a> local.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 local.h地区化: 本类别的函数用于处理不同国家的语言差异。----------------------------------------地区控制 地区设置 setlocale数字格式约定查询 国家的货币、日期、时间等的格式转换 localeconv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="mathh"><a class="markdownIt-Anchor" href="#mathh"></a> math.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 math.h数学函数: 本分类给出了各种数学计算函数，必须提醒的是ANSIC标准中的数据格式并不符合IEEE754标准，一些C语言编译器却遵循IEEE754(例如frinklin C51)----------------------------------------反余弦 acos反正弦 asin反正切 atan反正切2 atan2余弦 cos正弦 sin正切 tan双曲余弦 cosh双曲正弦 sinh双曲正切 tanh指数函数 exp指数分解函数 frexp乘积指数函数 fdexp自然对数 log以10为底的对数 log10浮点数分解函数 modf幂函数 pow平方根函数 sqrt求下限接近整数 ceil绝对值 fabs求上限接近整数 floor求余数 fmod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="setjmph-ioh"><a class="markdownIt-Anchor" href="#setjmph-ioh"></a> setjmp.h io.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 setjmp.h io.h本分类函数用于实现在不同底函数之间直接跳转代码。----------------------------------------保存调用环境 setjmp恢复调用环境 longjmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="signalh"><a class="markdownIt-Anchor" href="#signalh"></a> signal.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 signal.h信号处理: 该分类函数用于处理那些在程序执行过程中发生例外的情况。----------------------------------------指定信号处理函数 signal发送信号 raise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="stdargh"><a class="markdownIt-Anchor" href="#stdargh"></a> stdarg.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 stdarg.h可变参数处理: 本类函数用于实现诸如printf,scanf等参数数量可变底函数。----------------------------------------可变参数访问宏可变参数开始宏 va_start可变参数结束宏 va_end可变参数访问宏 访问下一个可变参数宏 va_arg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="stringh"><a class="markdownIt-Anchor" href="#stringh"></a> string.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 string.h字符串处理: 本分类的函数用于对字符串进行合并、比较等操作。----------------------------------------字符串拷贝 块拷贝(目的和源存储区不可重叠) memcpy块拷贝(目的和源存储区可重叠) memmove串拷贝 strcpy按长度的串拷贝 strncpy字符串连接函数 串连接 strcat按长度连接字符串 strncat串比较函数 块比较 memcmp字符串比较 strcmp字符串比较(用于非英文字符) strcoll按长度对字符串比较 strncmp字符串转换 strxfrm字符与字符串查找 字符查找 memchr字符查找 strchr字符串查找 strcspn字符串查找 strpbrk字符串查找 strspn字符串查找 strstr字符串分解 strtok杂类函数 字符串设置 memset错误字符串映射 strerror求字符串长度 strlen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="stdlibh"><a class="markdownIt-Anchor" href="#stdlibh"></a> stdlib.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 stdlib.h实用工具函数: 本分类给出了一些函数无法按以上分类，但又是编程所必须要的。--------------------------------------------字符串转换函数字符串转换为整数 atoi字符串转换为长整数 atol字符串转换为浮点数 strtod字符串转换为长整数 strtol字符串转换为无符号长整型 strtoul伪随机序列产生函数产生随机数 rand设置随机函数的起动数值 srand存储管理函数分配存储器 calloc释放存储器 free存储器分配 malloc重新分配存储器 realloc环境通信中止程序 abort退出程序执行，并清除环境变量 atexit退出程序执行 exit读取环境参数 getenv程序挂起，临时执行一个其他程序 system搜索和排序工具 二分查找(数据必须已排序) bsearch快速排序 qsort整数运算函数 求绝对值 abs得到除法运算底商和余数 div求长整形底绝对值 labs求长整形除法的商和余数 ldiv多字节字符函数 得到多字节字符的字节数 mblen得到多字节字符的字节数 mbtowc多字节字符转换 wctomb多字节字符的字符串操作 将多字节串转换为整数数组 mbstowcs将多字节串转换为字符数组 mcstowbs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="stdioh"><a class="markdownIt-Anchor" href="#stdioh"></a> stdio.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 stdio.h输入输出函数:该分类用于处理包括文件、控制台等各种输入输出设备，各种函数以“流”的方式实现----------------------------------------删除文件 remove修改文件名称 rename生成临时文件名称 tmpfile得到临时文件路径 tmpnam文件访问 关闭文件 fclose刷新缓冲区 fflush打开文件 fopen将已存在的流指针和新文件连接 freopen设置磁盘缓冲区 setbuf设置磁盘缓冲区 setvbuf格式化输入与输出函数格式输出 fprintf格式输入 fscanf格式输出(控制台) printf格式输入(控制台) scanf格式输出到缓冲区 sprintf从缓冲区中按格式输入 sscanf格式化输出 vfprintf格式化输出 vprintf格式化输出 vsprintf字符输入输出函数输入一个字符 fgetc字符串输入 fgets字符输出 fputc字符串输出 fputs字符输入(控制台) getc字符输入(控制台) getchar字符串输入(控制台) gets字符输出(控制台) putc字符输出(控制台) putchar字符串输出(控制台) puts字符输出到流的头部 ungetc直接输入输出直接流读操作 fread直接流写操作 fwrite文件定位函数得到文件位置 fgetpos文件位置移动 fseek文件位置设置 fsetpos得到文件位置 ftell文件位置复零位 remind错误处理函数错误清除 clearerr文件结尾判断 feof文件错误检测 ferror得到错误提示字符串 perror<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><h2 id="timeh"><a class="markdownIt-Anchor" href="#timeh"></a> time.h</h2></li></ul><div class="code-wrapper"><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">头文件 time.h日期和时间函数: 本类别给出时间和日期处理函数----------------------------------------时间操作函数得到处理器时间 clock得到时间差 difftime设置时间 mktime得到时间 time时间转换函数 得到以ASCII码表示的时间 asctime得到字符串表示的时间 ctime得到指定格式的时间 strftime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL标准模板库</title>
    <link href="/01/31/ACM/STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <url>/01/31/ACM/STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector, 变长数组，倍增的思想    size()  返回元素个数    empty()  返回是否为空    clear()  清空    front()&#x2F;back()    push_back()&#x2F;pop_back()    begin()&#x2F;end()    []    支持比较运算，按字典序pair&lt;int, int&gt;    first, 第一个元素    second, 第二个元素    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）string，字符串    size()&#x2F;length()  返回字符串长度    empty()    clear()    substr(起始下标，(子串长度))  返回子串    c_str()  返回字符串所在字符数组的起始地址queue, 队列    size()    empty()    push()  向队尾插入一个元素    front()  返回队头元素    back()  返回队尾元素    pop()  弹出队头元素priority_queue, 优先队列，默认是大根堆    push()  插入一个元素    top()  返回堆顶元素    pop()  弹出堆顶元素    定义成小根堆的方式：priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;stack, 栈    size()    empty()    push()  向栈顶插入一个元素    top()  返回栈顶元素    pop()  弹出栈顶元素deque, 双端队列    size()    empty()    clear()    front()&#x2F;back()    push_back()&#x2F;pop_back()    push_front()&#x2F;pop_front()    begin()&#x2F;end()    []set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列    size()    empty()    clear()    begin()&#x2F;end()    ++, -- 返回前驱和后继，时间复杂度 O(logn)    set&#x2F;multiset        insert()  插入一个数        find()  查找一个数        count()  返回某一个数的个数        erase()            (1) 输入是一个数x，删除所有x   O(k + logn)            (2) 输入一个迭代器，删除这个迭代器        lower_bound()&#x2F;upper_bound()            lower_bound(x)  返回大于等于x的最小的数的迭代器            upper_bound(x)  返回大于x的最小的数的迭代器    map&#x2F;multimap        insert()  插入的数是一个pair        erase()  输入的参数是pair或者迭代器        find()        []  注意multimap不支持此操作。 时间复杂度是 O(logn)        lower_bound()&#x2F;upper_bound()unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表    和上面类似，增删改查的时间复杂度是 O(1)    不支持 lower_bound()&#x2F;upper_bound()， 迭代器的++，--bitset, 圧位    bitset&lt;10000&gt; s;    ~, &amp;, |, ^    &gt;&gt;, &lt;&lt;    &#x3D;&#x3D;, !&#x3D;    []    count()  返回有多少个1    any()  判断是否至少有一个1    none()  判断是否全为0    set()  把所有位置成1    set(k, v)  将第k位变成v    reset()  把所有位变成0    flip()  等价于~    flip(k) 把第k位取反<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="1-map"><a class="markdownIt-Anchor" href="#1-map"></a> 1. map</h2><blockquote><p>map 中所有元素的 key 的值必须是唯一的，multimap 则允许有重复的 Key 值。</p></blockquote><ul><li>构建</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">map&lt;string, long long&gt; m;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>向 map 中插入元素</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">m[key]&#x3D;value;&#x2F;&#x2F;[key]操作是map很有特色的操作,如果在map中存在键值为key的元素对, 则返回该元素对的值域部分,否则将会创建一个键值为key的元素对,值域为默认值。所以可以用该操作向map中插入元素对或修改已经存在的元素对的值域部分。m.insert(male_pair(key,value));&#x2F;&#x2F;也可以直接调用insert方法插入元素对,insert操作会返回一个pair,当map中没有与key相匹配的键值时,其first是指向插入元素对的迭代器,其second为true;若map中已经存在与key相等的键值时,其first是指向该元素对的迭代器,second为false。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>查找元素</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i&#x3D;m[key];&#x2F;&#x2F;要注意的是,当与该键值相匹配的元素对不存在时,会创建键值为key（当另一个元素是整形时，m[key]&#x3D;0）的元素对。map&lt;string, int&gt;::iterator it&#x3D;m.find(key);&#x2F;&#x2F;如果map中存在与key相匹配的键值时,find操作将返回指向该元素对的迭代器,否则,返回的迭代器等于map的end()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>删除元素</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;erase的参数可以是key或者迭代器m.erase(key);&#x2F;&#x2F;删除与指定key键值相匹配的元素对,并返回被删除的元素的个数。m.erase(it);&#x2F;&#x2F;删除由迭代器it所指定的元素对,并返回指向下一个元素对的迭代器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>map 的 upper_bound/lower_bound<blockquote><p>iterator lower_bound( const key_type &amp;key ): 返回一个迭代器，指向键值&gt;= key 的第一个元素。<br />iterator upper_bound( const key_type &amp;key ):返回一个迭代器，指向键值&gt; key 的第一个元素。</p></blockquote></li><li>其他简单操作</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">m.size();       &#x2F;&#x2F;返回元素个数m.empty();      &#x2F;&#x2F;判断是否为空m.clear();      &#x2F;&#x2F;清空所有元素m.begin();      &#x2F;&#x2F;返回首迭代器m.end();        &#x2F;&#x2F;返回尾迭代器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="2-c-queue"><a class="markdownIt-Anchor" href="#2-c-queue"></a> 2. C++ queue</h1><blockquote><p><strong><em><code>#include&lt;queue&gt;</code></em></strong><br />头文件 queue 里包含了循环队列 queue 和优先队列 priority_queue</p></blockquote><ul><li><h4 id="循环队列-queue"><a class="markdownIt-Anchor" href="#循环队列-queue"></a> 循环队列 queue</h4></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">queue&lt;int&gt; q;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>front()：返回 queue 中第一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</li><li>back()：返回 queue 中最后一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</li><li>push(const T&amp; obj)：在 queue 的尾部添加一个元素的副本。这是通过调用底层容器的成员函数 push_back() 来完成的。</li><li>push(T&amp;&amp; obj)：以移动的方式在 queue 的尾部添加元素。这是通过调用底层容器的具有右值引用参数的成员函数 push_back()来完成的。</li><li>pop()：删除 queue 中的第一个元素。</li><li>size()：返回 queue 中元素的个数。</li><li>empty()：如果 queue 中没有元素的话，返回 true。</li><li>emplace()：用传给 emplace() 的参数调用 T 的构造函数，在 queue 的尾部生成对象。</li><li>swap(queue<T> &amp;other_q)：将当前 queue 中的元素和参数 queue 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</li><li><h4 id="优先队列-priority_queue"><a class="markdownIt-Anchor" href="#优先队列-priority_queue"></a> 优先队列 priority_queue</h4></li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">priority_queue&lt;int&gt; q;&#x2F;&#x2F;大根堆（堆顶值最大）priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;&#x2F;&#x2F;小根堆（堆顶值最小）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><blockquote><p>注意 priority_queue 中储存的元素类型必须定义“小于号”（注意这里虽然是&lt;小于号，但实际上是大于号），较大的元素会被放在堆顶。内置的 int、string 等类型已经定义过“小于号”，若使用结构体则必须重载运算符。<br />由于 priority_queue 是按照从大到小排序所以重载运算符时也要反过来。</p></blockquote><h6 id="1-大根堆"><a class="markdownIt-Anchor" href="#1-大根堆"></a> 1. 大根堆</h6><p><strong>重载“&lt;”运算符</strong></p><blockquote><p>下面的 poi 结构体保存了二维平面上的编号和坐标，比较大小时，先比较横坐标，再比较纵坐标，并考虑了精度误差。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct poi&#123;    int id;    double x,y;&#125;;const double eps &#x3D; 1e-8;bool operator&lt;(const poi &amp;a,const poi &amp;b)&#123;    return a.x+eps&lt;b.x||a.x&lt;b.x+eps&amp;&amp;a.y&lt;b.y;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h6 id="2-小根堆"><a class="markdownIt-Anchor" href="#2-小根堆"></a> 2. 小根堆</h6><blockquote><p>下面代码重载运算符之后定义了一个小根堆（堆顶元素值最小，其实就是从小到大排序）</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct node&#123;int value ;friend bool operator &lt; (node a , node b)&#123;return a.value &gt; b.value;&#125;&#125;;priority_queue&lt;node&gt; q;&#x2F;&#x2F;------------------------------------------------struct node&#123;int value ; bool operator &lt; (const node &amp;a) const&#123;return value &gt; a.value;&#125;&#125;;priority_queue&lt;node&gt; q;&#x2F;&#x2F; 成员函数q.top();        &#x2F;&#x2F;访问堆顶元素q.empty();      &#x2F;&#x2F;检查是否为空q.size();       &#x2F;&#x2F;返回容纳的元素数q.push();       &#x2F;&#x2F;插入元素，并排序q.pop();        &#x2F;&#x2F;删除栈顶元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h6 id="2-懒惰删除法"><a class="markdownIt-Anchor" href="#2-懒惰删除法"></a> 2. 懒惰删除法</h6><blockquote><p>如果是手写的堆是支持删除任意一个元素，而 STL 却不支持这种操作所以我们可以用懒惰删除法<br />懒惰删除法又称延迟删除法，是一种应对策略。当遇到删除操作时，仅在优先队列之外做一些特殊的记录，用于辨别是否堆中的元素被删除。当从堆顶取出元素时判断是否已经被删除，若是，我们重新取一个最值。换言之，元素的“删除”推迟到堆顶执行。<br />比如“堆优化的 Dijkstra 算法”中当某个元素首次被取出时就达到了最短路，当我们再次取出这个元素时我们不会重新进行扩展，而是使用一个 bool 数组判断“是否进行过扩展”，其本质还是懒惰删除法的应用。</p></blockquote><ul><li><h4 id="双端队列-deque"><a class="markdownIt-Anchor" href="#双端队列-deque"></a> 双端队列 deque</h4>头文件 deque</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;deque&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>双端队列 deque 支持队列两端高效地插入或删除元素的连续性存储空间。与 vector 相比，deque 在头部增删元素只需要 O ( 1 ) O(1)O(1)，并且 deque 像数组一样支持下标随机访问。</p></blockquote><table><thead><tr><th style="text-align:center">[]</th><th style="text-align:center">随机访问 O(1)</th></tr></thead><tbody><tr><td style="text-align:center">begin/end</td><td style="text-align:center">deque 的头/尾迭代器 O(1)</td></tr><tr><td style="text-align:center">front/back</td><td style="text-align:center">队头/队尾元素 O(1)</td></tr><tr><td style="text-align:center">push_front</td><td style="text-align:center">从队头入队 O(1)</td></tr><tr><td style="text-align:center">push_back</td><td style="text-align:center">从队尾入队 O(1)</td></tr><tr><td style="text-align:center">pop_front</td><td style="text-align:center">从队头出队 O(1)</td></tr><tr><td style="text-align:center">pop_back</td><td style="text-align:center">从队尾出队 O(1)</td></tr><tr><td style="text-align:center">clear</td><td style="text-align:center">清空队列 O(n)</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++输入输出加速</title>
    <link href="/01/30/ACM/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%BC%98%E5%8C%96/"/>
    <url>/01/30/ACM/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ios::sync_with_stdio(false);cin.tie(NULL);const int maxn &#x3D; 110;const int INF &#x3D; 0x3f3f3f3f;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="1-快读"><a class="markdownIt-Anchor" href="#1-快读"></a> 1. 快读</h1><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline int read()&#123;    int re&#x3D;0,k&#x3D;1;    char ch&#x3D;getchar();    while(ch&gt;&#39;9&#39;||ch&lt;&#39;0&#39;)&#123;        if(ch&#x3D;&#x3D;&#39;-&#39;)&#123;            k&#x3D;-1;        &#125;        ch&#x3D;getchar();    &#125;    return re*k;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="2-快写"><a class="markdownIt-Anchor" href="#2-快写"></a> 2. 快写</h1><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline void write(int x)&#123;    if(X&lt;10)&#123;        putchar(x+48);        retrun;    &#125;    write(x&#x2F;10);    write(x%10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>__int128 占 16 字节，可存的数据范围达到了 long long 的平方: $ 10^32 $，不能用 cin，需要用手写快读快写（其实也可以用 scanf 和 printf）</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 快读__int128 read()&#123;    __int128 x&#x3D;0,f&#x3D;1;    char ch&#x3D;getchar();    while(!isdigit(ch)&amp;&amp;ch!&#x3D;&#39;-&#39;)ch&#x3D;getchar();    if(ch&#x3D;&#x3D;&#39;-&#39;)f&#x3D;-1;    while(isdigit(ch))x&#x3D;x*10+ch-&#39;0&#39;,ch&#x3D;getchar();    return f*x;&#125;&#x2F;&#x2F; 快写void print(__int128 x)&#123;    if(x&lt;0)putchar(&#39;-&#39;),x&#x3D;-x;    if(x&gt;9)print(x&#x2F;10);&#x2F;&#x2F;注意这里是x&gt;9不是x&gt;10 (2019.10 wa哭了回来标记一下)    putchar(x%10+&#39;0&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
